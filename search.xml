<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos搭建GitLab</title>
    <url>/2019/09/01/Centos%E6%90%AD%E5%BB%BAGitLab/</url>
    <content><![CDATA[
        <h4 id="编辑源"   >
          <a href="#编辑源" class="heading-link"><i class="fas fa-link"></i></a><a href="#编辑源" class="headerlink" title="编辑源"></a>编辑源</h4>
      <p><span class="exturl"><a class="exturl__link"   href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" >使用清华大学 TUNA 镜像源</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>打开网址将内容复制到<code>gitlab-ce.repo</code>文件中，编辑路径<code>vim /etc/yum.repos.d/gitlab-ce.repo</code></p>
<span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></div></figure>


        <h4 id="更新本地-YUM-缓存"   >
          <a href="#更新本地-YUM-缓存" class="heading-link"><i class="fas fa-link"></i></a><a href="#更新本地-YUM-缓存" class="headerlink" title="更新本地 YUM 缓存"></a>更新本地 YUM 缓存</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sudo yum makecache</span><br></pre></td></tr></table></div></figure>

        <h4 id="安装-GitLab-社区版"   >
          <a href="#安装-GitLab-社区版" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-GitLab-社区版" class="headerlink" title="安装 GitLab 社区版"></a>安装 GitLab 社区版</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sudo yum install gitlab-ce #(自动安装最新版)</span><br><span class="line">sudo yum install gitlab-ce-8.8.4-ce.0.el6 #(安装指定版本)</span><br></pre></td></tr></table></div></figure>

        <h4 id="更改配置"   >
          <a href="#更改配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"># 找到 external_url &#x27;http://000.00.00.00:8081&#x27;</span><br><span class="line"># 修改成你的地址</span><br></pre></td></tr></table></div></figure>

        <h4 id="配置并启动GitLab"   >
          <a href="#配置并启动GitLab" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置并启动GitLab" class="headerlink" title="配置并启动GitLab"></a>配置并启动GitLab</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 打开`/etc/gitlab/gitlab.rb`,</span><br><span class="line"># 将`external_url = &#x27;http://git.example.com&#x27;`修改为自己的IP地址：`http://xxx.xx.xxx.xx`，</span><br><span class="line"># 然后执行下面的命令，对GitLab进行编译。</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></div></figure>


        <h4 id="登录GitLab"   >
          <a href="#登录GitLab" class="heading-link"><i class="fas fa-link"></i></a><a href="#登录GitLab" class="headerlink" title="登录GitLab"></a>登录GitLab</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">为root用户设置登录密码</span><br></pre></td></tr></table></div></figure>


        <h4 id="GitLab头像无法正常显示"   >
          <a href="#GitLab头像无法正常显示" class="heading-link"><i class="fas fa-link"></i></a><a href="#GitLab头像无法正常显示" class="headerlink" title="GitLab头像无法正常显示"></a>GitLab头像无法正常显示</h4>
      <p>原因：gravatar被墙<br>解决办法：<br>编辑 /etc/gitlab/gitlab.rb，将</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># gitlab_rails[&#x27;gravatar_plain_url&#x27;] = &#x27;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&#x27;</span><br></pre></td></tr></table></div></figure>
<p>修改为：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&#x27;gravatar_plain_url&#x27;] = &#x27;http://gravatar.duoshuo.com/avatar/%&#123;hash&#125;?s=%&#123;size&#125;&amp;d=identicon&#x27;</span><br></pre></td></tr></table></div></figure>
<p>然后再执行命令</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure </span><br><span class="line">sudo gitlab-rake cache:clear RAILS_ENV=production</span><br></pre></td></tr></table></div></figure>


        <h4 id="nginx配置"   >
          <a href="#nginx配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4>
      <p>解决 80 端口被占用</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">upstream gitlab &#123;</span><br><span class="line">     server 114.55.111.111:8081 ;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    #侦听的80端口</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  git.diggg.cn;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://gitlab;    #在这里设置一个代理，和upstream的名字一样</span><br><span class="line">        #以下是一些反向代理的配置可删除</span><br><span class="line">        proxy_redirect             off;</span><br><span class="line">        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">        proxy_set_header           Host $host;</span><br><span class="line">        proxy_set_header           X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size       10m; #允许客户端请求的最大单文件字节数</span><br><span class="line">        client_body_buffer_size    128k; #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">        proxy_connect_timeout      300; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">        proxy_send_timeout         300; #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">        proxy_read_timeout         300; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">        proxy_buffer_size          4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">        proxy_buffers              4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">        proxy_busy_buffers_size    64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">        proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 检查配置</span><br><span class="line">/usr/local/nginx-1.5.1/sbin/nginx -tc conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># nginx 重新加载配置</span><br><span class="line">/usr/local/nginx-1.5.1/sbin/nginx -s reload</span><br></pre></td></tr></table></div></figure>

        <h4 id="运维"   >
          <a href="#运维" class="heading-link"><i class="fas fa-link"></i></a><a href="#运维" class="headerlink" title="运维"></a>运维</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 启动所有 gitlab 组件：</span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br><span class="line"># 停止所有 gitlab 组件：</span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"># 重启所有 gitlab 组件：</span><br><span class="line">sudo gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"># 查看服务状态</span><br><span class="line">sudo gitlab-ctl status</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"># 修改默认的配置文件</span><br><span class="line">sudo vim /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"># 查看版本</span><br><span class="line">sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line"></span><br><span class="line"># echo &quot;vm.overcommit_memory=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line"># sysctl -p</span><br><span class="line"># echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"></span><br><span class="line"># 检查gitlab</span><br><span class="line">gitlab-rake gitlab:check SANITIZE=true --trace</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">sudo gitlab-ctl tail</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h4 id="备份恢复"   >
          <a href="#备份恢复" class="heading-link"><i class="fas fa-link"></i></a><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h4>
      <ul>
<li>Gitlab 创建备份<br>使用Gitlab一键安装包安装Gitlab非常简单, 同样的备份恢复与迁移也非常简单,用一条命令即可创建完整的Gitlab备份:</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></div></figure>
<p>以上命令将在/var/opt/gitlab/backups目录下创建一个名称类似为xxxxxxxx_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的xxxxxx是备份创建的时间戳。</p>
<ul>
<li>Gitlab 修改备份文件默认目录<br>修改<code>/etc/gitlab/gitlab.rb</code>来修改默认存放备份文件的目录:</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&#x27;backup_path&#x27;] = &#x27;/mnt/backups&#x27;</span><br></pre></td></tr></table></div></figure>
<p>修改后使用gitlab-ctl reconfigure命令重载配置文件。</p>
<ul>
<li>备份</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">0 2 * * * /usr/bin/gitlab-rake gitlab:backup:create</span><br><span class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></div></figure>

<ul>
<li>恢复<br>首先进入备份 gitlab 的目录，这个目录是配置文件中的 <code>gitlab_rails[&#39;backup_path&#39;] </code>，默认为 <code>/var/opt/gitlab/backups</code> 。<br>然后停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 停止相关数据连接服务</span><br><span class="line"># ok: down: unicorn: 0s, normally up</span><br><span class="line">gitlab-ctl stop unicorn  </span><br><span class="line"># ok: down: sidekiq: 0s, normally up</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line"># 从xxxxx编号备份中恢复</span><br><span class="line"># 然后恢复数据，1406691018为备份文件的时间戳</span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP=xxxxxx</span><br><span class="line"></span><br><span class="line"># 启动Gitlab</span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



        <h4 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考" class="headerlink" title="参考"></a>参考</h4>
      <p><span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/57d7c7a979bc44005e594f18" >https://juejin.im/post/57d7c7a979bc44005e594f18</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/214a2fd8f931" >CenterOS上安装GitLab并自定义域名访问GitLab管理页面</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>CurrentHashMap源码学习笔记</title>
    <url>/2018/06/13/CurrentHashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>由于<code>HashMap</code>是线程不安全的在多线程并发下容易出现问题，比如自身的死锁问题,而<code>HashTable</code>虽然是线程安全的,但是由于它的内部是通过对所有操作方法进行方法级别的<code>synchronized</code>加锁,导致性能太低(<code>synchronized</code>太过重量级),所以引入<code>CurrentHashMap</code></p>
</blockquote>
<span id="more"></span>


        <h4 id="jdk1-7"   >
          <a href="#jdk1-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#jdk1-7" class="headerlink" title="jdk1.7"></a>jdk1.7</h4>
      <blockquote>
<p>采用segment分段枷锁机制来控制并发</p>
</blockquote>
<ul>
<li><p>segment[] 分段锁数组</p>
</li>
<li><p>segment – 多个hashMap –&gt; HashEntry</p>
</li>
<li><p>多个小的HashMap公用同一把锁</p>
</li>
<li><p>put时先确定放到那个segment中然后再确定放到改segment中的那个数组中剩下的和jdk7中的hashMap一样</p>

        <h4 id="jdk1-8"   >
          <a href="#jdk1-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#jdk1-8" class="headerlink" title="jdk1.8"></a>jdk1.8</h4>
      <blockquote>
<p>基于<code>CAS</code>的乐观锁实现来控制并发</p>
</blockquote>
</li>
<li><p>思路:<br>对于数组上的链表 任何操作都需要通过拿到头节点才能进行后续操作，所以只对头节点进行加锁效率更高</p>
</li>
<li><p>源码分析put</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</span><br><span class="line">        //key不能为null</span><br><span class="line">        if (key == null || value == null) throw new NullPointerException();</span><br><span class="line">        //进行hash计算</span><br><span class="line">        int hash = spread(key.hashCode());</span><br><span class="line">        int binCount = 0;</span><br><span class="line">        for (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; int n, i, fh;</span><br><span class="line">            //table为空则初始化</span><br><span class="line">            if (tab == null || (n = tab.length) == 0)</span><br><span class="line">                tab = initTable();</span><br><span class="line">                //table不为空 但是该位置元素为空</span><br><span class="line">            else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123;</span><br><span class="line">                if (casTabAt(tab, i, null,</span><br><span class="line">                             new Node&lt;K,V&gt;(hash, key, value, null)))</span><br><span class="line">                    break;                   // no lock when adding to empty bin</span><br><span class="line">            &#125;</span><br><span class="line">            else if ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            else &#123;</span><br><span class="line">                V oldVal = null;</span><br><span class="line">                // 加锁  f就是当前数组链表的头节点 *重点*</span><br><span class="line">                synchronized (f) &#123;</span><br><span class="line">                    if (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        if (fh &gt;= 0) &#123;</span><br><span class="line">                            binCount = 1;</span><br><span class="line">                            for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                if (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                     (ek != null &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    if (!onlyIfAbsent)</span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    break;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                if ((e = e.next) == null) &#123;</span><br><span class="line">                                    pred.next = new Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, null);</span><br><span class="line">                                    break;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else if (f instanceof TreeBin) &#123;</span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = 2;</span><br><span class="line">                            if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != null) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                if (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (binCount != 0) &#123;</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    if (oldVal != null)</span><br><span class="line">                        return oldVal;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(1L, binCount);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure></li>
</ul>
]]></content>
      <tags>
        <tag>面试</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记-docker-compose</title>
    <url>/2019/09/01/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-docker-compose/</url>
    <content><![CDATA[<ul>
<li>通过以下命令自动下载并安装适应系统版本的Compose</li>
</ul>
<span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<ul>
<li>为安装脚本添加执行权限</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>这样，Compose就安装完成了。<br>可使用以下命令测试安装结果。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>可输出类似于如下的内容。<br><code>docker-compose version 1.16.1, build 1719ceb </code><br>说明Compose已成功安装。</p>
<ul>
<li>安装Compose命令补全工具<br>我们已成功安装Compose，然而，当我们输入<code>docker-compose</code> 并按下Tab键时，Compose并没有为我们补全命令。要想使用Compose的命令补全，我们需要安装命令补全工具。</li>
</ul>
<p>命令补全工具在Bash和Zsh下的安装方式不同，本书演示的是Bash下的安装。其他Shell以及其他操作系统上的安装，可详见Docker的官方文档：<span class="exturl"><a class="exturl__link"   href="https://docs.docker.com/compose/completion/" >https://docs.docker.com/compose/completion/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<ul>
<li>执行以下命令，即可安装命令补全工具。执行以下命令，即可安装命令补全工具。</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>这样，在重新登录后，输入docker-compose 并按下Tab键，Compose就可自动补全命令了。</p>
<ul>
<li>Docker Compose安装:<span class="exturl"><a class="exturl__link"   href="https://docs.docker.com/compose/install/" >https://docs.docker.com/compose/install/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>命令补全工具安装: <span class="exturl"><a class="exturl__link"   href="https://docs.docker.com/compose/completion/" >https://docs.docker.com/compose/completion/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>参考：<span class="exturl"><a class="exturl__link"   href="http://www.itmuch.com/docker/00-docker-lession-index/" >http://www.itmuch.com/docker/00-docker-lession-index/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK收集Nginx日志</title>
    <url>/2022/04/05/ELK%E6%94%B6%E9%9B%86Nginx%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[
        <h3 id="1-配置nginx日志"   >
          <a href="#1-配置nginx日志" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-配置nginx日志" class="headerlink" title="1.配置nginx日志"></a>1.配置nginx日志</h3>
      <p>编辑nginx.conf文件  <code>vim /etc/nginx/nginx.conf</code> 在http节点下配置如下</p>
<span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">log_format json &#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;@version&quot;:&quot;1&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;client&quot;:&quot;$remote_addr&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;url&quot;:&quot;$uri&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;status&quot;:&quot;$status&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;domain&quot;:&quot;$host&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;size&quot;:$body_bytes_sent,&#x27;</span><br><span class="line">                           &#x27;&quot;responsetime&quot;:$request_time,&#x27;</span><br><span class="line">                           &#x27;&quot;referer&quot;: &quot;$http_referer&quot;,&#x27;</span><br><span class="line">                           &#x27;&quot;ua&quot;: &quot;$http_user_agent&quot;&#x27;</span><br><span class="line">               &#x27;&#125;&#x27;;</span><br><span class="line">    access_log /data/nginx/logs/access_json.log json;</span><br></pre></td></tr></table></div></figure>
<p>目的就是将nginx的日志以json的形式进行文件存储，方便es存储<br>访问nginx 查看日志 <code>tail -f /data/nginx/logs/access_json.log</code> 可以看到新的入职信息说明配置正常<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-80d53823eaf1547a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h3 id="安装elk"   >
          <a href="#安装elk" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装elk" class="headerlink" title="安装elk"></a>安装elk</h3>
      <p>采用<code>docker-compose</code>安装</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: &quot;elasticsearch:7.1.1&quot;</span><br><span class="line">    container_name: &quot;elasticsearch&quot;</span><br><span class="line">    restart: &quot;always&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;elasticsearch:/usr/share/elasticsearch&quot;</span><br><span class="line">    #vim /etc/sysctl.conf</span><br><span class="line">    #vm.max_map_count=262144</span><br><span class="line">    #sysctl -w vm.max_map_count=262144</span><br><span class="line">    #sysctl -p</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br><span class="line">      - discovery.type=single-node</span><br><span class="line">    networks:</span><br><span class="line">      - &quot;elk&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9200:9200&quot;</span><br><span class="line">      - &quot;9300:9300&quot;</span><br><span class="line">  kibana:</span><br><span class="line">    image: &quot;kibana:7.1.1&quot;</span><br><span class="line">    container_name: &quot;kibana&quot;</span><br><span class="line">    restart: &quot;always&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - elasticsearch</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;kibana:/usr/share/kibana&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - &quot;elk&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5601:5601&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  logstash:</span><br><span class="line">    image: &quot;logstash:7.1.1&quot;</span><br><span class="line">    container_name: &quot;logstash&quot;</span><br><span class="line">    restart: &quot;always&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - &quot;elk&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5044:5044&quot;</span><br><span class="line">      - &quot;9600:9600&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;logstash:/usr/share/logstash&quot;</span><br><span class="line">      - &quot;/data/nginx/logs:/data/nginx/logs&quot;  </span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elk:</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  elasticsearch:</span><br><span class="line">  logstash:</span><br><span class="line">  kibana:</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<ul>
<li><p>配置logstash.yml<br>在<code>config/logstash.yml</code>文件下追加</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">path.config: /usr/share/logstash/conf.d/*.conf</span><br></pre></td></tr></table></div></figure></li>
<li><p>配置logstash日志处理文件<br>新增<code>conf.d/logstash.conf</code>文件 内容如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">   file &#123;</span><br><span class="line">        type =&gt; &quot;nginx-access-log&quot;</span><br><span class="line">        path =&gt; &quot;/data/nginx/logs/access_json.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">        stat_interval =&gt; &quot;2&quot;</span><br><span class="line">        codec =&gt; json</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">filter &#123;&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;http://elasticsearch:9200&quot;]</span><br><span class="line">    #index =&gt; &quot;%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    index =&gt; &quot;logstash-nginx-access-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    #user =&gt; &quot;elastic&quot;</span><br><span class="line">    #password =&gt; &quot;changeme&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>说明：</p>
</li>
<li><p>start_position 指从文件开始位置读取</p>
</li>
<li><p>stat_interval 指每间隔两秒读取一次</p>
</li>
<li><p>index 指定索引名称</p>
</li>
<li><p>user | password 这里没有安装<code>xpack</code>插件，所以用户名，密码不用配置，如果需要可以 自行配置<br>启动<code>docker-compose</code><br><code>docker -compose up -d --build</code></p>
</li>
</ul>
<p>之后打开head插件发现发出来一个index库<br>  <img   src="https://upload-images.jianshu.io/upload_images/8387919-71158619af1b7284.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p>打开<code>http:&#123;host&#125;:5601</code>在kibana中添加nginx日志匹配规则</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-1d884cb3e365a124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br>Management–&gt;index patterns–&gt;create index pattern<br>输入<code>logstash-nginx-*</code> 就是在logstash中配置的索引名称前缀<br>然后配置时间排序字段 <code>@timestamp </code> 这样kibana就可以根据此字段进行时间倒序展示了<br>配置好之后就可以在左侧<code>discover</code>中查看对应的日志索引信息了<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-8ffdf421a45df77c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br>另外可以进行字段筛选显示<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-3cf48c7bed6a0e9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
]]></content>
      <tags>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2019/09/01/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名:版本：拉去镜像</span><br><span class="line">docker rmi 镜像名或id：删除镜像</span><br><span class="line">docker images：获取本地已有镜像</span><br><span class="line"></span><br><span class="line">docker run 镜像名或id：使用默认端口启动镜像</span><br><span class="line">docker run -p port:port1 -d 镜像名或id：指定port端口映射到port1，并后台启动镜像</span><br><span class="line"></span><br><span class="line">进入容器内部 docker exec -it nginx容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">docker ps：查看正在运行的docker容器</span><br><span class="line">docker ps -a：查看所有执行过run命令的容器服务（包括已经停止的容器）</span><br><span class="line"></span><br><span class="line">docker stop 容器id：停止某个容器</span><br><span class="line">docker restart 容器id：重启某个容器</span><br><span class="line">docker rm 容器Id：删除某个容器</span><br></pre></td></tr></table></div></figure>

<span id="more"></span>


<hr>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">service docker start </span><br><span class="line">service docker restart </span><br><span class="line">service docker stop</span><br></pre></td></tr></table></div></figure>
<hr>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Commands:</span><br><span class="line">    attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">    build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">    commit    Create a new image from a container&#x27;s changes # 提交当前容器为新的镜像</span><br><span class="line">    cp        Copy files/folders from the containers filesystem to the host path</span><br><span class="line">              # 从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">    create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">    diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化</span><br><span class="line">    events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">    exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">    export    Stream the contents of a container as a tar archive   </span><br><span class="line">              # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">    history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">    images    List images                                   # 列出系统当前镜像</span><br><span class="line">    import    Create a new filesystem image from the contents of a tarball  </span><br><span class="line">              # 从tar包中的内容创建一个新的文件系统映像[对应 export]</span><br><span class="line">    info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">    inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">    kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">    load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">    login     Register or Login to the docker registry server   </span><br><span class="line">              # 注册或者登陆一个 docker 源服务器</span><br><span class="line">    logout    Log out from a Docker registry server         # 从当前 Docker registry 退出</span><br><span class="line">    logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT</span><br><span class="line">              # 查看映射端口对应的容器内部源端口</span><br><span class="line">    pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">    ps        List containers                               # 列出容器列表</span><br><span class="line">    pull      Pull an image or a repository from the docker registry server</span><br><span class="line">              # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">    push      Push an image or a repository to the docker registry server</span><br><span class="line">              # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">    restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">    rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">    rmi       Remove one or more images                 </span><br><span class="line">              # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">    run       Run a command in a new container</span><br><span class="line">              # 创建一个新的容器并运行一个命令</span><br><span class="line">    save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">    search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">    start     Start a stopped containers                    # 启动容器</span><br><span class="line">    stop      Stop a running containers                     # 停止容器</span><br><span class="line">    tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">    top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">    unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">    version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">    wait      Block until a container stops, then print its exit code   </span><br><span class="line">              # 截取容器停止时的退出状态值</span><br><span class="line">Run &#x27;docker COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></div></figure>



<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 停止docker</span><br><span class="line">docker stop $(docker ps -a | grep &quot;Exited&quot; | awk &#x27;&#123;print $1 &#125;&#x27;)</span><br><span class="line"># 删除docker</span><br><span class="line">docker rm $(docker ps -a | grep &quot;Exited&quot; | awk &#x27;&#123;print $1 &#125;&#x27;)</span><br><span class="line"># 删除images</span><br><span class="line">docker rmi $(docker images | grep &quot;none&quot; | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class="line">或</span><br><span class="line">docker rmi `docker images | grep  &quot;&lt;none&gt;&quot; | awk &#x27;&#123;print $3&#125;&#x27;`</span><br></pre></td></tr></table></div></figure>

]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch7.X实现高亮搜索</title>
    <url>/2022/04/05/ElasticSearch7-X%E5%AE%9E%E7%8E%B0%E9%AB%98%E4%BA%AE%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<blockquote>
<p> 高亮查询是搜索引擎中最基础的也是最重要的一个功能，站内搜索、电商等都可以通过高亮查询来提升用户体验。在<code>ElasticSearch</code>中高亮查询（highlight）是与<code>query</code>平级的查询</p>
</blockquote>
<span id="more"></span>

<ul>
<li>基础语法如下<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">GET /_index/_search </span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;循化县&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot; : &#123;</span><br><span class="line">       &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;_FIELD&quot;:&#123;</span><br><span class="line">           &quot;type&quot;: &quot;unified&quot;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pre_tags&quot;: [&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;],</span><br><span class="line">       &quot;post_tags&quot;: [&quot;&lt;/font&gt;&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
</ul>

        <h4 id="示例"   >
          <a href="#示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#示例" class="headerlink" title="示例"></a>示例</h4>
      <p>在索引库<code>check_station_index</code>中<code>address</code>字段被定义为text类型，也就是说可以分词</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&quot;address&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>
<ul>
<li>高亮查询<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">GET /check_station_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;循化县&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;address&quot;:&#123;</span><br><span class="line">         &quot;type&quot;: &quot;unified&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;pre_tags&quot;: [&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;],</span><br><span class="line">    &quot;post_tags&quot;: [&quot;&lt;/font&gt;&quot;]</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li>查询结果<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;_index&quot; : &quot;check_station_index&quot;,</span><br><span class="line">     &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">     &quot;_id&quot; : &quot;1279939719420968994&quot;,</span><br><span class="line">     &quot;_score&quot; : 8.563546,</span><br><span class="line">     &quot;_source&quot; : &#123;</span><br><span class="line">       &quot;id&quot; : &quot;1279939719420968994&quot;,</span><br><span class="line">       &quot;waterDepartment&quot; : &quot;黄河干流&quot;,</span><br><span class="line">       &quot;riverName&quot; : &quot;黄河&quot;,</span><br><span class="line">       &quot;num&quot; : &quot;40100550&quot;,</span><br><span class="line">       &quot;name&quot; : &quot;循化(二)&quot;,</span><br><span class="line">       &quot;stationType&quot; : &quot;水文&quot;,</span><br><span class="line">       &quot;address&quot; : &quot;青海省循化县积石镇&quot;,</span><br><span class="line">       &quot;longitude&quot; : &quot;102°30′&quot;,</span><br><span class="line">       &quot;latitude&quot; : &quot;35°50′&quot;,</span><br><span class="line">       &quot;buildDate&quot; : &quot;1945.10&quot;,</span><br><span class="line">       &quot;waterNet&quot; : &quot;黄河流域&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     &quot;highlight&quot; : &#123;</span><br><span class="line">       &quot;address&quot; : [</span><br><span class="line">         &quot;青海省&lt;font color=&#x27;red&#x27;&gt;循&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;化&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;县&lt;/font&gt;积石镇&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>
可以看到结果hits中<code>highlight</code>字段中返回了对应的高亮字段结果，并添加了指定的前缀和后缀，这里定义了红色字体样式，这样在前端展示的时候可以自动呈现为红色的</li>
</ul>

        <h4 id="通过Java-HighLevel-Api进行查询"   >
          <a href="#通过Java-HighLevel-Api进行查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过Java-HighLevel-Api进行查询" class="headerlink" title="通过Java HighLevel Api进行查询"></a>通过<code>Java HighLevel Api</code>进行查询</h4>
      <ul>
<li><ol>
<li>在<code>Service</code>中编写address高亮查询<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public List&lt;Map&lt;String, Object&gt;&gt; highlighted(String address) throws IOException &#123;</span><br><span class="line">        //定义索引库  </span><br><span class="line">        SearchRequest searchRequest = new SearchRequest(&quot;check_station_index&quot;);</span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();</span><br><span class="line">        //定义query查询</span><br><span class="line">        QueryBuilder queryBuilder = QueryBuilders.matchQuery(&quot;address&quot;, address);</span><br><span class="line">        //定义高亮查询</span><br><span class="line">        HighlightBuilder highlightBuilder = new HighlightBuilder();</span><br><span class="line">        //设置需要高亮的字段</span><br><span class="line">        highlightBuilder.field(&quot;address&quot;)</span><br><span class="line">                // 设置前缀、后缀</span><br><span class="line">                .preTags(&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;)</span><br><span class="line">                .postTags(&quot;&lt;/font&gt;&quot;);</span><br><span class="line">        searchSourceBuilder.query(queryBuilder);</span><br><span class="line">        searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = Lists.newArrayList();</span><br><span class="line">        //遍历高亮结果</span><br><span class="line">        for (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">            HighlightField nameHighlight = highlightFields.get(&quot;address&quot;);</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line"></span><br><span class="line">            if (nameHighlight != null) &#123;</span><br><span class="line">                Text[] fragments = nameHighlight.getFragments();</span><br><span class="line">                String _address = &quot;&quot;;</span><br><span class="line">                for (Text text : fragments) &#123;</span><br><span class="line">                    _address += text;</span><br><span class="line">                &#125;</span><br><span class="line">                sourceAsMap.put(&quot;address&quot;, _address);</span><br><span class="line">                list.add(sourceAsMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;[图片上传中...(thumb.jpg-eeb740-1595602689859-0)]</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li>
</ol>
</li>
<li>编写测试类<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2021-07-24 22:09</span><br><span class="line"> */</span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class HighLightTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private WeatherEsService weatherEsService;</span><br><span class="line"></span><br><span class="line">     @Test</span><br><span class="line">     public void highlight() throws IOException &#123;</span><br><span class="line">         List&lt;Map&lt;String, Object&gt;&gt; highlighted = weatherEsService.highlighted(&quot;循化县&quot;);</span><br><span class="line">         highlighted.forEach(System.out::println);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li>运行结果<figure class="highlight json"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>address=青海省&lt;font color=&#x27;red&#x27;&gt;循&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;化&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;县&lt;/font&gt;积石镇<span class="punctuation">,</span> stationType=水文<span class="punctuation">,</span> num=<span class="number">40100550</span><span class="punctuation">,</span> latitude=<span class="number">35</span>°<span class="number">50</span>′<span class="punctuation">,</span> name=循化(二)<span class="punctuation">,</span> waterNet=黄河流域<span class="punctuation">,</span> id=<span class="number">1279939719420968994</span><span class="punctuation">,</span> buildDate=<span class="number">1945.10</span><span class="punctuation">,</span> waterDepartment=黄河干流<span class="punctuation">,</span> riverName=黄河<span class="punctuation">,</span> longitude=<span class="number">102</span>°<span class="number">30</span>′<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>address=青海省&lt;font color=&#x27;red&#x27;&gt;循&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;化&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;县&lt;/font&gt;梁什滩<span class="punctuation">,</span> stationType=水文<span class="punctuation">,</span> num=<span class="number">40203200</span><span class="punctuation">,</span> latitude=<span class="number">35</span>°<span class="number">48</span>′<span class="punctuation">,</span> name=文都(三)<span class="punctuation">,</span> waterNet=黄河流域<span class="punctuation">,</span> id=<span class="number">1279939720733786132</span><span class="punctuation">,</span> buildDate=<span class="number">1960.04</span><span class="punctuation">,</span> waterDepartment=黄河上游区上段<span class="punctuation">,</span> riverName=街子河<span class="punctuation">,</span> longitude=<span class="number">102</span>°<span class="number">24</span>′<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span>address=青海省&lt;font color=&#x27;red&#x27;&gt;循&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;化&lt;/font&gt;&lt;font color=&#x27;red&#x27;&gt;县&lt;/font&gt;道帏乡古雷村<span class="punctuation">,</span> stationType=雨量<span class="punctuation">,</span> num=<span class="number">40228300</span><span class="punctuation">,</span> latitude=<span class="number">35</span>°<span class="number">39</span>′<span class="punctuation">,</span> name=道帏<span class="punctuation">,</span> waterNet=黄河流域<span class="punctuation">,</span> id=<span class="number">1279939719420968981</span><span class="punctuation">,</span> buildDate=<span class="number">1985.01</span><span class="punctuation">,</span> waterDepartment=黄河上游区上段<span class="punctuation">,</span> riverName=清水<span class="punctuation">,</span> longitude=<span class="number">102</span>°<span class="number">39</span>′<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure></li>
</ul>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/uPic/1240-20220407213148279.png"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/uPic/1240-20220407213154081.png"></p>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch数据读写流程</title>
    <url>/2022/04/05/ElasticSearch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[
        <h3 id="ElasticSearch数据处理流程—-面试必问"   >
          <a href="#ElasticSearch数据处理流程—-面试必问" class="heading-link"><i class="fas fa-link"></i></a><a href="#ElasticSearch数据处理流程—-面试必问" class="headerlink" title="ElasticSearch数据处理流程—-面试必问"></a>ElasticSearch数据处理流程—-面试必问</h3>
      
        <h5 id="文档路由的过程"   >
          <a href="#文档路由的过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#文档路由的过程" class="headerlink" title="文档路由的过程"></a>文档路由的过程</h5>
      <span id="more"></span>

<p>es通过如下公式进行文档的路由</p>
<p><code>shard = hash(routing) % number_of_primary_shards</code></p>
<ul>
<li>hash算法保证将文档均匀的分散到分片中</li>
<li>routing默认是文档id，也可以自行制定</li>
<li>number_of_primary_shards 主分片数</li>
</ul>

        <h5 id="ElasticSearch写入数据"   >
          <a href="#ElasticSearch写入数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#ElasticSearch写入数据" class="headerlink" title="ElasticSearch写入数据"></a>ElasticSearch写入数据</h5>
      <ol>
<li><p>客户端选择一个Node发送请求过去，这个node就成为coordinating node(协调节点)</p>
</li>
<li><p>coordinating node对 document进行路由，将请求转发到对应的node(有primary shard)</p>
</li>
<li><p>实际的node上的primary shard处理请求，然后将数据同步到replica node</p>
</li>
<li><p>coordinating node 发现 pimary node 和 replica node都处理完毕后，就返回响应结果给客户端</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-a252bc4550ca924e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
</ol>

        <h5 id="ElasticSearch读取数据"   >
          <a href="#ElasticSearch读取数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#ElasticSearch读取数据" class="headerlink" title="ElasticSearch读取数据"></a>ElasticSearch读取数据</h5>
      <p>根据文档id进行路由到对应的节点机器上（相当于请求转发）</p>
<ul>
<li>客户端发送请求到<strong>任意</strong>一个 node，成为 <code>coordinate node</code>。</li>
<li><code>coordinate node</code> 对 <code>doc id</code> 进行路由，将请求转发到对应的 node，实际集群中可能该数据对应的shard有多个（主、备），根据负载轮询策略在对应的shard上进行数据的读取。</li>
<li>接收请求的 node 返回 document 给 <code>coordinate node</code>。</li>
<li><code>coordinate node</code> 返回 document 给客户端。</li>
</ul>

        <h5 id="文档批量创建的流程"   >
          <a href="#文档批量创建的流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#文档批量创建的流程" class="headerlink" title="文档批量创建的流程"></a>文档批量创建的流程</h5>
      <ol>
<li>客户端选择一个Node发送bulk请求，此节点为coordinate node</li>
<li>coordinate node通过routing算法找到所有对应的shard，然后同时将对用的请求转发至主shard</li>
<li>其余过程与单个写入基本一直</li>
</ol>

        <h5 id="match-query流程"   >
          <a href="#match-query流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#match-query流程" class="headerlink" title="match query流程"></a>match query流程</h5>
      <p><img   src="https://upload-images.jianshu.io/upload_images/8387919-e4b0b0fd12fa972d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h5 id="索引数据过程"   >
          <a href="#索引数据过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#索引数据过程" class="headerlink" title="索引数据过程"></a>索引数据过程</h5>
      <blockquote>
<p>两个阶段 query和fetch</p>
</blockquote>
<ul>
<li><p>客户端连接到 任一节点（<code>coordinate node</code>）。</p>
</li>
<li><p>协调节点将搜索请求转发到<strong>所有</strong>的 shard 对应的 <code>primary shard</code> 或 <code>replica shard</code>，都可以。</p>
</li>
<li><p>query phase：每个 shard 将自己的搜索结果（其实就是一些 <code>doc id</code>）返回给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果。</p>
</li>
<li><p>fetch phase：接着由协调节点根据 <code>doc id</code> 去各个节点上<strong>拉取实际</strong>的 <code>document</code> 数据，最终返回给客户端。</p>
</li>
</ul>

        <h5 id="删除更新文档流程"   >
          <a href="#删除更新文档流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除更新文档流程" class="headerlink" title="删除更新文档流程"></a>删除更新文档流程</h5>
      <p>​    segment一旦生成就不能更改，Lucene专门维护了一个<code>.del</code> 文件，内部内陆着所有已经删除的文档，如果是删除操作，就将里面将某个 doc 标识为 <code>deleted</code> 状态，那么搜索的时候根据 <code>.del</code> 文件就知道这个 doc 是否被删除了。将已经删除的文档过滤掉。</p>
<p>如果是更新操作，就是将原来的 doc 标识为 <code>deleted</code> 状态，然后新写入一条数据。</p>

        <h5 id="文档refresh流程"   >
          <a href="#文档refresh流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#文档refresh流程" class="headerlink" title="文档refresh流程"></a>文档refresh流程</h5>
      <p>segment写入磁盘的过程十分耗时，可以借助文件系统缓存的特性，先将segment在缓存中创建，并开放查询来确保近实时性，该过程称为refresh。在refresh之前文档先会存储在一个buffer中，refresh时会将文档中的buffer清空，并生成segment，es默认每一秒进行一次refresh，因此文档的实时性为1秒，这也是es近实时性的原因。</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-a66f2d47af271fc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h5 id="文档translog流程"   >
          <a href="#文档translog流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#文档translog流程" class="headerlink" title="文档translog流程"></a>文档translog流程</h5>
      <p>如果内存中的segment还没还得及写入磁盘中，服务器宕机了，那么其中的文档就无法恢复了，为了解决这个问题，es引入了reanslog机制，当写入文档到buffer时，同时将该操作写入translog，而translog文件会即时写入磁盘中（fsync），es重启后会通过translog文件进行数据恢复</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-27dd2536d27703a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h5 id="文档flush流程"   >
          <a href="#文档flush流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#文档flush流程" class="headerlink" title="文档flush流程"></a>文档flush流程</h5>
      <p>flush负责将内存中的segment写入磁盘，并将index buffer清空，更新commit point并写入磁盘，同时删除旧的translog文件</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-d9caffeea8e70466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h4 id="Segment-merging流程"   >
          <a href="#Segment-merging流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Segment-merging流程" class="headerlink" title="Segment merging流程"></a>Segment merging流程</h4>
      <p>由于每次进行一次refresh，这样下来 <code>segment file</code> 会越来越多，此时会定期执行 merge。每次 merge 的时候，会将多个 <code>segment file</code> 合并成一个，同时这里会将标识为 <code>deleted</code> 的 doc 给<strong>物理删除掉</strong>，然后将新的 <code>segment file</code> 写入磁盘，这里会写一个 <code>commit point</code>，标识所有新的 <code>segment file</code>，然后打开 <code>segment file</code> 供搜索使用，同时删除旧的 <code>segment file</code>。</p>

        <h4 id="思考："   >
          <a href="#思考：" class="heading-link"><i class="fas fa-link"></i></a><a href="#思考：" class="headerlink" title="思考："></a>思考：</h4>
      <ol>
<li><p>为什么es删除更新的时候不直接删除，而是通过.del文件进行删除</p>
<p>因为es的倒排索引是不可变的，一旦生成倒排索引就不会再变，这也是es高性能的原因之一</p>
</li>
<li><p>倒排索引不可变的优缺点</p>
<p><strong>优点：</strong></p>
<ul>
<li>不用考虑并发写文件的问题，杜绝锁机制带来的性能消耗</li>
<li>由于文件不可更改，可以充分利用文件系统缓存，只需要载入缓存一次，只要内存足够，就会命中缓存，性能高</li>
<li>有利于对文件进行压缩存储，节省磁盘和内存空间</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>写入新文档时，必须重新构建索引然后替换老的索引文件，新文档才能被检索，导致文档实时性差。</li>
</ul>
</li>
</ol>
<p><strong>声明：</strong>文中内容为自学慕课网笔记，部分图片为课程中资料截图，仅供学习记录使用。</p>
<p>参考：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/lsgqjh/article/details/83022206" >Elasticsearch 之 commit point | Segment | refresh | flush 索引分片内部原理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Filebeat实现ELK日志收集</title>
    <url>/2022/05/08/Filebeat%E5%AE%9E%E7%8E%B0ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[
        <h3 id="下载"   >
          <a href="#下载" class="heading-link"><i class="fas fa-link"></i></a><a href="#下载" class="headerlink" title="下载"></a>下载</h3>
      <ul>
<li>JDK1.8官方下载链接：<span class="exturl"><a class="exturl__link"   href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" >https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>Elasticsearch7.3 官方下载链接：<span class="exturl"><a class="exturl__link"   href="https://www.elastic.co/cn/downloads/" >https://www.elastic.co/cn/downloads/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>Kibana7.3官方下载链接：<span class="exturl"><a class="exturl__link"   href="https://www.elastic.co/cn/downloads/" >https://www.elastic.co/cn/downloads/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<span id="more"></span>

        <h3 id="解压"   >
          <a href="#解压" class="heading-link"><i class="fas fa-link"></i></a><a href="#解压" class="headerlink" title="解压"></a>解压</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz </span><br><span class="line">tar -zxvf elasticsearch-7.3.1-linux-x86_64.tar.gz </span><br><span class="line">tar -zxvf kibana-7.3.1-linux-x86_64.tar.gz </span><br></pre></td></tr></table></div></figure>


        <h3 id="配置环境变量"   >
          <a href="#配置环境变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/usr/java</span><br><span class="line">JRE_HOME=/usr/java/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></div></figure>


        <h3 id="配置ElasticSearch"   >
          <a href="#配置ElasticSearch" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置ElasticSearch" class="headerlink" title="配置ElasticSearch"></a>配置ElasticSearch</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">vim /usr/elasticsearch/config/elasticsearch.yml </span><br><span class="line"></span><br><span class="line">cluster.name: exam-application</span><br><span class="line">node.name: node01</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 8020</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">http.cors.allow-headers: Authorization</span><br><span class="line">xpack.security.enabled: true</span><br><span class="line"></span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



        <h3 id="设置ES参数"   >
          <a href="#设置ES参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置ES参数" class="headerlink" title="设置ES参数"></a>设置ES参数</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">vim /usr/elasticsearch/config/jvm.options</span><br><span class="line">默认初始、最大堆内存为1G 根据需求更改</span><br></pre></td></tr></table></div></figure>


        <h3 id="添加es启动用户"   >
          <a href="#添加es启动用户" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加es启动用户" class="headerlink" title="添加es启动用户"></a>添加es启动用户</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">useradd  esuser</span><br><span class="line"></span><br><span class="line">修改密码</span><br><span class="line">passwd esuser</span><br><span class="line"></span><br><span class="line">chown -R estest /usr/elasticsearch/</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="修改系统参数"   >
          <a href="#修改系统参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改系统参数" class="headerlink" title="修改系统参数"></a>修改系统参数</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=655360</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">*               soft    nofile          65536</span><br><span class="line">*               hard    nofile          65536</span><br><span class="line">*               soft    nproc           4096</span><br><span class="line">*               hard    nproc           4096</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



        <h3 id="启动es"   >
          <a href="#启动es" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动es" class="headerlink" title="启动es"></a>启动es</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">su  esuser</span><br><span class="line">./bin/elasticsearch -d</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="配置密码"   >
          <a href="#配置密码" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置密码" class="headerlink" title="配置密码"></a>配置密码</h3>
      <p>启动es后 执行<code>elasticsearch-setup-passwords interactive</code>进行密码设置</p>

        <h3 id="访问测试"   >
          <a href="#访问测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ip:8020</span><br></pre></td></tr></table></div></figure>


        <h3 id="安装ik分词器"   >
          <a href="#安装ik分词器" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.7.1/elasticsearch-analysis-ik-7.7.1.zip</span><br></pre></td></tr></table></div></figure>


        <h3 id="测试ik"   >
          <a href="#测试ik" class="heading-link"><i class="fas fa-link"></i></a><a href="#测试ik" class="headerlink" title="测试ik"></a>测试ik</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">curl --location --request POST &#x27;http://127.0.0.1:8020/_analyze/?pretty&#x27; \</span><br><span class="line">--header &#x27;Content-Type: application/json&#x27; \</span><br><span class="line">--data-raw &#x27;&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;这是一个搜索引擎&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></div></figure>


        <h3 id="安装Kibana"   >
          <a href="#安装Kibana" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">chown -R estest /usr/kibana/</span><br><span class="line">chmod -R  777  /usr/kibana/</span><br><span class="line">vim /usr/kibana/config/kibana.yml</span><br><span class="line"></span><br><span class="line">elasticsearch.hosts: [&quot;http://localhost:8020&quot;]</span><br><span class="line">elasticsearch.username: &quot;elastic&quot;</span><br><span class="line">elasticsearch.password: &quot;elastic&quot;</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">server.port: 8019</span><br><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="启动Kibana"   >
          <a href="#启动Kibana" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动Kibana" class="headerlink" title="启动Kibana"></a>启动Kibana</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">su esuser</span><br><span class="line">./bin/kibana</span><br></pre></td></tr></table></div></figure>


        <h3 id="访问测试-1"   >
          <a href="#访问测试-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ip:8019</span><br></pre></td></tr></table></div></figure>



        <h3 id="安装FileBate"   >
          <a href="#安装FileBate" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装FileBate" class="headerlink" title="安装FileBate"></a>安装FileBate</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.7.1-linux-x86_64.tar.gz</span><br><span class="line">tar xzvf filebeat-7.7.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></div></figure>


        <h3 id="配置"   >
          <a href="#配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置" class="headerlink" title="配置"></a>配置</h3>
      <blockquote>
<p>直接发送json日志到ES</p>
</blockquote>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">vim filebeat.yml</span><br><span class="line"></span><br><span class="line">json.keys_under_root: true</span><br><span class="line">json.add_error_key: true</span><br><span class="line">json.overwrite_keys: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /data/soft/app/log/*.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;localhost:8020&quot;]</span><br><span class="line">  index: &quot;app_log_%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;elastic&quot;</span><br><span class="line">  protocol: &quot;http&quot;</span><br><span class="line">setup.template.enabled: false</span><br><span class="line">setup.template.name: &quot;app&quot;</span><br><span class="line">setup.template.pattern: &quot;app-*&quot;</span><br><span class="line">setup.ilm.enabled: false #一定要配，否则不起作用</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



        <h3 id="运行"   >
          <a href="#运行" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行" class="headerlink" title="运行"></a>运行</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nohup ./filebeat -c filebeat.yml -e  &amp;</span><br></pre></td></tr></table></div></figure>


        <h3 id="访问测试-2"   >
          <a href="#访问测试-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#访问测试-2" class="headerlink" title="访问测试"></a>访问测试</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">http://hw03.p2m.org.cn:8019/</span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter常用命令</title>
    <url>/2022/03/29/Flutter%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[
        <h3 id="1-帮助命令"   >
          <a href="#1-帮助命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-帮助命令" class="headerlink" title="# 1. 帮助命令"></a># 1. 帮助命令</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></div></figure>

<span id="more"></span>


        <h3 id="2-显示本级模拟器"   >
          <a href="#2-显示本级模拟器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-显示本级模拟器" class="headerlink" title="2. 显示本级模拟器"></a>2. 显示本级模拟器</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">flutter emulators</span><br></pre></td></tr></table></div></figure>


        <h3 id="3-启动本地模拟器"   >
          <a href="#3-启动本地模拟器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-启动本地模拟器" class="headerlink" title="3. 启动本地模拟器"></a>3. 启动本地模拟器</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">flutter emulator --launch apple_ios_simulator</span><br></pre></td></tr></table></div></figure>

        <h3 id="4-远程更新package"   >
          <a href="#4-远程更新package" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-远程更新package" class="headerlink" title="4. 远程更新package"></a>4. 远程更新package</h3>
      <p>pubspec.yaml会依赖一些远程库，这边相当于将远程的依赖下载到本地。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></div></figure>

        <h3 id="5-运行应用到模拟器上"   >
          <a href="#5-运行应用到模拟器上" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-运行应用到模拟器上" class="headerlink" title="5. 运行应用到模拟器上"></a>5. 运行应用到模拟器上</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></div></figure>

<p>执行后应用将安装到模拟器中，并打开</p>

        <h3 id="6-热重载"   >
          <a href="#6-热重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-热重载" class="headerlink" title="6. 热重载"></a>6. 热重载</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">先保存代码commad+s</span><br><span class="line">然后在 terminal中输入r</span><br><span class="line">执行后界面内容更新</span><br></pre></td></tr></table></div></figure>



        <h3 id="7-停止运行"   >
          <a href="#7-停止运行" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-停止运行" class="headerlink" title="7. 停止运行"></a>7. 停止运行</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">control+z</span><br></pre></td></tr></table></div></figure>

]]></content>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter集成百度地图</title>
    <url>/2022/03/29/Flutter%E9%9B%86%E6%88%90%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[
        <h3 id="1-引入依赖"   >
          <a href="#1-引入依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">flutter_bmfmap: ^1.0.2</span><br><span class="line">flutter_bmfutils: ^1.0.2</span><br></pre></td></tr></table></div></figure>

<span id="more"></span>


        <h3 id="获取秘钥"   >
          <a href="#获取秘钥" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取秘钥" class="headerlink" title="获取秘钥"></a>获取秘钥</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://lbsyun.baidu.com/index.php?title=androidsdk/guide/create-project/ak" >安卓获取参考文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="配置"   >
          <a href="#配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置" class="headerlink" title="配置"></a>配置</h3>
      <p>在安卓目录<code>AndroidManifest.xml</code>文件中，配置权限与上一步获取的AK</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot;&gt;&lt;/uses-permission&gt;</span><br><span class="line">    &lt;!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位 --&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</span><br><span class="line">    &lt;!-- 获取网络状态，根据网络状态切换进行数据请求网络转换 --&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</span><br><span class="line">    &lt;!-- 访问网络，进行地图相关业务数据请求，包括地图数据，路线规划，POI检索等 --&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br></pre></td></tr></table></div></figure>


<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">            android:name=&quot;com.baidu.lbsapi.API_KEY&quot;</span><br><span class="line">            android:value=&quot;VGtYqXAMquUFPbx0fk1oZhviGlQTMYcI&quot; /&gt;</span><br></pre></td></tr></table></div></figure>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-8da2d9bf41b2d994.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h3 id="创建地图容器"   >
          <a href="#创建地图容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建地图容器" class="headerlink" title="创建地图容器"></a>创建地图容器</h3>
      <ul>
<li><p>新建一个自定义的Application，继承BmfMapApplication类重写onCreate方法，在onCreate方法中执行父类的super.onCreate()， 完成SDK的初始化</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class MyApplication extends BmfMapApplication &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>在<code>AndroidManifest.xml</code>文件中声明该<code>Application</code>:<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-c88ca4a3f7729e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>在<code>main.dart</code>中配置ios环境下的百度AK</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  // 百度地图sdk初始化鉴权</span><br><span class="line">  if (Platform.isIOS) &#123;</span><br><span class="line">    BMFMapSDK.setApiKeyAndCoordType(</span><br><span class="line">        &#x27;VGtYqXAMquUFPbx0fk1oZhviGlQTMYcI&#x27;, BMF_COORD_TYPE.BD09LL);</span><br><span class="line">  &#125; else if (Platform.isAndroid) &#123;</span><br><span class="line">    // Android 目前不支持接口设置Apikey,</span><br><span class="line">    // 请在主工程的Manifest文件里设置，详细配置方法请参考官网(https://lbsyun.baidu.com/)demo</span><br><span class="line">    BMFMapSDK.setCoordType(BMF_COORD_TYPE.BD09LL);</span><br><span class="line">  &#125;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>创建<code>basic_map.dart</code>地图容器组件</p>
</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">import &#x27;package:flutter/material.dart&#x27;;</span><br><span class="line">import &#x27;package:flutter_bmfmap/BaiduMap/bmfmap_map.dart&#x27;;</span><br><span class="line">import &#x27;package:flutter_bmfbase/BaiduMap/bmfmap_base.dart&#x27;;</span><br><span class="line"></span><br><span class="line">class BasicMap extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _BasicMapState createState() =&gt; _BasicMapState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _BasicMapState extends State&lt;BasicMap&gt; &#123;</span><br><span class="line">  Size screenSize;</span><br><span class="line">  BMFMapOptions mapOptions;</span><br><span class="line">  BMFMapController myMapController;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    super.initState();</span><br><span class="line">    mapOptions = BMFMapOptions(</span><br><span class="line">        center: BMFCoordinate(34.263161, 108.948024),</span><br><span class="line">        zoomLevel: 12,</span><br><span class="line">        mapPadding: BMFEdgeInsets(left: 30, top: 0, right: 30, bottom: 0));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /// 创建完成回调</span><br><span class="line">  void onBMFMapCreated(BMFMapController controller) &#123;</span><br><span class="line">    myMapController = controller;</span><br><span class="line"></span><br><span class="line">    /// 地图加载回调</span><br><span class="line">    myMapController?.setMapDidLoadCallback(callback: () &#123;</span><br><span class="line">      print(&#x27;mapDidLoad-地图加载完成&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    screenSize = MediaQuery.of(context).size;</span><br><span class="line">    return Container(</span><br><span class="line">      height: screenSize.height,</span><br><span class="line">      width: screenSize.width,</span><br><span class="line">      child: BMFMapWidget(</span><br><span class="line">        onBMFMapCreated: (controller) &#123;</span><br><span class="line">          onBMFMapCreated(controller);</span><br><span class="line">        &#125;,</span><br><span class="line">        mapOptions: mapOptions,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<ul>
<li>引入自定义创建的地图容器组件</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: false,</span><br><span class="line">      title: &#x27;Flutter Demo&#x27;,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">        visualDensity: VisualDensity.adaptivePlatformDensity,</span><br><span class="line">      ),</span><br><span class="line">      home: BasicMap(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="运行测试"   >
          <a href="#运行测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3>
      <p><img   src="https://upload-images.jianshu.io/upload_images/8387919-3a70c1c8d777712b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h3 id="参考文档"   >
          <a href="#参考文档" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3>
      <ol>
<li><span class="exturl"><a class="exturl__link"   href="http://lbsyun.baidu.com/index.php?title=flutter/loc" >百度地图官网Flutter插件文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><a href="(http://lbsyun.baidu.com/index.php?title=flutter/loc/download)">示例demo下载</a></li>
</ol>
]]></content>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Harbor私有镜像仓库搭建</title>
    <url>/2022/03/29/Harbor%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>Harbor是VMware公司最近开源的企业级Docker Registry项目, 其目标是帮助用户迅速搭建一个企业级的Docker registry服务。</p>
</blockquote>
<span id="more"></span>


        <h3 id="前置条件"   >
          <a href="#前置条件" class="heading-link"><i class="fas fa-link"></i></a><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3>
      <ul>
<li>Linux host: docker 17.06.0-ce+ and docker-compose 1.18.0+ .<blockquote>
<p>docker和docker-compse的安装自行百度，注意版本</p>
</blockquote>
</li>
<li>下载离线安装包 <span class="exturl"><a class="exturl__link"   href="https://github.com/vmware/harbor/releases" >Harbor release</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </li>
</ul>

        <h3 id="下载并解压"   >
          <a href="#下载并解压" class="heading-link"><i class="fas fa-link"></i></a><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.0.0/harbor-offline-installer-v2.0.0.tgz</span><br><span class="line">github网速贼慢，耐心等待。。。</span><br><span class="line">tar -zxvf harbor-offline-installer-v1.8.1.tgz -C /opt/app</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="配置"   >
          <a href="#配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置" class="headerlink" title="配置"></a>配置</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">cd /opt/app/harbor</span><br><span class="line">./prepare</span><br><span class="line">发现生成了docker-compose.yml文件</span><br><span class="line">vim vim harbor.yml</span><br><span class="line">修改一下内容：</span><br><span class="line"></span><br><span class="line">hostname: harbor.***.com</span><br><span class="line"># http related config</span><br><span class="line">http:</span><br><span class="line"> port: 9292</span><br><span class="line"> </span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line">database:</span><br><span class="line">    password: root123</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>更多配置参考官方文档:  <span class="exturl"><a class="exturl__link"   href="https://github.com/goharbor/harbor/blob/master/docs/install-config/configure-yml-file.md" >configure-yml-file</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="安装"   >
          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装" class="headerlink" title="安装"></a>安装</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line">查看docker-compose安装的docker镜像</span><br><span class="line">root@huaheng:/opt/app/harbor# docker-compose ps | grep harbor</span><br><span class="line">harbor-core         /harbor/start.sh                 Up                               </span><br><span class="line">harbor-db           /entrypoint.sh postgres          Up      5432/tcp                 </span><br><span class="line">harbor-jobservice   /harbor/start.sh                 Up                               </span><br><span class="line">harbor-log          /bin/sh -c /usr/local/bin/ ...   Up      127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up      80/tcp                   </span><br><span class="line">registryctl         /harbor/start.sh    </span><br></pre></td></tr></table></div></figure>

        <h3 id="访问"   >
          <a href="#访问" class="heading-link"><i class="fas fa-link"></i></a><a href="#访问" class="headerlink" title="访问"></a>访问</h3>
      <p>输入域名访问 <span class="exturl"><a class="exturl__link"   href="http://harbor.test.com/" >http://harbor.test.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-f8aa4582647979b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style=""  alt="image.png"></p>
<p>默认账号密码:  <code>admin / Harbor12345</code></p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-625419b8a2765d4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h3 id="创建项目-mcgrady"   >
          <a href="#创建项目-mcgrady" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建项目-mcgrady" class="headerlink" title="创建项目 mcgrady"></a>创建项目 <code>mcgrady</code></h3>
      <p><img   src="https://upload-images.jianshu.io/upload_images/8387919-0afda88f13829205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br>这里不勾选公开，默认为私有项目</p>

        <h3 id="登录到docker私服"   >
          <a href="#登录到docker私服" class="heading-link"><i class="fas fa-link"></i></a><a href="#登录到docker私服" class="headerlink" title="登录到docker私服"></a>登录到docker私服</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker login harbor.test.com</span><br><span class="line">输入用户名密码后，出现以下错误</span><br><span class="line">Error response from daemon: Get https://harbor.huahengmxf.com:9200/v2/: http: server gave HTTP response to HTTPS client</span><br><span class="line"></span><br><span class="line">是因为没有配置私服的地址</span><br><span class="line"></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://n0st2wzy.mirror.aliyuncs.com&quot;],</span><br><span class="line">   &quot;insecure-registries&quot;:[&quot;harbor.test.com:9292&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@hadoop01 ~]#  docker login harbor.huahengmxf.com</span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>出现 sucess表示登录成功</p>

        <h3 id="推送镜像到Harbor仓库"   >
          <a href="#推送镜像到Harbor仓库" class="heading-link"><i class="fas fa-link"></i></a><a href="#推送镜像到Harbor仓库" class="headerlink" title="推送镜像到Harbor仓库"></a>推送镜像到<code>Harbor</code>仓库</h3>
      <p>这里找一个本地已有的<code>mysql</code>镜像作为测试进行推送<br>看到新建的项目<code>mcgrady</code>中描述，推送镜像分为两步：<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-a8b3e675d64efcbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<ol>
<li>tag</li>
</ol>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br><span class="line">docker tag mysql:5.7.22  harbor.test.com:9292/mcgrady/mysql:5.7.22</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<ol start="2">
<li>push</li>
</ol>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 ~]# docker push harbor.test.com:9292/mcgrady/mysql:5.7.22</span><br><span class="line">The push refers to repository [harbor.test.com:9292/mcgrady/mysql]</span><br><span class="line">a968f24d4187: Pushed </span><br><span class="line">f8cb294d5d80: Pushed </span><br><span class="line">489bddb9c55e: Pushed </span><br><span class="line">22b402e93939: Pushed </span><br><span class="line">8aeebb3964c1: Pushed </span><br><span class="line">94f8d8f5acbf: Pushed </span><br><span class="line">c0c26734fb83: Pushed </span><br><span class="line">4801a487d51a: Pushed </span><br><span class="line">aae63f31dee9: Pushed </span><br><span class="line">6f8d38b0e2b6: Pushed </span><br><span class="line">cdb3f9544e4c: Pushed </span><br><span class="line">5.7.22: digest: sha256:e744510d4d03fddd1162651312afd1e591cf33b051c6f29ed64b9a3e64b97aa7 size: 2621</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-2b67f3eaa99901e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p>刷新<code>harbor</code>管控台可以看到刚刚推送的镜像<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-0a82b3d59f834a5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p>客户端重新拉取新推送的镜像</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 ~]# docker pull harbor.test.com:9292/mcgrady/mysql:5.7.22</span><br><span class="line">5.7.22: Pulling from mcgrady/mysql</span><br><span class="line">be8881be8156: Pull complete </span><br><span class="line">c3995dabd1d7: Pull complete </span><br><span class="line">9931fdda3586: Pull complete </span><br><span class="line">bb1b6b6eff6a: Pull complete </span><br><span class="line">a65f125fa718: Pull complete </span><br><span class="line">2d9f8dd09be2: Pull complete </span><br><span class="line">37b912cb2afe: Pull complete </span><br><span class="line">79592d21cb7f: Pull complete </span><br><span class="line">00bfe968d82d: Pull complete </span><br><span class="line">79cf546d4770: Pull complete </span><br><span class="line">2b3c2e6bacee: Pull complete </span><br><span class="line">Digest: sha256:e744510d4d03fddd1162651312afd1e591cf33b051c6f29ed64b9a3e64b97aa7</span><br><span class="line">Status: Downloaded newer image for harbor.test.com:9292/mcgrady/mysql:5.7.22</span><br><span class="line">[root@hadoop01 ~]# docker images | grep mysql</span><br><span class="line">harbor.huahengmxf.com:9292/mcgrady/mysql   5.7.22              6bb891430fb6        22 months ago       372MB</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-bef4b8936ea49bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p>参考文档：</p>
<ul>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/goharbor/harbor" >https://github.com/goharbor/harbor</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码学习笔记</title>
    <url>/2018/06/13/HashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>Java中HashMap源码学习笔记。1.8 / 1.7 中设计思路比较</p>
</blockquote>
<span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;key&quot;, &quot;value&quot;);</span><br><span class="line">        String v = map.get(&quot;key&quot;);</span><br><span class="line">        System.out.println(v);</span><br></pre></td></tr></table></div></figure>


        <h3 id="jdk1-7"   >
          <a href="#jdk1-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#jdk1-7" class="headerlink" title="jdk1.7"></a>jdk1.7</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // 初始桶容量</span><br><span class="line">static final float DEFAULT_LOAD_FACTOR = 0.75f; //负载因子</span><br></pre></td></tr></table></div></figure>
<ul>
<li><p>1.确定数组下标</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">int hashCode = hash(key)</span><br><span class="line">int index = hashCode % table.length</span><br></pre></td></tr></table></div></figure></li>
<li><p>2.put hash冲突</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">对于每一个新的元素，首先放到链表头部块 (效率最快)</span><br><span class="line">    --&gt; 导致由于是单向链表所以上面的节点找不到</span><br><span class="line">    --&gt;解决办法 讲新的链表赋值给head头部(相当于整个链表下移)</span><br></pre></td></tr></table></div></figure></li>
<li><p>3.优化<br><code>对于2的整次幂的任意数X  ---&gt; hashCode % X == hashCode &amp; (X -1)</code></p>
</li>
<li><p>4.扩容</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">扩容后的节点复制操作</span><br><span class="line">    void transfer(Map.Entry[] newTable, boolean rehash) &#123;</span><br><span class="line">        int newCapacity = newTable.length;</span><br><span class="line">        for (Map.Entry&lt;k, v&gt; e : table) &#123;</span><br><span class="line">            while (null != e) &#123;</span><br><span class="line">                Map.Entry&lt;k, v&gt; next = e.next();</span><br><span class="line">                //计算扩容后的下标</span><br><span class="line">                int i = indexFor(e.hash, newCapacity);</span><br><span class="line">                //将整个e节点指向扩容后新的数组对应链表头节点</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                //将新的链表下移</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                //e重新指向原始链表的下一个节点(准备进行下一次移动操作)</span><br><span class="line">                e = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li>
<li><p>扩容的问题</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">1.扩容后新链表的元素与之前链表元素位置颠倒</span><br><span class="line">2.多线程下扩容的并发死锁问题  是因为线程共享链表 并且扩容后链表倒置</span><br><span class="line">如何避免 </span><br><span class="line">- 1.使用CurrentHashMap </span><br><span class="line">- 2.new HashMap(15,1) 指定已知容量和负载因子</span><br></pre></td></tr></table></div></figure></li>
<li><p>问题思考</p>
</li>
</ul>
<ol>
<li>为什么要找一个2的整次幂的数作为桶的容量<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">为了计算下标效率更高 位运算效率更高</span><br></pre></td></tr></table></div></figure></li>
<li>计算hashCode时为什么要进行右移以及异或操作<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">例如：由于上面的思路中2的整次幂数-1 高位全部为0 低位全部为1</span><br><span class="line">      15: 0000 1111</span><br><span class="line">       &amp;</span><br><span class="line">       h: 0110 0111</span><br><span class="line">       =  0000 0111</span><br><span class="line">只有低位参与了下标计算,hash碰撞的几率会会很大,导致hashMap链表高度过高,效率降低</span><br><span class="line">所以右移之后将高位移到低位 再进行异或运算,这样计算出来的下标值更均匀,hash碰撞几率更低</span><br></pre></td></tr></table></div></figure></li>
<li>HashMap中key可以为null吗<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">可以只有一个 key为null直接put</span><br></pre></td></tr></table></div></figure></li>
<li>计算扩容后数组的大小<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">设传入大小为L</span><br><span class="line">    计算： L -1 | L &gt;&gt;&gt; 1  L &gt;&gt;&gt; 2  L &gt;&gt;&gt; 4  L &gt;&gt;&gt; 8  L &gt;&gt;&gt; 16</span><br><span class="line">    原理： 最高1位 依次右移得到以低位全为1的树 即 2的n次方 -1</span><br><span class="line">    最终结果 + 1</span><br></pre></td></tr></table></div></figure></li>
</ol>

        <h3 id="jdk1-8"   >
          <a href="#jdk1-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#jdk1-8" class="headerlink" title="jdk1.8"></a>jdk1.8</h3>
      <blockquote>
<p>数组 + 链表 + 红黑树</p>
</blockquote>
<ul>
<li><p>hash计算 通过hashCode()的高16位异或低16位实现 更加散列</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>两个变量</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">// 当链表长度大于8时转为红黑树</span><br><span class="line">static final int TREEIFY_THRESHOLD = 8;</span><br><span class="line">//当红黑树高度小于6转为链表</span><br><span class="line">static final int UNTREEIFY_THRESHOLD = 6;</span><br></pre></td></tr></table></div></figure>
<blockquote>
<p>1.8 往链表插值时直接插入到链表的尾部（区别与1.7）因为反正需要遍历，而这样做可以避免链表死锁</p>
</blockquote>
</li>
<li><p>关键代码分析</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                   boolean evict) &#123;</span><br><span class="line">        HashMap.Node&lt;K,V&gt;[] tab; HashMap.Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">        if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">            //当前数组位置没有元素，直接放入</span><br><span class="line">        if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">            tab[i] = newNode(hash, key, value, null);</span><br><span class="line">        else &#123;</span><br><span class="line">        //当前数组位置已有元素</span><br><span class="line">            HashMap.Node&lt;K,V&gt; e; K k;</span><br><span class="line">            //key相同直接相当于更新</span><br><span class="line">            if (p.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">                // 如果当前数组位置是红黑树</span><br><span class="line">            else if (p instanceof HashMap.TreeNode)</span><br><span class="line">                e = ((HashMap.TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">            else &#123;</span><br><span class="line">                for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                当前链表节点为尾部节点  直接放到尾部</span><br><span class="line">                    if ((e = p.next) == null) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, null);</span><br><span class="line">                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //当前节点不为空key相同 更新操作</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        break;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (e != null) &#123; // existing mapping for key</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                return oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        //判断当前长度是否大于阈值 进行扩容</span><br><span class="line">        if (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure></li>
</ul>

        <h3 id="1-8-扩容"   >
          <a href="#1-8-扩容" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-8-扩容" class="headerlink" title="1.8 扩容"></a>1.8 扩容</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">                       next = e.next;</span><br><span class="line">                       //为0不变为1则下标为结果加上oldLength</span><br><span class="line">                       if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                           if (loTail == null)</span><br><span class="line">                               loHead = e;</span><br><span class="line">                           else</span><br><span class="line">                               loTail.next = e;</span><br><span class="line">                           loTail = e;</span><br><span class="line">                       &#125;</span><br><span class="line">                       else &#123;</span><br><span class="line">                           if (hiTail == null)</span><br><span class="line">                               hiHead = e;</span><br><span class="line">                           else</span><br><span class="line">                               hiTail.next = e;</span><br><span class="line">                           hiTail = e;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></div></figure>
<p>注意:<br>在1.8中扩容是的算法有所变化，之前的 <code>hash &amp; newTable.length -1</code> 改为 <code>(e.hash &amp; oldCap) == 0</code> </p>

        <h3 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>
      <blockquote>
<p>JDK源码中确实有许多代码设计精致的地方值得我们取挖掘学习. coding…</p>
</blockquote>
]]></content>
      <tags>
        <tag>面试</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm安装istio</title>
    <url>/2022/03/29/Helm%E5%AE%89%E8%A3%85istio/</url>
    <content><![CDATA[<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl create namespace istio-system</span><br><span class="line">kubectl label namespace istio-system istio-injection=enabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm repo add istio.io https://storage.googleapis.com/istio-release/releases/1.3.4/charts/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm search repo istio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm pull istio.io/istio-init --untar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helm install istio  istio.io/istio-init -n istio-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get crds -n istio-system  | grep istio.io |wc -l</span><br><span class="line">23</span><br><span class="line">#打印出23就完成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<hr>
<ul>
<li>helm常用命令  <span class="exturl"><a class="exturl__link"   href="https://helm.sh/zh/docs/helm/helm_repo/" >https://helm.sh/zh/docs/helm/helm_repo/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<hr>

        <h3 id="安装bookinfo"   >
          <a href="#安装bookinfo" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装bookinfo" class="headerlink" title="安装bookinfo"></a>安装bookinfo</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">wget https://github.com/istio/istio/releases/download/1.4.0/istio-1.4.0-linux.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tar -zxvf istio-1.4.0-linux.tar.gz</span><br><span class="line"></span><br><span class="line">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get ns default --show-labels</span><br><span class="line"></span><br><span class="line">kubectl get gateway</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl edit svc productpage-v1</span><br><span class="line"></span><br><span class="line">改为NodePort</span><br><span class="line"></span><br><span class="line">访问Ip+NodePort</span><br></pre></td></tr></table></div></figure>

<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20211027231144189.png" alt="image-20211027231144189"></p>
<hr>

        <h3 id="Helm-安装Kiali"   >
          <a href="#Helm-安装Kiali" class="heading-link"><i class="fas fa-link"></i></a><a href="#Helm-安装Kiali" class="headerlink" title="Helm 安装Kiali"></a>Helm 安装Kiali</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">helm install \</span><br><span class="line">    --namespace istio-system \</span><br><span class="line">    kiali-server \</span><br><span class="line">    kiali/kiali-server</span><br></pre></td></tr></table></div></figure>


<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl port-forward svc/kiali 20001:20001 -n istio-system</span><br></pre></td></tr></table></div></figure>


<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20211104212843841.png" alt="image-20211104212843841"></p>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2019/09/01/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[
        <h3 id="安装"   >
          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装" class="headerlink" title="安装"></a>安装</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装  </span><br><span class="line">npm update hexo -g #升级  </span><br><span class="line">hexo init #初始化</span><br></pre></td></tr></table></div></figure>

<span id="more"></span>


        <h3 id="简写"   >
          <a href="#简写" class="heading-link"><i class="fas fa-link"></i></a><a href="#简写" class="headerlink" title="简写"></a>简写</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></div></figure>

        <h3 id="服务器"   >
          <a href="#服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line"></span><br><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></div></figure>

        <h3 id="监视文件变动"   >
          <a href="#监视文件变动" class="heading-link"><i class="fas fa-link"></i></a><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></div></figure>

        <h3 id="完成后部署"   >
          <a href="#完成后部署" class="heading-link"><i class="fas fa-link"></i></a><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">两个命令的作用是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line"></span><br><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></div></figure>

        <h3 id="草稿"   >
          <a href="#草稿" class="heading-link"><i class="fas fa-link"></i></a><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></div></figure>

        <h3 id="模版"   >
          <a href="#模版" class="heading-link"><i class="fas fa-link"></i></a><a href="#模版" class="headerlink" title="模版"></a>模版</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line"></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">hexo new photo &quot;My Gallery&quot;</span><br><span class="line">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></div></figure>

        <h3 id="推送到服务器上"   >
          <a href="#推送到服务器上" class="heading-link"><i class="fas fa-link"></i></a><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo n #写文章</span><br><span class="line">hexo g #生成</span><br><span class="line">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo快速搭建个人博客</title>
    <url>/2022/04/04/Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>

        <h2 id="Quick-Start"   >
          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>
      <span id="more"></span>


        <h3 id="Create-a-new-post"   >
          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Run-server"   >
          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Generate-static-files"   >
          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Deploy-to-remote-sites"   >
          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA必备配置</title>
    <url>/2019/09/06/IDEA%E5%BF%85%E5%A4%87%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<ul>
<li>字体设置</li>
</ul>
<span id="more"></span>

<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-c2e96e3c131d8180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<ul>
<li><p>取消idea启动自动打开项目<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-6dc8db1438325d1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>开启自动编译<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-c4336e4aa5aea7a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>打开鼠标document悬浮<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-5a56bf8fba83ecf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>忽略大小写提示<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-7640ab2c28201267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>自动导入包<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-60787f37a0758700.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>显示内存信息<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-17254eee7a4d5892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>设置背景图片<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-c0c0ad2249c4aae7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>IDEA取消参数名称（形参名）提示<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-0f1b178869f4ea36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>取消 IntelliJ IDEA 的默认代码折叠<br>File -&gt; Setting -&gt; Editor -&gt; General -&gt; Code Folding 取消 one-line methods 勾选</p>
</li>
<li><p>IntelliJ IDEA去掉屏幕中间的白色竖线<br>settings -&gt; Editor -&gt; General -&gt; Appearance -&gt; show hard wrap guid 去掉勾选</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Intellj IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK动态代理和CGLIB动态代理</title>
    <url>/2020/04/07/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGLIB%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>我们在阅读一些 Java 框架的源码时，基本上常会看到使用动态代理机制，它可以无感的对既有代码进行方法的增强，使得代码拥有更好的拓展性。 通过从静态代理、JDK 动态代理、CGLIB 动态代理来进行本文的分析。</p>
</blockquote>
<span id="more"></span>


        <h3 id="静态代理"   >
          <a href="#静态代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3>
      
        <h3 id="JDK动态代理"   >
          <a href="#JDK动态代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3>
      
        <h3 id="CGLIB动态代理"   >
          <a href="#CGLIB动态代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3>
      ]]></content>
      <tags>
        <tag>JDK</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之反射</title>
    <url>/2022/05/08/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<blockquote>
<p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。反射机制允许程序在运行时取得任何一个已知名称的class的内部信息，包括包括其modifiers(修饰符)，fields(属性)，methods(方法)等，并可于运行时改变fields内容或调用methods。<br>另外，很多优秀的开源框架都是通过反射完成的，比如Spring框架。所以学好反射也是Java程序员的必备基础节能</p>
</blockquote>
<span id="more"></span>

        <h3 id="1-获取类信息"   >
          <a href="#1-获取类信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-获取类信息" class="headerlink" title="1.获取类信息"></a>1.获取类信息</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通过反射获取Class类信息三种方式</span><br><span class="line"> * 1.Class.forName()</span><br><span class="line"> * 2.示例名.getClass()</span><br><span class="line"> * 3.类名.class</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2020-07-25 21:22</span><br><span class="line"> */</span><br><span class="line">public class ClassReflectTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; forName = Class.forName(&quot;demo.reflect.ClassReflectTest&quot;);</span><br><span class="line">        System.out.println(&quot;第一种：Class.forName()：&quot;+forName.getName());</span><br><span class="line"></span><br><span class="line">        ClassReflectTest classReflectTest = new ClassReflectTest();</span><br><span class="line">        Class aClass = classReflectTest.getClass();</span><br><span class="line">        System.out.println(&quot;第二种：示例名.getClass()：&quot;+ aClass.getName());</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; staticName = ClassReflectTest.class;</span><br><span class="line">        System.out.println(&quot;第三种：Class.forName()：&quot;+staticName.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h3 id="2-获取构造方法"   >
          <a href="#2-获取构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-获取构造方法" class="headerlink" title="2.获取构造方法"></a>2.获取构造方法</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">1).批量的方法：</span><br><span class="line">  public Constructor[] getConstructors()：所有&quot;公有的&quot;构造方法</span><br><span class="line">  public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)</span><br><span class="line">2).获取单个的方法，并调用：</span><br><span class="line">  public Constructor getConstructor(Class... parameterTypes):获取单个的&quot;公有的&quot;构造方法：</span><br><span class="line">  public Constructor getDeclaredConstructor(Class... parameterTypes):获取&quot;某个构造方法&quot;可以是私有的，或受保护、默认、公有；</span><br><span class="line"></span><br><span class="line">调用构造方法：Constructor--&gt;newInstance(Object... initargs)</span><br></pre></td></tr></table></div></figure>
<p>示例：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class ConstructorReflectTest &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Class clazz = Class.forName(&quot;demo.reflect.ReflectTarget&quot;);</span><br><span class="line">        //1.获取所有的公有构造方法</span><br><span class="line">        System.out.println(&quot;**********************所有公有构造方法*********************************&quot;);</span><br><span class="line">        Constructor[] conArray = clazz.getConstructors();</span><br><span class="line">        for(Constructor c : conArray)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        //2.获取所有构造方法</span><br><span class="line">        System.out.println(&quot;************所有的构造方法(包括：私有、受保护、默认、公有)***************&quot;);</span><br><span class="line">        conArray = clazz.getDeclaredConstructors();</span><br><span class="line">        for(Constructor c : conArray)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        //3.获取单个带参数的公有方法</span><br><span class="line">        System.out.println(&quot;*****************获取公有、有两个参数的构造方法*******************************&quot;);</span><br><span class="line">        Constructor con = clazz.getConstructor(String.class, int.class);</span><br><span class="line">        System.out.println(&quot;con = &quot; + con);</span><br><span class="line">        //4.获取单个私有的构造方法</span><br><span class="line">        System.out.println(&quot;******************获取私有构造方法*******************************&quot;);</span><br><span class="line">        con = clazz.getDeclaredConstructor(int.class);</span><br><span class="line">        System.out.println(&quot;private con = &quot; + con);</span><br><span class="line">        System.out.println(&quot;******************调用私有构造方法创建实例*******************************&quot;);</span><br><span class="line">        //暴力访问（忽略掉访问修饰符）</span><br><span class="line">        con.setAccessible(true);</span><br><span class="line">        ReflectTarget reflectTarget = (ReflectTarget) con.newInstance(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<hr>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class ReflectTarget extends ReflectTargetOrigin&#123;</span><br><span class="line">    //---------构造函数-----------</span><br><span class="line">    //(默认的带参数构造函数)</span><br><span class="line">    ReflectTarget(String str) &#123;</span><br><span class="line">        System.out.println(&quot;(默认)的构造方法 s = &quot; + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //无参构造函数</span><br><span class="line">    public ReflectTarget() &#123;</span><br><span class="line">        System.out.println(&quot;调用了公有的无参构造方法 。。。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //有一个参数的构造函数</span><br><span class="line">    public ReflectTarget(char name) &#123;</span><br><span class="line">        System.out.println(&quot;调用了带有一个参数的构造方法，参数值为 &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //有多个参数的构造函数</span><br><span class="line">    public ReflectTarget(String name, int index) &#123;</span><br><span class="line">        System.out.println(&quot;调用了带有多个参数的构造方法，参数值为【目标名】： &quot; + name + &quot; 【序号】&quot; + index);</span><br><span class="line">    &#125;</span><br><span class="line">    //受保护的构造函数</span><br><span class="line">    protected ReflectTarget(boolean n)&#123;</span><br><span class="line">        System.out.println(&quot;受保护的构造方法 n :&quot; + n);</span><br><span class="line">    &#125;</span><br><span class="line">    //私有的构造函数</span><br><span class="line">    private ReflectTarget(int index)&#123;</span><br><span class="line">        System.out.println(&quot;私有的构造方法 序号：&quot; + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //**************字段*******************//</span><br><span class="line">    public String name;</span><br><span class="line">    protected int index;</span><br><span class="line">    char type;</span><br><span class="line">    private String targetInfo;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;ReflectTarget [name=&quot; + name + &quot;, index=&quot; + index + &quot;, type=&quot; + type</span><br><span class="line">                + &quot;, targetInfo=&quot; + targetInfo + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //***************成员方法***************//</span><br><span class="line">    public void show1(String s)&#123;</span><br><span class="line">        System.out.println(&quot;调用了公有的，String参数的show1(): s = &quot; + s);</span><br><span class="line">    &#125;</span><br><span class="line">    protected void show2()&#123;</span><br><span class="line">        System.out.println(&quot;调用了受保护的，无参的show2()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    void show3()&#123;</span><br><span class="line">        System.out.println(&quot;调用了默认的，无参的show3()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    private String show4(int index)&#123;</span><br><span class="line">        System.out.println(&quot;调用了私有的，并且有返回值的，int参数的show4(): index = &quot; + index);</span><br><span class="line">        return &quot;show4result&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class="line">        //第一种方式获取Class对象</span><br><span class="line">        ReflectTarget reflectTarget = new ReflectTarget();</span><br><span class="line">        Class reflectTargetClass1 = reflectTarget.getClass();</span><br><span class="line">        System.out.println(&quot;1st : &quot; + reflectTargetClass1.getName());</span><br><span class="line">        //第二种方式获取Class对象</span><br><span class="line">        Class reflectTargetClass2 = ReflectTarget.class;</span><br><span class="line">        System.out.println(&quot;2nd: &quot; + reflectTargetClass2.getName());</span><br><span class="line">        //判断第一种方式获取的class对象和第二种方式获取的是否是同一个</span><br><span class="line">        System.out.println(reflectTargetClass1 == reflectTargetClass2);</span><br><span class="line">        //第三种方式来获取Class对象</span><br><span class="line">        Class reflectTargetClass3 = Class.forName(&quot;demo.reflect.ReflectTarget&quot;);</span><br><span class="line">        System.out.println(&quot;3rd: &quot; + reflectTargetClass3.getName());</span><br><span class="line">        System.out.println(reflectTargetClass2 == reflectTargetClass3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<hr>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class ReflectTargetOrigin &#123;</span><br><span class="line">    String defaultMember = &quot;default&quot;;</span><br><span class="line">    public String publicMember = &quot;public&quot;;</span><br><span class="line">    protected String protectedMember = &quot;protected&quot;;</span><br><span class="line">    private String privateMember = &quot;private&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h3 id="3-获取字段"   >
          <a href="#3-获取字段" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-获取字段" class="headerlink" title="3.获取字段"></a>3.获取字段</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">1.批量的</span><br><span class="line">       1).Field[] getFields():获取所有的&quot;公有字段&quot;</span><br><span class="line">       2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；</span><br><span class="line">2.获取单个的：</span><br><span class="line">       1).public Field getField(String fieldName):获取某个&quot;公有的&quot;字段；</span><br><span class="line">       2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)</span><br><span class="line"></span><br><span class="line">设置字段的值：</span><br><span class="line">     Field --&gt; public void set(Object obj,Object value): 参数说明：1.obj:要设置的字段所在的对象；2.value:要为字段设置的值；</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>示例：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class FieldReflectTest &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        //获取Class对象</span><br><span class="line">        Class reflectTargetClass = Class.forName(&quot;demo.reflect.ReflectTarget&quot;);</span><br><span class="line">        //1.获取所有公有的字段</span><br><span class="line">        System.out.println(&quot;************获取所有公有的字段********************&quot;);</span><br><span class="line">        Field[] fieldArray = reflectTargetClass.getFields();</span><br><span class="line">        for (Field f : fieldArray)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        //2.获取所有的字段</span><br><span class="line">        System.out.println(&quot;************获取所有的字段(包括私有、受保护、默认的)********************&quot;);</span><br><span class="line">        fieldArray = reflectTargetClass.getDeclaredFields();</span><br><span class="line">        for (Field f : fieldArray)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        //3.获取单个特定公有的field</span><br><span class="line">        System.out.println(&quot;*************获取公有字段并调用***********************************&quot;);</span><br><span class="line">        Field f = reflectTargetClass.getField(&quot;name&quot;);</span><br><span class="line">        System.out.println(&quot;公有的field name : &quot; + f);</span><br><span class="line">        ReflectTarget reflectTarget = (ReflectTarget)reflectTargetClass.getConstructor().newInstance();</span><br><span class="line">        //4.给获取到的field赋值</span><br><span class="line">        f.set(reflectTarget, &quot;待反射一号&quot;);</span><br><span class="line">        //5.验证对应的值name</span><br><span class="line">        System.out.println(&quot;验证name : &quot; + reflectTarget.name);</span><br><span class="line">        //6.获取单个私有的Field</span><br><span class="line">        System.out.println(&quot;**************获取私有字段targetInfo并调用********************************&quot;);</span><br><span class="line">        f = reflectTargetClass.getDeclaredField(&quot;targetInfo&quot;);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        f.setAccessible(true);</span><br><span class="line">        f.set(reflectTarget, &quot;13810592345&quot;);</span><br><span class="line">        System.out.println(&quot;验证信息&quot; + reflectTarget);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="4-获取方法"   >
          <a href="#4-获取方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-获取方法" class="headerlink" title="4.获取方法"></a>4.获取方法</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">1.批量的：</span><br><span class="line">      public Method[] getMethods():获取所有&quot;公有方法&quot;；（包含了父类的方法也包含Object类）</span><br><span class="line">      public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)</span><br><span class="line"> 2.获取单个的：</span><br><span class="line">      public Method getMethod(String name,Class&lt;?&gt;... parameterTypes): 参数：name : 方法名；Class ... : 形参的Class类型对象</span><br><span class="line">      public Method getDeclaredMethod(String name,Class&lt;?&gt;... parameterTypes)</span><br><span class="line"></span><br><span class="line">   调用方法：</span><br><span class="line">      Method --&gt; public Object invoke(Object obj,Object... args):参数说明： obj : 要调用方法的对象；args:调用方式时所传递的实参；</span><br></pre></td></tr></table></div></figure>
<p>示例：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class MethodCollector &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        //1、获取Class对象</span><br><span class="line">        Class reflectTargetClass = Class.forName(&quot;demo.reflect.ReflectTarget&quot;);</span><br><span class="line">        //2、获取所有公有方法</span><br><span class="line">        System.out.println(&quot;***************获取所有的public方法，包括父类和Object*******************&quot;);</span><br><span class="line">        Method[] methodArray = reflectTargetClass.getMethods();</span><br><span class="line">        for(Method m : methodArray)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        //3、获取该类的所有方法</span><br><span class="line">        System.out.println(&quot;***************获取所有的方法，包括私有的*******************&quot;);</span><br><span class="line">        methodArray = reflectTargetClass.getDeclaredMethods();</span><br><span class="line">        for(Method m : methodArray)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        //4、获取单个公有方法</span><br><span class="line">        System.out.println(&quot;***************获取公有的show1()方法*******************&quot;);</span><br><span class="line">        Method m = reflectTargetClass.getMethod(&quot;show1&quot;, String.class);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        //5、调用show1并执行</span><br><span class="line">        ReflectTarget reflectTarget = (ReflectTarget)reflectTargetClass.getConstructor().newInstance();</span><br><span class="line">        m.invoke(reflectTarget, &quot;待反射方法一号&quot;);</span><br><span class="line">        //6、获取一个私有的成员方法</span><br><span class="line">        System.out.println(&quot;***************获取私有的show4()方法******************&quot;);</span><br><span class="line">        m = reflectTargetClass.getDeclaredMethod(&quot;show4&quot;, int.class);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">        m.setAccessible(true);</span><br><span class="line">        String result = String.valueOf(m.invoke(reflectTarget, 20));</span><br><span class="line">        System.out.println(&quot;返回值 ： &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>




        <h3 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">0. 获取类Class</span><br><span class="line">Class.forName()</span><br><span class="line">示例名.getClass()</span><br><span class="line">类名.class</span><br><span class="line"></span><br><span class="line">1.构造器</span><br><span class="line">public Constructor[] getConstructors()：所有&quot;公有的&quot;构造方法</span><br><span class="line">public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)</span><br><span class="line">public Constructor getConstructor(Class... parameterTypes):获取单个的&quot;公有的&quot;构造方法</span><br><span class="line">public Constructor getDeclaredConstructor(Class... parameterTypes):获取&quot;某个构造方法&quot;可以是私有的，或受保护、默认、公有；</span><br><span class="line">调用构造方法：Constructor--&gt;newInstance(Object... initargs)</span><br><span class="line"></span><br><span class="line">2.字段</span><br><span class="line">Field[] getFields():获取所有的&quot;公有字段&quot;</span><br><span class="line">Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；</span><br><span class="line">public Field getField(String fieldName):获取某个&quot;公有的&quot;字段；</span><br><span class="line">public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)</span><br><span class="line"></span><br><span class="line">3.方法</span><br><span class="line">public Method[] getMethods():获取所有&quot;公有方法&quot;；（包含了父类的方法也包含Object类）</span><br><span class="line">public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)</span><br><span class="line">public Method getMethod(String name,Class&lt;?&gt;... parameterTypes):</span><br><span class="line">public Method getDeclaredMethod(String name,Class&lt;?&gt;... parameterTypes)</span><br><span class="line">调用方法：Method --&gt; public Object invoke(Object obj,Object... args):</span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>面试</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Intellj IDEA插件</title>
    <url>/2019/09/01/Intellj%20IDEA%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p> 官网插件库：<span class="exturl"><a class="exturl__link"   href="https://plugins.jetbrains.com/" >https://plugins.jetbrains.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<ul>
<li><p>Lombok Plugin</p>
</li>
<li><p>Alibaba Java coding Guidelines</p>
</li>
<li><p>Grep Console</p>
</li>
<li><p>Translation</p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p><span class="exturl"><a class="exturl__link"   href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro" >MyBatisCodeHelperPro</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
<li><p>Free Mybatis plugin</p>
</li>
<li><p>JRebel for IntelliJ</p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://gitee.com/oschina/intellij-gitosc" >Intellij-Gitee</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<blockquote>
<p>码云 IntelliJ IDEA 插件由码云推出的 Git 插件，该插件基于 IntelliJ IDEA Github 插件开发，可实现 IntelliJ IDEA 与开源中国码云平台对接</p>
</blockquote>
</li>
<li><p>IDEA 的 Lua 编辑调试插件    <span class="exturl"><a class="exturl__link"   href="https://gitee.com/tangzx/IntelliJ-Lua" >EmmyLua</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<blockquote>
<p>EmmyLua 是一款基于 IntelliJ IDEA 的 Lua 插件，拥有强大的代码提示以及调试功能，开源免费</p>
</blockquote>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="http://note.youdao.com/noteshare?id=6217dd81020cc3c9fea534ad4f69c529&sub=990CD115A0694BF88DDCBC8363E509E2" >IntelliJ IDEA Mybatis Plugin</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
<li><p>Background Image Plus</p>
</li>
<li><p>Material Theme UI</p>
</li>
<li><p>activate-power-mode （Power mode II 色彩更炫）</p>
</li>
<li><p>Rainbow Brackets </p>
<blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets" >https://plugins.jetbrains.com/plugin/10080-rainbow-brackets</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 彩虹颜色的括号 看着很舒服 敲代码效率变高</p>
</blockquote>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://github.com/YiiGuxing/TranslationPlugin" >Translation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
</ul>
<ul>
<li>iedis<br>简介：redis客户端可视化插件，可以查看redis集群</li>
</ul>
<ul>
<li>BashSupport</li>
</ul>
<p>支持编写Shell，高亮、代码提示、重构</p>
<ul>
<li>Kubernetes</li>
</ul>
<p>官方出品，帮你快速编写Kubernetes编排文件，例如输入kdep迅速创建Deployment</p>
<ul>
<li>GsonFormat</li>
<li>AceJump</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Intellj IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Jsoup实现简单爬虫</title>
    <url>/2021/05/08/Jsoup%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[
        <h3 id="Jsoup爬虫"   >
          <a href="#Jsoup爬虫" class="heading-link"><i class="fas fa-link"></i></a><a href="#Jsoup爬虫" class="headerlink" title="Jsoup爬虫"></a>Jsoup爬虫</h3>
      <blockquote>
<p>jsoup 是一个用于处理真实世界 HTML 的 Java 库。它使用最好的 HTML5 DOM 方法和 CSS 选择器提供了一个非常方便的 API，用于获取 URL 以及提取和操作数据。</p>
</blockquote>
<span id="more"></span>

<ul>
<li>pom依赖</li>
</ul>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- jsoup HTML parser library @ https://jsoup.org/ --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- slf4j 日志门面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logback 日志实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.0.M4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>



<ul>
<li>JsoupDemo</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsoupDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(JsoupDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> Jsoup.connect(<span class="string">&quot;http://10.1.20.55/gt/&quot;</span>).get();</span><br><span class="line">        log.info(doc.title());</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">newsHeadlines</span> <span class="operator">=</span> doc.select(<span class="string">&quot;#column-list ul li&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element headline : newsHeadlines) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">href</span> <span class="operator">=</span> headline.children().attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Document</span> <span class="variable">archivePage</span> <span class="operator">=</span> Jsoup.connect(<span class="string">&quot;http://10.1.20.55&quot;</span> + href).get();</span><br><span class="line">            log.info(<span class="string">&quot;|||---------------------------------------------------|||&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> archivePage.title();</span><br><span class="line">            log.info(<span class="string">&quot;《《《 课程专题: &#123;&#125; 》》》&quot;</span>, title);</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\study\\极客时间\\&quot;</span> + title);</span><br><span class="line">            <span class="keyword">if</span> (!f2.exists()) &#123;</span><br><span class="line">                f2.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Elements</span> <span class="variable">postList</span> <span class="operator">=</span> archivePage.select(<span class="string">&quot;#column-content-list ul li&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; postList.size(); i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">itemHref</span> <span class="operator">=</span> postList.get(i).children().attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isBlank(itemHref)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Document</span> <span class="variable">post</span> <span class="operator">=</span> Jsoup.connect(<span class="string">&quot;http://10.1.20.55&quot;</span> + itemHref).get();</span><br><span class="line">                log.info(<span class="string">&quot;=== 文章标题: &#123;&#125; ===&quot;</span>, post.title());</span><br><span class="line"></span><br><span class="line"><span class="comment">//                File f1 = new File(&quot;E:\\study\\极客时间\\&quot; + title + &quot;\\&quot; + i + &quot;-&quot; + post.title() + &quot;.md&quot;);</span></span><br><span class="line"><span class="comment">//                if (!f1.exists()) &#123;</span></span><br><span class="line"><span class="comment">//                    boolean flag1 = f1.createNewFile();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="type">Elements</span> <span class="variable">image</span> <span class="operator">=</span> post.select(<span class="string">&quot;#divimage #img-content&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> image.get(<span class="number">0</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">                log.info(src);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> AliyunOSSUtils.uploadFile(IdUtil.getSnowflakeNextId() + <span class="string">&quot;_&quot;</span> + StrUtil.subAfter(src, <span class="string">&quot;/&quot;</span>, <span class="literal">true</span>), <span class="string">&quot;http://10.1.20.55&quot;</span> + src);</span><br><span class="line">                System.out.println(url);</span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;E:\\study\\极客时间\\&quot;</span> + title + <span class="string">&quot;\\&quot;</span> + i + <span class="string">&quot;-&quot;</span> + post.title() + <span class="string">&quot;.md&quot;</span>);</span><br><span class="line">                writer.write(<span class="string">&quot;![image-20220505095253102](&quot;</span> + url + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                writer.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



<ul>
<li>AliyunOSSUtils</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunOSSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENDPOINT</span> <span class="operator">=</span> <span class="string">&quot;oss-cn-beijing.aliyuncs.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESSKEY_ID</span> <span class="operator">=</span> <span class="string">&quot;LTAI4FofEpjtgLaKRaRAZqe4&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESSKEY_SECRET</span> <span class="operator">=</span> <span class="string">&quot;a6u8B0OANXReNcGfyDdLFK97a7xiaK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUCKET_NAME</span> <span class="operator">=</span> <span class="string">&quot;haopeng-jksj&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadFile</span><span class="params">(String uniqueFileName, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        java.net.<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.net.URL(path);</span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> conn.getInputStream();</span><br><span class="line">        uploadFile(uniqueFileName, in);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + BUCKET_NAME + <span class="string">&quot;.&quot;</span> + ENDPOINT + <span class="string">&quot;/&quot;</span> + uniqueFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(String uniqueFileName, InputStream in)</span> &#123;</span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(<span class="string">&quot;https://&quot;</span> + ENDPOINT, ACCESSKEY_ID, ACCESSKEY_SECRET);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            PutObjectRequest putObjectRequest = new PutObjectRequest(BUCKET_NAME, uniqueFileName, in);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果需要上传时设置存储类型和访问权限，请参考以下示例代码。</span></span><br><span class="line">            <span class="comment">// ObjectMetadata metadata = new ObjectMetadata();</span></span><br><span class="line">            <span class="comment">// metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());</span></span><br><span class="line">            <span class="comment">// metadata.setObjectAcl(CannedAccessControlList.Private);</span></span><br><span class="line">            <span class="comment">// putObjectRequest.setMetadata(metadata);</span></span><br><span class="line"></span><br><span class="line">          ossClient.putObject(BUCKET_NAME, uniqueFileName, in);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                    + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



<ul>
<li>logback.xml</li>
</ul>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置集中管理属性, 可以直接使用该属性的值，格式：$&#123;name&#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] %c %M %L [%thread] %m%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    日志输出格式:</span></span><br><span class="line"><span class="comment">        %-5level</span></span><br><span class="line"><span class="comment">        %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;日期</span></span><br><span class="line"><span class="comment">        %c类的完整名称</span></span><br><span class="line"><span class="comment">        %M为method</span></span><br><span class="line"><span class="comment">        %L为行号</span></span><br><span class="line"><span class="comment">        %thread线程名称</span></span><br><span class="line"><span class="comment">        %m或者%msg为信息</span></span><br><span class="line"><span class="comment">        %n换行</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    格式化输出:</span></span><br><span class="line"><span class="comment">        %d表示日期，</span></span><br><span class="line"><span class="comment">        %thread表示线程名，</span></span><br><span class="line"><span class="comment">        %-5level:级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">        %msg:日志消息</span></span><br><span class="line"><span class="comment">        %n是换行符</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    控制台日志输出的 appender--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--每个标签的编写都是使用类的 set 方法 如 target 标签对应 setTarget 方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    控制输出流对象  默认是 System.out 可以改为 System.err 区别在于：字体颜色不同--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>System.out<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    日志消息格式配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    root logger 配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ALL&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">appender-ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


]]></content>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis集成Spring原理</title>
    <url>/2022/05/08/Mybatis%E9%9B%86%E6%88%90Spring%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>Mybatis-Spring集成原理</p>
<ol>
<li>通过定义BD来最终集成到spring中</li>
<li>由于mapper文件时接口 所以没法直接通过class名来定义BD，需要通过动态代理生成代理类   所以可以考虑用FactoryBean来自定义Bean的具体实现</li>
<li>为了保证FactoryBean的通用性，不需要为每一个Mapper编写一个factoryBean 所以可以通过泛型来解决</li>
<li>考虑到应该动态添加BD到spring中 所以需要用到Import技术来动态添加DB</li>
<li>最后需要用到scan技术来扫描指定包下的所有接口，生成代理对象，定义为BD，最终通过ImportBeanDefinitionRegistrar 注册到Spring中</li>
</ol>
<span id="more"></span>

<ul>
<li><p>引入依赖</p>
<dependency>
<groupId>org.mybatis</groupId>
<artifactId>mybatis-spring</artifactId>
<version>1.2.2</version>
</dependency></li>
<li><p>Spring启动<br>ApplicationContext ctx = new ClassPathXmlApplicationContext(“bean.xml”);</p>
</li>
<li><p>Spring配置文件</p>
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <!-- 加载数据源 -->
  <property name="dataSource" ref="dataSource"/>
  <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>
</bean></li>
</ul>
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 指定扫描的包，如果存在多个包使用(逗号,)分割 -->
    <property name="basePackage" value="com.test.bean"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
</bean>

<ul>
<li>创建MapperScannerConfigurer</li>
</ul>
<p>这个扫描器继承了spring的ClassPathBeanDefinitionScanner</p>
<p>protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {<br>    return beanDefinition.getMetadata().isInterface() &amp;&amp; beanDefinition.getMetadata().isIndependent();<br>}</p>
<p>判断包扫描路径下的Interface</p>
<p>sbd.getPropertyValues().add(“mapperInterface”, definition.getBeanClassName());<br>sbd.setBeanClass(MapperFactoryBean.class);<br>sbd.getPropertyValues().add(“sqlSessionFactory”, this.sqlSessionFactory);</p>
<p>将bd注入到beanfactory</p>
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 加载数据源 -->
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>
</bean>

<p>再看看SqlSessionFactoryBean</p>
<p>两次赋值：<br>setDataSource<br>setMapperLocations</p>
<p>public void afterPropertiesSet() throws Exception {<br>    Assert.notNull(this.dataSource, “Property ‘dataSource’ is required”);<br>    Assert.notNull(this.sqlSessionFactoryBuilder, “Property ‘sqlSessionFactoryBuilder’ is required”);<br>    this.sqlSessionFactory = this.buildSqlSessionFactory();<br>}<br>执行afterPropertiesSet</p>
<p>buildSqlSessionFactory()</p>
<p>首先通过一个关键字new创建了对象Configuration，这个对象是mybatis框架的一个核心类，在这里我们不做详细介绍，以后再剖析。<br>接着又创建了new SpringManagedTransactionFactory()，后面介绍这个类的作用，此处略过。<br>接着继续创建new Environment(this.environment, this.transactionFactory, this.dataSource)，这个Environment类中持有事物工厂和数据源的引用。<br>接下来就是创建XMLMapperBuilder对象，并且调用了xmlMapperBuilder.parse()方法，这个方法的详细，不在此分析，也不是我们这篇文章要记录的重点，否则会偏离我们的主题，<br>parse()这个方法就是在解析mapperLocation变量所代表的就是mybatis的一个xml配置文件</p>
<p>xmlMapperBuilder.parse()方法执行完成之后，调用this.sqlSessionFactoryBuilder.build(configuration)，这个sqlSessionFactoryBuilder 构造器在哪儿创建的呢？<br>其他它就是SqlSessionFactoryBean的一个私有类变量，初始化SqlSessionFactoryBean的时候，就实例化了这个sqlSessionFactoryBuilder。</p>
<p>public SqlSessionFactory build(Configuration config) {<br>    return new DefaultSqlSessionFactory(config);<br>}</p>
<p>总结起来，就是创建了几个对象，依次是mybatis的核心类Configuration、spring和mybatis集成的事物工厂类<br>SpringManagedTransactionFactory、mybatis的Environment类、mybatis的DefaultSqlSessionFactory类，同时还完成了对mybatis的xml文件解析，并将解析结果封装在Configuration类中。</p>
<p>执行onApplicationEvent方法</p>
<p>调用完上面的afterPropertiesSet方法之后，第二个被调用的就是onApplicationEvent方法，这个方法的调用时机是，spring容器初始化完成之后，该方法是接口ApplicationListener<ApplicationEvent>中的方法。</p>
<p>public void onApplicationEvent(ApplicationEvent event) {<br>    if (this.failFast &amp;&amp; event instanceof ContextRefreshedEvent) {<br>        this.sqlSessionFactory.getConfiguration().getMappedStatementNames();<br>    }<br>}<br>调试发现this.failFast这个变量的值是false，所以这个方法不会执行，在此就不做重点分析了。</p>
<p>上面两个标签的解析过程分析完成，现在有两个问题没有答案，第一个是basePackage基础包下面扫描出来的mapper接口怎么实例化的？第二个是这两个标签创建出来的对象怎么配合使用的？</p>
<p>@Service<br>public class AuthUserServiceImpl implements IAuthUserService {<br>    @Resource<br>    private AuthUserMapper authUserMapper;</p>
<pre><code>public AuthUserServiceImpl()&#123;
    logger.info(&quot;创建 com.test.bean.AuthUserServiceImpl&quot;);
&#125;
</code></pre>
<p>}</p>
<p>首先根据这个mapper的名字从spring的BeanFactory中获取它的BeanDefinition，再从BeanDefinition中获取BeanClass，AuthUserMapper对应的BeanClass就是MapperFactoryBean，<br>这是为什么呢？在上面分析的内容中提到过，也就是在创建MapperScannerConfigurer对象的时候设置的。</p>
<p>MapperFactoryBean对象的属性设置完成之后，就调用它的getObject()方法，来获取authUserMapper对应的实现类，从上面图中可以看出来，最后返回的就是一个代理类，这个代理类使用jdk的动态代理创建出来的。</p>
<p>return Proxy.newProxyInstance(this.mapperInterface.getClassLoader(), new Class[]{this.mapperInterface}, mapperProxy);</p>
<p>这个MapperProxy类就是InvocationHandler的实现类：</p>
<p>public class MapperProxy<T> implements InvocationHandler, Serializable {</p>
<pre><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;
    if (Object.class.equals(method.getDeclaringClass())) &#123;
        return method.invoke(this, args);
    &#125; else &#123;
        MapperMethod mapperMethod = this.cachedMapperMethod(method);
        return mapperMethod.execute(this.sqlSession, args);
    &#125;
&#125;
</code></pre>
<p>}</p>
<p>程序在调用authUserMapper对象的某个方法的时候，就会调用到MapperProxy对象的invoke()方法，去完成对数据库的操作。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx设置开机自动启动</title>
    <url>/2019/09/01/Nginx%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[
        <h4 id="1-在-etc-init-d下创建文件nginx"   >
          <a href="#1-在-etc-init-d下创建文件nginx" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-在-etc-init-d下创建文件nginx" class="headerlink" title="1.在/etc/init.d下创建文件nginx"></a>1.在/etc/init.d下创建文件nginx</h4>
      <span id="more"></span>

<p><code>vim /etc/init.d/nginx</code><br>内容可以参考[Nginx官方文档]<br>(<span class="exturl"><a class="exturl__link"   href="https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/" >https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#</span><br><span class="line"># nginx - this script starts and stops the nginx daemon</span><br><span class="line">#</span><br><span class="line"># chkconfig:   - 85 15</span><br><span class="line"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span><br><span class="line">#               proxy and IMAP/POP3 proxy server</span><br><span class="line"># processname: nginx</span><br><span class="line"># config:      /etc/nginx/nginx.conf</span><br><span class="line"># config:      /etc/sysconfig/nginx</span><br><span class="line"># pidfile:     /var/run/nginx.pid</span><br><span class="line"></span><br><span class="line"># Source function library.</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line"># Source networking configuration.</span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"># Check that networking is up.</span><br><span class="line">[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">nginx=&quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">prog=$(basename $nginx)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line">make_dirs() &#123;</span><br><span class="line">   # make required directories</span><br><span class="line">   user=`$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:.*--user=&quot; | sed &#x27;s/[^*]*--user=\([^ ]*\).*/\1/g&#x27; -`</span><br><span class="line">   if [ -n &quot;$user&quot; ]; then</span><br><span class="line">      if [ -z &quot;`grep $user /etc/passwd`&quot; ]; then</span><br><span class="line">         useradd -M -s /bin/nologin $user</span><br><span class="line">      fi</span><br><span class="line">      options=`$nginx -V 2&gt;&amp;1 | grep &#x27;configure arguments:&#x27;`</span><br><span class="line">      for opt in $options; do</span><br><span class="line">          if [ `echo $opt | grep &#x27;.*-temp-path&#x27;` ]; then</span><br><span class="line">              value=`echo $opt | cut -d &quot;=&quot; -f 2`</span><br><span class="line">              if [ ! -d &quot;$value&quot; ]; then</span><br><span class="line">                  # echo &quot;creating&quot; $value</span><br><span class="line">                  mkdir -p $value &amp;&amp; chown -R $user $value</span><br><span class="line">              fi</span><br><span class="line">          fi</span><br><span class="line">       done</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">    [ -x $nginx ] || exit 5</span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || exit 6</span><br><span class="line">    make_dirs</span><br><span class="line">    echo -n $&quot;Starting $prog: &quot;</span><br><span class="line">    daemon $nginx -c $NGINX_CONF_FILE</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class="line">    killproc $prog -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reload() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class="line">    killproc $nginx -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">force_reload() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configtest() &#123;</span><br><span class="line">  $nginx -t -c $NGINX_CONF_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_status() &#123;</span><br><span class="line">    status $prog</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_status_q() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || exit 7</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span><br><span class="line">        exit 2</span><br><span class="line">esac</span><br></pre></td></tr></table></div></figure>
<ul>
<li>其中有两个地方需要修改</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nginx=”/usr/local/nginx/sbin/nginx” //修改成nginx执行程序的路径。</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=”/usr/local/nginx/conf/nginx.conf” //修改成nginx.conf文件的路径。</span><br></pre></td></tr></table></div></figure>



        <h4 id="2-保存后设置文件的执行权限"   >
          <a href="#2-保存后设置文件的执行权限" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-保存后设置文件的执行权限" class="headerlink" title="2. 保存后设置文件的执行权限"></a>2. 保存后设置文件的执行权限</h4>
      <p><code>chmod a+x /etc/init.d/nginx</code></p>
<p>至此就可以通过下面指令控制启动停止</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx start</span><br><span class="line">/etc/init.d/nginx stop</span><br></pre></td></tr></table></div></figure>

        <h4 id="3-将nginx服务加入chkconfig管理列表"   >
          <a href="#3-将nginx服务加入chkconfig管理列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-将nginx服务加入chkconfig管理列表" class="headerlink" title="3.将nginx服务加入chkconfig管理列表"></a>3.将nginx服务加入chkconfig管理列表</h4>
      <p>上面的方法完成了用脚本管理nginx服务的功能，但是还是不太方便。</p>
<p><code> chkconfig --add /etc/init.d/nginx</code></p>
<p>加完这个之后，就可以使用service对nginx进行启动，重启等操作了。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">service nginx start</span><br><span class="line">service nginx stop</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></div></figure>


        <h4 id="设置开机自动启动"   >
          <a href="#设置开机自动启动" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置开机自动启动" class="headerlink" title="设置开机自动启动"></a>设置开机自动启动</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></div></figure>


]]></content>
      <tags>
        <tag>工具</tag>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ安装</title>
    <url>/2019/09/06/RabbitMQ%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>[toc]</p>

        <h3 id="一、Windows下安装"   >
          <a href="#一、Windows下安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、Windows下安装" class="headerlink" title="一、Windows下安装"></a>一、Windows下安装</h3>
      
        <h4 id="1-安装Erlang"   >
          <a href="#1-安装Erlang" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-安装Erlang" class="headerlink" title="1.安装Erlang"></a><strong>1.安装Erlang</strong></h4>
      <pre><code>一路NEXT
</code></pre>
<span id="more"></span>


        <h4 id="2-安装RabbitMQ"   >
          <a href="#2-安装RabbitMQ" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-安装RabbitMQ" class="headerlink" title="2.安装RabbitMQ"></a><strong>2.安装RabbitMQ</strong></h4>
      <pre><code>一路NEXT
</code></pre>

        <h4 id="3-配置环境变量"   >
          <a href="#3-配置环境变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a><strong>3.配置环境变量</strong></h4>
      <pre><code>1)创建一个名为ERLANG_HOME的环境变量，其值指向erlang的安装目录
</code></pre>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-bc0dab7561c93648.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<pre><code>2)同时将%ERLANG_HOME%\bin加入到Path中
</code></pre>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-5656dc62f5fcd9be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<pre><code>3)最后打开命令行，输入erl，如果出现erlang的版本信息就表示erlang语言环境安装成功；
</code></pre>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-0cfcc7a4d96bd354.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h4 id="4-安装"   >
          <a href="#4-安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-安装" class="headerlink" title="4.安装"></a><strong>4.安装</strong></h4>
      <p><img   src="https://upload-images.jianshu.io/upload_images/8387919-ae9fdf79cb8a78a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<pre><code>1)命令行下执行
</code></pre>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\RabbitMQ Server\rabbitmq_server-3.2.3\sbin\rabbitmq-plugins.bat&quot; enable rabbitmq_management</span><br></pre></td></tr></table></div></figure>
<pre><code>2)开启RabbitMQ服务
</code></pre>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Windows + R  services.msc</span><br></pre></td></tr></table></div></figure>


<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-cf4e9aaab2fc1711.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p> 3)浏览器访问<span class="exturl"><a class="exturl__link"   href="http://localhost:15672/" >http://localhost:15672</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-b4bd6c535f65892d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p><strong>安装成功！！！</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <span class="exturl"><a class="exturl__link"   href="https://github.com/ServiceStack/rabbitmq-windows" >参考github</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><input checked="" disabled="" type="checkbox"> <span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_38256991/article/details/79106956" >安装不成功?</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/lykbk/p/erewererewr32434343.html" >https://www.cnblogs.com/lykbk/p/erewererewr32434343.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="二、Linux下安装"   >
          <a href="#二、Linux下安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、Linux下安装" class="headerlink" title="二、Linux下安装"></a>二、Linux下安装</h3>
      
        <h4 id="1-安装Erlang-1"   >
          <a href="#1-安装Erlang-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-安装Erlang-1" class="headerlink" title="1.安装Erlang"></a><strong>1.安装Erlang</strong></h4>
      <p>1)安装GCC GCC-C++ Openssl等模块,安装过就不需要安装了</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel  </span><br></pre></td></tr></table></div></figure>
<p>2)安装ncurses</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">yum -y install ncurses-devel</span><br></pre></td></tr></table></div></figure>
<p>3)安装erlang环境</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">wget http://erlang.org/download/otp_src_18.2.1.tar.gz  </span><br><span class="line">tar xvfz otp_src_18.2.1.tar.gz   </span><br><span class="line">./configure   </span><br><span class="line">make install  </span><br></pre></td></tr></table></div></figure>

        <h4 id="2-安装RabbitMQ-1"   >
          <a href="#2-安装RabbitMQ-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-安装RabbitMQ-1" class="headerlink" title="2.安装RabbitMQ"></a><strong>2.安装RabbitMQ</strong></h4>
      <p>1)下载rabbitmq-server-3.6.9.tar.xz</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.9/rabbitmq-server-generic-unix-3.6.9.tar.xz   </span><br></pre></td></tr></table></div></figure>
<p>2)对于下载xz包进行解压，首先先下载xz压缩工具</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">yum install xz  </span><br></pre></td></tr></table></div></figure>
<p>3)对rabbitmq包进行解压：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">xz -d xz -d rabbitmq-server-generic-unix-3.6.9.tar.xz  </span><br><span class="line">tar -xvf rabbitmq-server-generic-unix-3.6.9.tar </span><br></pre></td></tr></table></div></figure>
<p>4)随后移动至/usr/local/下 改名rabbitmq：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">cp -r rabbitmq_server-3.6.9 /usr/local/rabbitmq  </span><br></pre></td></tr></table></div></figure>
<p>5)这种下载的方式解压后直接可以使用，无需再编译安装</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">进入到rabbit文件内，其命令文件存在于sbin文件夹下，因此需要将sbin文件夹的路径添加到PATH中：修改/etc/profile  </span><br><span class="line">export PATH=/usr/local/rabbitmq/sbin:$PATH     </span><br><span class="line">执行source /etc/profile使得PATH路径更新，rabbitMQ安装成功。  </span><br></pre></td></tr></table></div></figure>
<p>6)随后启用MQ管理方式：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management   #启动后台管理  </span><br><span class="line">rabbitmq-server -detached   #后台运行rabbitmq  </span><br></pre></td></tr></table></div></figure>
<p>7)设置端口号，可供外部访问：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 15672 -j ACCEPT  </span><br></pre></td></tr></table></div></figure>
<p>8)添加用户和权限<br>默认网页guest用户是不允许访问的，需要增加一个用户修改一下权限，代码如下：</p>
<p>添加用户:rabbitmqctl add_user admin admin</p>
<p>添加权限:rabbitmqctl set_permissions -p “/“ admin “.<em>“ “.</em>“ “.*”</p>
<p>修改用户角色:rabbitmqctl set_user_tags admin administrator</p>
<p>然后就可以远程访问了，然后可直接配置用户权限等信息。</p>

        <h3 id="三、Docker下安装"   >
          <a href="#三、Docker下安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、Docker下安装" class="headerlink" title="三、Docker下安装"></a>三、Docker下安装</h3>
      
        <h4 id="3-1下载镜像"   >
          <a href="#3-1下载镜像" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1下载镜像" class="headerlink" title="3.1下载镜像"></a>3.1下载镜像</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.7.7-management</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2运行容器"   >
          <a href="#3-2运行容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2运行容器" class="headerlink" title="3.2运行容器"></a>3.2运行容器</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5671:5617 -p 5672:5672 -p 4369:4369 -p 15671:15671 -p 15672:15672 -p 25672:25672 --name rabbit-3.7.7 rabbitmq:3.7.7-management</span><br></pre></td></tr></table></div></figure>



        <h4 id="3-3进入容器"   >
          <a href="#3-3进入容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3进入容器" class="headerlink" title="3.3进入容器"></a>3.3进入容器</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbit-3.7.7 /bin/bash</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-4-下载延迟队列插件包-非必须"   >
          <a href="#3-4-下载延迟队列插件包-非必须" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-下载延迟队列插件包-非必须" class="headerlink" title="3.4.下载延迟队列插件包(非必须)"></a>3.4.下载延迟队列插件包(非必须)</h4>
      <blockquote>
<p>因为我们的 RabbitMQ 版本为 3.7.7 所以我们安装 3.7.x 版本的延迟队列插件</p>
</blockquote>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">wget：apt-get install -y wget</span><br><span class="line"></span><br><span class="line">wget https://dl.bintray.com/rabbitmq/community-plugins/3.7.x/rabbitmq_delayed_message_exchange/rabbitmq_delayed_message_exchange-20171201-3.7.x.zip</span><br><span class="line"></span><br><span class="line">apt-get install -y unzip</span><br><span class="line"></span><br><span class="line">解压插件包</span><br><span class="line">unzip rabbitmq_delayed_message_exchange-20171201-3.7.x.zip</span><br><span class="line">启动延迟队列插件</span><br><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line">退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></div></figure>

        <h4 id="3-5停止容器"   >
          <a href="#3-5停止容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5停止容器" class="headerlink" title="3.5停止容器"></a>3.5停止容器</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker stop rabbit-3.7.7</span><br></pre></td></tr></table></div></figure>



        <h4 id="3-6启动容器"   >
          <a href="#3-6启动容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-6启动容器" class="headerlink" title="3.6启动容器"></a>3.6启动容器</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker start rabbit-3.7.7</span><br></pre></td></tr></table></div></figure>


<p>访问<code>localhost:15672</code> RabbitMQ启动控制台</p>
<p><code>用户名</code>：guest </p>
<p><code>密码</code>：guest</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-c6969add5edc7e04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现延时消息队列</title>
    <url>/2022/05/08/RabbitMQ%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<blockquote>
<p>延时消息队列的应用场景颇为广泛，比如订单超时未支付的自动取消，超时未评价的自动好评等等。本文将介绍<code>RabbitMQ</code>中两种常用方式来实现延时消息队列</p>
</blockquote>

        <h3 id="一、安装"   >
          <a href="#一、安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3>
      <span id="more"></span>

]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实现消息的可靠性投递</title>
    <url>/2022/05/08/RabbitMQ%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/</url>
    <content><![CDATA[
        <h3 id="RabbitMQ实现消息投递可靠性"   >
          <a href="#RabbitMQ实现消息投递可靠性" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ实现消息投递可靠性" class="headerlink" title="RabbitMQ实现消息投递可靠性"></a>RabbitMQ实现消息投递可靠性</h3>
      <blockquote>
<p>rabbitmq的消息可靠性投递提现在两个方面，分别是生产者端和消费者端的可靠性控制</p>
</blockquote>
<span id="more"></span>


        <h4 id="1-生产者端"   >
          <a href="#1-生产者端" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-生产者端" class="headerlink" title="1.生产者端"></a>1.生产者端</h4>
      <blockquote>
<p>生产端可靠性一般通过confirm消息确认和Return消息机制</p>
</blockquote>

        <h5 id="1-1-confirm"   >
          <a href="#1-1-confirm" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-confirm" class="headerlink" title="1.1  confirm"></a>1.1  confirm</h5>
      <blockquote>
<p> 当生产者发送消息后，消息到达broker后就会进行confim回调，在回到中根据投递标签（Tag）进行消息的唯一确定。根据ack结果分为两种</p>
</blockquote>
<ul>
<li>true 标识消息正常投递，被broker接受</li>
<li>false 消息为正常投递 （可能因为内存、磁盘等原因导致）</li>
</ul>

        <h5 id="1-2-Return"   >
          <a href="#1-2-Return" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-Return" class="headerlink" title="1.2 Return"></a>1.2 Return</h5>
      <blockquote>
<p>当消息未找到exchange或routingkey不正确消息最终路由错误，这两种情况都会导致消息不可达，最终执行return回调  需要开启 <code>spring.rabbitmq.template.mandatory=true</code></p>
</blockquote>

        <h4 id="2-消费者端"   >
          <a href="#2-消费者端" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-消费者端" class="headerlink" title="2.消费者端"></a>2.消费者端</h4>
      <blockquote>
<p>消费端的ack是控制消息是否从broker进行正常消费，可以进行三种确认操作</p>
</blockquote>
<ul>
<li>ack</li>
<li>nack</li>
<li>reject</li>
</ul>
<p>其中<code>basicReject</code>、 <code>basicNack</code>的区别参考：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/fly_leopard/article/details/102821776" >https://blog.csdn.net/fly_leopard/article/details/102821776</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><em>注意</em>：要设置 关闭自动ack模式 改为手动<code>MANUAL</code></p>

        <h3 id="一、生产端可靠性解决方案"   >
          <a href="#一、生产端可靠性解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、生产端可靠性解决方案" class="headerlink" title="一、生产端可靠性解决方案"></a>一、生产端可靠性解决方案</h3>
      <blockquote>
<p>消息落库，对消息状态进行打标</p>
</blockquote>
<blockquote>
<p>实现本地消息表，对消息的状态进行标记，更改，定期抓取非正常状态的消息进行重新投递或补偿</p>
</blockquote>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/uPic/1240-20220508205944435.png"></p>
<ul>
<li>1.业务数据和消息数据同时写入数据库，此时消息状态为0标识投递中</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_SENDING</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_SEND_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_SEND_FAILURE</span> <span class="operator">=</span> <span class="string">&quot;2&quot;</span>;</span><br></pre></td></tr></table></div></figure>



<ul>
<li>2.上一步确保成功后，生产端发送消息到broker</li>
<li>3.broker通过confirm机制，回调confirm方法</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ConfirmCallback</span> <span class="variable">confirmCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">		System.err.println(<span class="string">&quot;correlationData: &quot;</span> + correlationData);</span><br><span class="line">		<span class="type">String</span> <span class="variable">messageId</span> <span class="operator">=</span> correlationData.getId();</span><br><span class="line">		<span class="keyword">if</span>(ack)&#123;</span><br><span class="line">			<span class="comment">//如果confirm返回成功 则进行更新</span></span><br><span class="line">			brokerMessageLogMapper.changeBrokerMessageLogStatus(messageId, Constants.ORDER_SEND_SUCCESS, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//失败则进行具体的后续操作:重试 或者补偿等手段</span></span><br><span class="line">			System.err.println(<span class="string">&quot;异常处理...&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>其中<code>brokerMessageLogMapper.changeBrokerMessageLogStatus</code>就是更改消息状态为投递成功</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;changeBrokerMessageLogStatus&quot;</span> &gt;</span></span><br><span class="line">  update broker_message_log bml</span><br><span class="line">  set bml.status = #&#123;status,jdbcType=VARCHAR&#125;,</span><br><span class="line">    	bml.update_time = #&#123;updateTime, jdbcType=TIMESTAMP&#125;</span><br><span class="line">  where bml.message_id = #&#123;messageId,jdbcType=VARCHAR&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></div></figure>



<ul>
<li>4.上一步如果成功，更改消息状态为1 代表消息投递成功，如果失败可以进行重试</li>
<li>5.通过定时任务抓取消息状态为0的消息，并且发送时间至少为5分钟以前的（防止新消息发送中导致误判）消息，进行重新发送</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(initialDelay = 3000, fixedDelay = 10000)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reSend</span><span class="params">()</span>&#123;</span><br><span class="line">		System.err.println(<span class="string">&quot;---------------定时任务开始---------------&quot;</span>);</span><br><span class="line">		<span class="comment">//pull status = 0 and timeout message </span></span><br><span class="line">		List&lt;BrokerMessageLog&gt; list = brokerMessageLogMapper.query4StatusAndTimeoutMessage();</span><br><span class="line">		list.forEach(messageLog -&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span>(messageLog.getTryCount() &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">				<span class="comment">//update fail message </span></span><br><span class="line">				brokerMessageLogMapper.changeBrokerMessageLogStatus(messageLog.getMessageId(), Constants.ORDER_SEND_FAILURE, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// resend </span></span><br><span class="line">				brokerMessageLogMapper.update4ReSend(messageLog.getMessageId(),  <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">				<span class="type">Order</span> <span class="variable">reSendOrder</span> <span class="operator">=</span> FastJsonConvertUtil.convertJSONToObject(messageLog.getMessage(), Order.class);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					rabbitOrderSender.sendOrder(reSendOrder);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">					System.err.println(<span class="string">&quot;-----------异常处理-----------&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></div></figure>



<ul>
<li><ol start="6">
<li>每次重新发送的时候，更改消息表中的重试次数+1</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line">brokerMessageLogMapper.update4ReSend()</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update4ReSend&quot;</span> &gt;</span></span><br><span class="line">    update broker_message_log bml</span><br><span class="line">    set bml.try_count = bml.try_count + 1,</span><br><span class="line">      bml.update_time = #&#123;updateTime, jdbcType=TIMESTAMP&#125;</span><br><span class="line">    where bml.message_id = #&#123;messageId,jdbcType=VARCHAR&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<ul>
<li><ol start="7">
<li>判断重试次数大于上限时比如3次 更改消息状态为2 标识消息投递失败（这个一般就是机器或程序不可抗因素，需要人工补偿了）</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">brokerMessageLogMapper.changeBrokerMessageLogStatus()方法就是将消息状态改为投递失败，最终进行补偿</span><br></pre></td></tr></table></div></figure>

<p>  另外可以利用return机制进行不可达消息的追踪，具体规则根据业务而定</p>
<p>二、消费端可靠性解决方案</p>
<ul>
<li>由于业务异常，可以进行日志记录，然后进行补偿</li>
<li>由于服务器宕机等严重问题，那么就需要手动ack保证消费成功（一般都是手动ack）</li>
<li>可以根据业务设置消息是否重回队列</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOrderMessage</span><span class="params">(<span class="meta">@Payload</span> com.bfxy.springboot.entity.Order order, Channel channel, </span></span><br><span class="line"><span class="params">		<span class="meta">@Headers</span> Map&lt;String, Object&gt; headers)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">Long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> (Long)headers.get(AmqpHeaders.DELIVERY_TAG);</span><br><span class="line">	<span class="comment">//手工ACK</span></span><br><span class="line">	channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ核心概念</title>
    <url>/2019/09/06/RabbitMQ%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>[toc]</p>

        <h3 id="一、简介"   >
          <a href="#一、简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3>
      
        <h4 id="1-1什么是AMQP"   >
          <a href="#1-1什么是AMQP" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1什么是AMQP" class="headerlink" title="1.1什么是AMQP"></a>1.1什么是AMQP</h4>
      <blockquote>
<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件同产品，不同的开发语言等条件的限制。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>
</blockquote>
<span id="more"></span>

        <h4 id="1-2-什么是RabbitMQ"   >
          <a href="#1-2-什么是RabbitMQ" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-什么是RabbitMQ" class="headerlink" title="1.2 什么是RabbitMQ"></a>1.2 什么是RabbitMQ</h4>
      <blockquote>
<p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。</p>
</blockquote>

        <h4 id="1-3-RabbitMQ-的特点"   >
          <a href="#1-3-RabbitMQ-的特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-RabbitMQ-的特点" class="headerlink" title="1.3 RabbitMQ 的特点"></a>1.3 RabbitMQ 的特点</h4>
      <blockquote>
<p>RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：</p>
</blockquote>
<ul>
<li>可靠性（Reliability）：RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认</li>
<li>灵活的路由（Flexible Routing）：在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange</li>
<li>消息集群（Clustering）：多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker</li>
<li>高可用（Highly Available Queues）：队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用</li>
<li>多种协议（Multi-protocol）：RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等</li>
<li>多语言客户端（Many Clients）：RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等</li>
<li>管理界面（Management UI）：RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面</li>
<li>跟踪机制（Tracing）：如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么</li>
<li>插件机制（Plugin System）：RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件
        <h4 id="1-4-RabbitMQ-的基本概念"   >
          <a href="#1-4-RabbitMQ-的基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-RabbitMQ-的基本概念" class="headerlink" title="1.4 RabbitMQ 的基本概念"></a>1.4 RabbitMQ 的基本概念</h4>
      下面展示了RabbitMQ 消息的过程<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-8f76fa47e49bf330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></li>
</ul>

        <h5 id="1-4-1-生产者与消费者"   >
          <a href="#1-4-1-生产者与消费者" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-1-生产者与消费者" class="headerlink" title="1.4.1 生产者与消费者"></a>1.4.1 生产者与消费者</h5>
      <blockquote>
<p>与其它的消息中间件一样，RabbitMQ中包含消息生产者和消息消费者，生产者创建消息发布到代理服务器，消费者从代理服务器获取消息。在实际应用中，生产者和消费者之间的角色是可以相互转换的。</p>
</blockquote>

        <h5 id="1-4-2-消息"   >
          <a href="#1-4-2-消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-2-消息" class="headerlink" title="1.4.2 消息"></a>1.4.2 消息</h5>
      <blockquote>
<p>消息由有效载荷（payload）和标签（label）组成。有效载荷就是你想要传输的数据，可以是任何内容，一个数组，一个集合，甚至二进制数据都可以。而标签描述了有效载荷，由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。</p>
</blockquote>

        <h5 id="1-4-3-信道"   >
          <a href="#1-4-3-信道" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-3-信道" class="headerlink" title="1.4.3 信道"></a>1.4.3 信道</h5>
      <blockquote>
<p>多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内地虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</p>
</blockquote>

        <h5 id="1-4-4-交换器与绑定-原文"   >
          <a href="#1-4-4-交换器与绑定-原文" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-4-交换器与绑定-原文" class="headerlink" title="1.4.4 交换器与绑定(原文)"></a>1.4.4 交换器与绑定(原文)</h5>
      <p>交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息，在启用ack模式后，交换机找不到队列会返回错误。交换机有四种类型：</p>
<ul>
<li><p>fanout：把所有发送到该Exchange的消息路由到所有与它绑定的Queue中</p>
</li>
<li><p>direct：把消息路由到bindingKey与routingKey完全匹配的Queue中</p>
</li>
<li><p>topic：把消息路由到bindingKey与routingKey模糊匹配的Queue中</p>
</li>
<li><p>headers：headers类型的Exchange不依赖于routingKey与bindingKey的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配</p>

        <h6 id="1-4-4-1Fanout"   >
          <a href="#1-4-4-1Fanout" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-4-1Fanout" class="headerlink" title="1.4.4.1Fanout"></a>1.4.4.1Fanout</h6>
      <p><img   src="https://upload-images.jianshu.io/upload_images/8387919-cff03f8e2246ffc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>生产者（P）发送到Exchange（X）的所有消息都会路由到图中的两个Queue，并最终被两个消费者（C1与C2）消费</p>
</li>
<li><p>如果配置了routing_key会被忽略</p>

        <h6 id="1-4-4-2-direct"   >
          <a href="#1-4-4-2-direct" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-4-2-direct" class="headerlink" title="1.4.4.2 direct"></a>1.4.4.2 direct</h6>
      <p><img   src="https://upload-images.jianshu.io/upload_images/8387919-1be568576fb16bc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>routingKey=”error”发送消息，则会同时路由到Queue1（amqp.gen-S9b…）和Queue2（amqp.gen-Agl…）</p>
</li>
<li><p>routingKey=”info”或routingKey=”warning”发送消息，则只会路由到Queue2</p>
</li>
<li><p>以其它routingKey发送消息，则不会路由到这两个Queue中</p>

        <h6 id="1-4-4-3-topic"   >
          <a href="#1-4-4-3-topic" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-4-3-topic" class="headerlink" title="1.4.4.3 topic"></a>1.4.4.3 topic</h6>
      <p><img   src="https://upload-images.jianshu.io/upload_images/8387919-3e143f1ea7ded15d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>routingKey=”quick.orange.rabbit”发送信息，则会同时路由到Q1与Q2</p>
</li>
<li><p>routingKey=”lazy.orange.fox”发送信息，则只会路由到Q1</p>
</li>
<li><p>routingKey=”lazy.brown.fox”发送消息，则只会路由到Q2</p>
</li>
<li><p>routingKey=”lazy.pink.rabbit”发送消息，则只会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）</p>
</li>
<li><p>routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”发送消息，则会被丢弃，它们并没有匹配任何bindingKey</p>

        <h6 id="1-4-4-4-header"   >
          <a href="#1-4-4-4-header" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-4-4-4-header" class="headerlink" title="1.4.4.4 header"></a>1.4.4.4 header</h6>
      <p>headers类型的Exchange不依赖于routingKey与bindingKey的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对；当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对；如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。</p>

        <h4 id="1-5-虚拟主机"   >
          <a href="#1-5-虚拟主机" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-5-虚拟主机" class="headerlink" title="1.5 虚拟主机"></a>1.5 虚拟主机</h4>
      <p>一个虚拟主机持有一组交换机、队列和绑定。为什么需要多个虚拟主机呢？很简单，RabbitMQ当中，用户只能在虚拟主机的粒度进行权限控制。 因此，如果需要禁止A组访问B组的交换机/队列/绑定，必须为A和B分别创建一个虚拟主机。每一个RabbitMQ服务器都有一个默认的虚拟主机“/”</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis实现轻量级消息队列</title>
    <url>/2020/04/17/Redis%E5%AE%9E%E7%8E%B0%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<blockquote>
<p>对于小型项目想使用消息队列进行消息分发时，如果单独加一个中间件，显然有点太浪费，毕竟还得考虑消息中间件本身高可用，所以Redis变得更加适合</p>
</blockquote>

        <h3 id="1-引入依赖"   >
          <a href="#1-引入依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure>
<span id="more"></span>


        <h3 id="2-配置"   >
          <a href="#2-配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    # 连接超时时间（记得添加单位，Duration）</span><br><span class="line">    timeout: 10000ms</span><br><span class="line">    # Redis默认情况下有16个分片，这里配置具体使用的分片</span><br><span class="line">    # database: 0</span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        # 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br><span class="line">        max-active: 8</span><br><span class="line">        # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span><br><span class="line">        max-wait: -1ms</span><br><span class="line">        # 连接池中的最大空闲连接 默认 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        # 连接池中的最小空闲连接 默认 0</span><br><span class="line">        min-idle: 0</span><br></pre></td></tr></table></div></figure>

<hr>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Redis订阅频道属性类</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2020-03-01 20:46</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class RedisListenerBean &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER = LoggerFactory.getLogger(RedisListenerBean.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * redis消息监听器容器</span><br><span class="line">     * 可以添加多个监听不同话题的redis监听器，只需要把消息监听器和相应的消息订阅处理器绑定，该消息监听器</span><br><span class="line">     * 通过反射技术调用消息订阅处理器的相关方法进行一些业务处理</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory, MessageListenerAdapter listenerAdapter) &#123;</span><br><span class="line">        RedisMessageListenerContainer container = new RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        // 监听msgToAll</span><br><span class="line">        container.addMessageListener(listenerAdapter, new PatternTopic(&quot;REDIS_TOPIC&quot;));</span><br><span class="line">        LOGGER.info(&quot;Subscribed Redis channel: &quot; + &quot;REDIS_TOPIC&quot;);</span><br><span class="line">        return container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<hr>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Redis订阅频道处理类</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2020-03-01 20:44</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class RedisListenerHandle extends MessageListenerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER = LoggerFactory.getLogger(RedisListenerHandle.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收到监听消息</span><br><span class="line">     * @param message</span><br><span class="line">     * @param bytes</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(Message message, byte[] bytes) &#123;</span><br><span class="line">        byte[] body = message.getBody();</span><br><span class="line">        byte[] channel = message.getChannel();</span><br><span class="line">        String rawMsg;</span><br><span class="line">        String topic;</span><br><span class="line">        try &#123;</span><br><span class="line">            rawMsg = redisTemplate.getStringSerializer().deserialize(body);</span><br><span class="line">            topic = redisTemplate.getStringSerializer().deserialize(channel);</span><br><span class="line">            LOGGER.info(&quot;Received raw message from topic:&quot; + topic + &quot;, raw message content：&quot; + rawMsg);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



        <h3 id="3-编写controller"   >
          <a href="#3-编写controller" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-编写controller" class="headerlink" title="3.编写controller"></a>3.编写controller</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/redis&quot;)</span><br><span class="line">  public void redisTest() &#123;</span><br><span class="line">      redisTemplate.convertAndSend(&quot;REDIS_TOPIC&quot;, &quot;发送redis消息&quot; + UUID.fastUUID());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="4-测试"   >
          <a href="#4-测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">控制台输出：</span><br><span class="line">Received raw message from topic:REDIS_TOPIC, raw message content：发送redis消息b0b129aa-9669-44d8-9fb3-7b41281fadb7</span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Bean循环依赖</title>
    <url>/2022/05/08/Spring-Bean%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[
        <h2 id="Spring中的循环依赖"   >
          <a href="#Spring中的循环依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring中的循环依赖" class="headerlink" title="Spring中的循环依赖"></a>Spring中的循环依赖</h2>
      <blockquote>
<p>面试必备</p>
</blockquote>
<span id="more"></span>


        <h3 id="循环依赖"   >
          <a href="#循环依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3>
      <p>Spring<code>循环依赖</code>就是循环引用，比如两个bean A和B 两者之间相互引用对方，或者说两者相互持有对方的引用。最终形成一个<code>环</code>。</p>

        <h3 id="场景分析"   >
          <a href="#场景分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3>
      <p>spring中bean的注入方式有两种：<code>Setter</code>和<code>Constractor</code>注入(还有一种，接口注入基本不怎么用了),另外，bean的作用于也有多种（5中）singleton、property、reuest、session、application。Spring也不能对以上每种情况都可以进行循环依赖的处理。具体来说，值对于单例的setter注入bean可以处理。</p>

        <h4 id="1-原型-Prototype"   >
          <a href="#1-原型-Prototype" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-原型-Prototype" class="headerlink" title="1.原型(Prototype)"></a>1.原型(Prototype)</h4>
      <p>不支持，直接抛出<code>BeanCurrentlyInCreationException</code>，原因是 <code>Spring</code> 容器对原型作用域的 <code>bean</code> 是不进行缓存，因此无法提前暴露一个创建中的 <code>bean</code>，所以也是无法解决这种情况的循环依赖。</p>

        <h4 id="2-构造器-Constractor"   >
          <a href="#2-构造器-Constractor" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-构造器-Constractor" class="headerlink" title="2.构造器(Constractor)"></a>2.构造器(Constractor)</h4>
      <p>同样不支持，也会抛出<code>BeanCurrentlyInCreationException</code>，原因也很简单</p>

        <h3 id="3-单例setter"   >
          <a href="#3-单例setter" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-单例setter" class="headerlink" title="3.单例setter"></a>3.单例setter</h3>
      <blockquote>
<p>首先确定的是单例作用下的setter注入的循环依赖spring是可以已解决的</p>
</blockquote>

        <h5 id="单例的特点"   >
          <a href="#单例的特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#单例的特点" class="headerlink" title="单例的特点"></a>单例的特点</h5>
      <ol>
<li>提前实例化 <code>bean</code>，将有问题的配置问题提前暴露</li>
<li>将 <code>bean</code> 实例放入单例缓存 <code>singletonFactories</code> 中，当需要再次使用时，直接从缓存中取，加快了运行效率。</li>
</ol>
<p>那么spring是如何解决的呢</p>

        <h3 id="源码解析"   >
          <a href="#源码解析" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3>
      <p>在类的加载中，核心方法 <code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean</code>，在这一步中有对循环依赖的校验和处理。</p>
<p>跟进去方法能够发现，如果 <code>bean</code> 是单例，并且允许循环依赖，那么可以通过提前暴露一个单例工厂方法，从而使其他 <code>bean</code> 能引用到，最终解决循环依赖的问题。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instantiate the bean.</span></span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            instanceWrapper = <span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">            instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance();</span><br><span class="line">        Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">        <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">            mbd.resolvedTargetType = beanType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                            <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">                mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">        <span class="comment">// 是否需要提前进行初始化，用于之后解决循环依赖</span></span><br><span class="line">        <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">earlySingletonExposure</span> <span class="operator">=</span> (mbd.isSingleton() &amp;&amp; <span class="built_in">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                        <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 解决循环依赖 第二个参数是回调接口，实现的功能是将切面动态织入 bean</span></span><br><span class="line">            addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize the bean instance. 实例化bean</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 填充属性</span></span><br><span class="line">            populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">            exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">                        mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">earlySingletonReference</span> <span class="operator">=</span> getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (earlySingletonReference != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                    exposedObject = earlySingletonReference;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                    String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                    Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(dependentBeans.length);</span><br><span class="line">                    <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                            actualDependentBeans.add(dependentBean);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName,</span><br><span class="line">                                <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> +</span><br><span class="line">                                StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register bean as disposable.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exposedObject;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>

<hr>
<ul>
<li><code>addSingletonFactory</code>方法</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">protected void addSingletonFactory(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">   Assert.notNull(singletonFactory, &quot;Singleton factory must not be null&quot;);</span><br><span class="line">   synchronized (this.singletonObjects) &#123;</span><br><span class="line">           // 判断 singletonObjects 不存在 beanName</span><br><span class="line">      if (!this.singletonObjects.containsKey(beanName)) &#123;</span><br><span class="line">          //放入 beanName -&gt; beanFactory，到时在 getSingleton() </span><br><span class="line">          //获取单例时，可直接获取创建对应 bean 的工厂，解决循环依赖</span><br><span class="line">         this.singletonFactories.put(beanName, singletonFactory);</span><br><span class="line">         //从提前声明的缓存中移除，之前在 getSingleton() 放入的</span><br><span class="line">         this.earlySingletonObjects.remove(beanName);</span><br><span class="line">         //往注册缓存中添加 beanName</span><br><span class="line">         this.registeredSingletons.add(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>另外，Spring内部维护了三个<strong>Map</strong>，也常被成为缓存</p>
<p>在<code>DefaultSingletonBeanRegistry</code>类中：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Cache of singleton objects: bean name to bean instance. 单例池*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cache of singleton factories: bean name to ObjectFactory. 映射创建Bean的原始工厂*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Cache of early singleton objects: bean name to bean instance. 映射Bean的早期引用*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br></pre></td></tr></table></div></figure>

<ul>
<li><p>singletonObjects</p>
<p>用于保存 <code>BeanName</code> 和创建 <code>bean</code> 实例之间的关系，<code>bean-name</code> –&gt; <code>instanct</code></p>
</li>
<li><p>singletonFactories</p>
<p>用于保存 <code>BeanName</code> 和创建 <code>bean</code> 的 <strong>工厂</strong> 之间的关系，<code>bean-name</code> –&gt; <code>objectFactory</code></p>
</li>
<li><p>earlySingletonObjects</p>
<p>也是保存 <code>beanName</code> 和创建 <code>bean</code> 实例之间的关系，与 <code>singletonObjects</code> 的<strong>不同之处在于</strong>，当一个单例 <code>bean</code> 被放入到这里之后，那么其他 <code>bean</code> 在创建过程中，就能通过 <code>getBean</code> 方法获取到，<strong>目的是用来检测循环引用</strong></p>
</li>
</ul>
<p>后两个Map其实是“<strong>垫脚石</strong>”级别的，只是创建Bean的时候，用来借助了一下，创建完成就清掉了。</p>

        <h3 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>
      <p>假设有两个bean CircleA<code>和</code>CircleB 并循环依赖，他们初始化的过程如下：</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-364b91d308bcded1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<ol>
<li>创建 <code>beanA</code>，先记录对应的 <code>beanName</code> 然后将 <code>beanA</code> 的<strong>创建工厂 beanFactoryA</strong> 放入缓存中</li>
<li>对 <code>beanA</code> 的属性填充方法 <code>populateBean</code>，检查到依赖 <code>beanB</code>，缓存中没有 <code>beanB</code> 的实例或者单例缓存，于是要去实例化 <code>beanB</code>。</li>
<li>开始实例化 <code>beanB</code>，经历创建 <code>beanA</code> 的过程，到了属性填充方法，检查到依赖了 <code>beanA</code>。</li>
<li>调用 <code>getBean(A)</code> 方法，在这个函数中，不是真正去实例化 <code>beanA</code>，而是先去检测缓存中是否有已经创建好的对应的 <code>bean</code>，或者已经创建好的 <code>beanFactory</code></li>
<li>检测到 <code>beanFactoryA</code> 已经创建好了，而是直接调用 <code>ObjectFactory</code> 去创建 <code>beanA</code></li>
</ol>

        <h3 id="结合关键代码梳理流程"   >
          <a href="#结合关键代码梳理流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#结合关键代码梳理流程" class="headerlink" title="结合关键代码梳理流程"></a>结合关键代码梳理流程</h3>
      
        <h4 id="创建原始-bean"   >
          <a href="#创建原始-bean" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建原始-bean" class="headerlink" title="创建原始 bean"></a>创建原始 bean</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">BeanWrapper instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">// 原始 bean</span><br><span class="line">final Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></div></figure>

<p>在这一步中，创建的是原始 <code>bean</code>，因为还没到最后一步属性解析，所以这个类里面没有属性值，可以将它想象成 <code>new ClassA</code>，同时没有构造函数等赋值的操作，这个原始 <code>bean</code> 信息将会在下一步使用到。</p>
<hr>

        <h4 id="addSingleFactory"   >
          <a href="#addSingleFactory" class="heading-link"><i class="fas fa-link"></i></a><a href="#addSingleFactory" class="headerlink" title="addSingleFactory"></a>addSingleFactory</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">// 注释 5.2 解决循环依赖 第二个参数是回调接口，实现的功能是将切面动态织入 bean</span><br><span class="line">addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">复制代码</span><br></pre></td></tr></table></div></figure>

<p>前面也提到过这个方法，它会将需要提前曝光的单例加入到缓存中，将单例的 <code>beanName</code> 和 <code>beanFactory</code> 加入到缓存，在之后需要用到的时候，直接从缓存中取出来。</p>
<hr>

        <h4 id="populateBean-填充属性"   >
          <a href="#populateBean-填充属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#populateBean-填充属性" class="headerlink" title="populateBean 填充属性"></a>populateBean 填充属性</h4>
      <p>刚才第一步时也说过了，一开始创建的只是初始 <code>bean</code>，没有属性值，所以在这一步会解析类的属性。在属性解析时，会判断属性的类型，如果判断到是 <code>RuntimeBeanReference</code> 类型，将会解析引用。</p>
<p>就像我们写的例子，<code>CircleA</code> 引用了 <code>CircleB</code>，在加载 <code>CircleA</code>时，发现 <code>CircleB</code> 依赖，于是乎就要去加载 <code>CircleB</code>。</p>
<p>我们来看下代码中的具体流程吧：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) &#123;</span><br><span class="line">    ...</span><br><span class="line">    if (pvs != null) &#123;</span><br><span class="line">        // 将属性应用到 bean 中，使用深拷贝，将子类的属性一并拷贝</span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) &#123;</span><br><span class="line">    ...</span><br><span class="line">    String propertyName = pv.getName();</span><br><span class="line">    Object originalValue = pv.getValue();</span><br><span class="line">    // 注释 5.5 解析参数，如果是引用对象，将会进行提前加载</span><br><span class="line">    Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Object resolveValueIfNecessary(Object argName, @Nullable Object value) &#123;</span><br><span class="line">    // 我们必须检查每个值，看看它是否需要一个运行时引用，然后来解析另一个 bean</span><br><span class="line">    if (value instanceof RuntimeBeanReference) &#123;</span><br><span class="line">        // 注释 5.6 在这一步中，如果判断是引用类型，需要解析引用，加载另一个 bean</span><br><span class="line">        RuntimeBeanReference ref = (RuntimeBeanReference) value;</span><br><span class="line">        return resolveReference(argName, ref);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></div></figure>

<p>跟踪到这里，加载引用的流程比较清晰了，发现是引用类的话，最终会委派 <code>org.springframework.beans.factory.support.BeanDefinitionValueResolver#resolveReference</code> 进行引用处理，核心的两行代码如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">// 注释 5.7 在这里加载引用的 bean</span><br><span class="line">bean = this.beanFactory.getBean(refName);</span><br><span class="line">this.beanFactory.registerDependentBean(refName, this.beanName);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></div></figure>

<p>在这一步进行 <code>CircleB</code> 的加载，但是我们写的例子中，<code>CircleB</code> 依赖了 <code>CircleA</code>，那它是如何处理的呢，所以这时，我们刚才将 <code>CircleA</code> 放入到缓存中的信息就起到了作用。</p>
<hr>

        <h4 id="getSingleton"   >
          <a href="#getSingleton" class="heading-link"><i class="fas fa-link"></i></a><a href="#getSingleton" class="headerlink" title="getSingleton"></a>getSingleton</h4>
      <p>还记得之前在类加载时学到的只是么，单例模式每次加载都是取同一个对象，如果在缓存中有，可以直接取出来，在缓存中没有的话才进行加载，所以再来熟悉一下取单例的方法：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">protected Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">    Object singletonObject = this.singletonObjects.get(beanName);</span><br><span class="line">    // 检查缓存中是否存在实例</span><br><span class="line">    if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        // 记住，公共变量都需要加锁操作，避免多线程并发修改</span><br><span class="line">        synchronized (this.singletonObjects) &#123;</span><br><span class="line">            // 如果此 bean 正在加载则不处理</span><br><span class="line">            singletonObject = this.earlySingletonObjects.get(beanName);</span><br><span class="line">            if (singletonObject == null &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                // 当某些方法需要提前初始化，调用 addSingletonFactory 方法将对应的</span><br><span class="line">                // objectFactory 初始化策略存储在 earlySingletonObjects，并且从 singletonFactories 移除</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);</span><br><span class="line">                if (singletonFactory != null) &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    this.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    this.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return singletonObject;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></div></figure>

<p>虽然 <code>CircleB</code> 引用了 <code>CircleA</code>，但在之前的方法 <code>addSingletonFactory</code> 时，<code>CircleA</code> 的 <code>beanFactory</code> 就提前暴露。</p>
<p>所以 <code>CircleB</code> 在获取单例 <code>getSingleton()</code> 时，能够拿到 <code>CircleA</code> 的信息，所以 <code>CircleB</code> 顺利加载完成，同时将自己的信息加入到缓存和注册表中，接着返回去继续加载 <code>CircleA</code>，由于它的依赖已经加载到缓存中，所以 <code>CircleA</code> 也能够顺利完成加载，最终整个加载操作完成~</p>
<p>说白了就是先只是简单构造对象，然后将beanfactory中的bean再进行二次处理，设置对应属性</p>

        <h4 id="参考文档"   >
          <a href="#参考文档" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/5e927e27f265da47c8012ed9" >https://juejin.im/post/5e927e27f265da47c8012ed9</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Admin2.0集成</title>
    <url>/2019/09/01/Spring-Boot-Admin2-0%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[
        <h3 id="方式一"   >
          <a href="#方式一" class="heading-link"><i class="fas fa-link"></i></a><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3>
      <p>在 Spring Boot 项目中，Spring Boot Admin 作为 Server 端，其他的要被监控的应用作为 Client 端，基于这种的配置如下步骤：</p>
<span id="more"></span>


        <h4 id="AdminServer"   >
          <a href="#AdminServer" class="heading-link"><i class="fas fa-link"></i></a><a href="#AdminServer" class="headerlink" title="AdminServer"></a>AdminServer</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></div></figure>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8788</span><br></pre></td></tr></table></div></figure>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableAdminServer</span><br><span class="line">public class AdminServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(AdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h4 id="AdminClient"   >
          <a href="#AdminClient" class="heading-link"><i class="fas fa-link"></i></a><a href="#AdminClient" class="headerlink" title="AdminClient"></a>AdminClient</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      client:</span><br><span class="line">        url: &quot;http://localhost:8788&quot;</span><br><span class="line">  application:</span><br><span class="line">    name: admin-client</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: always</span><br></pre></td></tr></table></div></figure>
<ul>
<li> <code>spring.boot.admin.client.url </code>:要注册的Spring Boot Admin Server的URL</li>
<li> <code>management.endpoints.web.exposure.include</code>：与Spring Boot 2一样，默认情况下，大多数actuator的端口都不会通过http公开，* 代表公开所有这些端点。对于生产环境，应该仔细选择要公开的端点。<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class AdminClientApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(AdminClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
启动两个工程，在浏览器上输入localhost:8788<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-7db2a9fb795d46c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br><img   src="https://upload-images.jianshu.io/upload_images/8387919-1e142a053fe11f22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></li>
</ul>

        <h3 id="方式二-集成-Eureka"   >
          <a href="#方式二-集成-Eureka" class="heading-link"><i class="fas fa-link"></i></a><a href="#方式二-集成-Eureka" class="headerlink" title="方式二 集成 Eureka"></a>方式二 集成 Eureka</h3>
      <p>在 Spring Cloud 中基于 Eureka 的 Spring Boot Admin 的搭建：</p>

        <h4 id="1-启动Eureka-端口8761"   >
          <a href="#1-启动Eureka-端口8761" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-启动Eureka-端口8761" class="headerlink" title="1.启动Eureka,端口8761"></a>1.启动Eureka,端口8761</h4>
      
        <h4 id="2-新建-module（springboot-admin）"   >
          <a href="#2-新建-module（springboot-admin）" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-新建-module（springboot-admin）" class="headerlink" title="2.新建 module（springboot-admin）"></a>2.新建 module（springboot-admin）</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jolokia&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jolokia-core&lt;/artifactId&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

        <h3 id="3-启动类添加注解"   >
          <a href="#3-启动类添加注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-启动类添加注解" class="headerlink" title="3.启动类添加注解"></a>3.启动类添加注解</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@EnableAdminServer</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class SpringBootAdminApplication &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Profile(&quot;insecure&quot;)</span><br><span class="line">    @Configuration</span><br><span class="line">    public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">            http.authorizeRequests().anyRequest().permitAll()//</span><br><span class="line">                    .and().csrf().disable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Profile(&quot;secure&quot;)</span><br><span class="line">    @Configuration</span><br><span class="line">    public static class SecuritySecureConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">        private final String adminContextPath;</span><br><span class="line"> </span><br><span class="line">        public SecuritySecureConfig(AdminServerProperties adminServerProperties) &#123;</span><br><span class="line">            this.adminContextPath = adminServerProperties.getContextPath();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        @Override</span><br><span class="line">        protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">            // @formatter:off</span><br><span class="line">            SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">            successHandler.setTargetUrlParameter(&quot;redirectTo&quot;);</span><br><span class="line"> </span><br><span class="line">            http.authorizeRequests()</span><br><span class="line">                    .antMatchers(adminContextPath + &quot;/assets/**&quot;).permitAll()</span><br><span class="line">                    .antMatchers(adminContextPath + &quot;/login&quot;).permitAll()</span><br><span class="line">                    .anyRequest().authenticated()</span><br><span class="line">                    .and()</span><br><span class="line">                    .formLogin().loginPage(adminContextPath + &quot;/login&quot;).successHandler(successHandler).and()</span><br><span class="line">                    .logout().logoutUrl(adminContextPath + &quot;/logout&quot;).and()</span><br><span class="line">                    .httpBasic().and()</span><br><span class="line">                    .csrf().disable();</span><br><span class="line">            // @formatter:on</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>SecurityPermitAllConfig和SecuritySecureConfig的配置是 Spring Boot Admin 官方给的配置，是对 url 进行安全认证等配置，照着配置即可。@EnableEurekaClient 注解是把 Spring Boot Admin 注册到 Eureka 里，这样 Spring Boot Admin 就可以发现注册到 Eureka 里的其他服务实例，@EnableAdminServer 注解是开启监控功能。</p>

        <h4 id="4-配置文件"   >
          <a href="#4-配置文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-配置文件" class="headerlink" title="4.配置文件"></a>4.配置文件</h4>
      <p><code>resource</code>目录下新建<code>bootstrap.yaml</code>文件：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-admin</span><br><span class="line">  profiles:</span><br><span class="line">    active:</span><br><span class="line">      - secure</span><br><span class="line">server:</span><br><span class="line">  port: 8788</span><br><span class="line"></span><br><span class="line"># tag::configuration-eureka[]</span><br><span class="line">eureka:   #&lt;1&gt;</span><br><span class="line">  instance:</span><br><span class="line">    leaseRenewalIntervalInSeconds: 10</span><br><span class="line">    health-check-url-path: /actuator/health</span><br><span class="line">  client:</span><br><span class="line">    registryFetchIntervalSeconds: 5</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: $&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;  #&lt;2&gt;</span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: ALWAYS</span><br><span class="line"># end::configuration-eureka[]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: insecure</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: secure</span><br><span class="line">  security:</span><br><span class="line">    user:</span><br><span class="line">      name: &quot;user&quot;</span><br><span class="line">      password: &quot;password&quot;</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.163.com</span><br><span class="line">    username: ***@163.com # 用户名</span><br><span class="line">    password: *******</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      notify:</span><br><span class="line">        mail:</span><br><span class="line">          from: ***@163.com # 发件人</span><br><span class="line">          to: ***@qq.com # 收件人</span><br><span class="line">          enabled: true</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    metadata-map:</span><br><span class="line">      user.name: $&#123;spring.security.user.name&#125;        #These two are needed so that the server</span><br><span class="line">      user.password: $&#123;spring.security.user.password&#125; #can access the protected client endpoints</span><br></pre></td></tr></table></div></figure>

        <h4 id="5-启动-spring-boot-admin-服务"   >
          <a href="#5-启动-spring-boot-admin-服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-启动-spring-boot-admin-服务" class="headerlink" title="5.启动 spring boot admin 服务"></a>5.启动 spring boot admin 服务</h4>
      <p>此时由于 Eureka 里只有 Spring Boot Admin 自身已注册，所以其监控列表里只有自己，下面我们启动其他的服务，让其注册到 Eureka 里。</p>

        <h4 id="启动-spring-demo-service-服务"   >
          <a href="#启动-spring-demo-service-服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动-spring-demo-service-服务" class="headerlink" title="启动 spring-demo-service 服务"></a>启动 spring-demo-service 服务</h4>
      <p>Actuator 在 spring boot 2.0 版本后，只暴露了两个端点，所以此时启动，监控不到所需的信息</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8281</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      # 向每个注册中心注册</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-demo-service</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#x27;*&#x27;</span><br><span class="line">  endpoint:</span><br><span class="line">      health:</span><br><span class="line">        show-details: ALWAYS</span><br></pre></td></tr></table></div></figure>
<p>此时启动 spring-demo-service，发现监控列表里 spring-demo-service 已经有了<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-f7828c3dcb64a4fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br><img   src="https://upload-images.jianshu.io/upload_images/8387919-0a55720984e25ca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br><img   src="https://upload-images.jianshu.io/upload_images/8387919-554e177eef7f3fb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h3 id="集成邮件通知"   >
          <a href="#集成邮件通知" class="heading-link"><i class="fas fa-link"></i></a><a href="#集成邮件通知" class="headerlink" title="集成邮件通知"></a>集成邮件通知</h3>
      
        <h4 id="1-引入依赖"   >
          <a href="#1-引入依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure>

        <h4 id="2-添加配置"   >
          <a href="#2-添加配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-添加配置" class="headerlink" title="2.添加配置"></a>2.添加配置</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.163.com</span><br><span class="line">    username: 18802953162@163.com # 用户名</span><br><span class="line">    password: hao4267364</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      notify:</span><br><span class="line">        mail:</span><br><span class="line">          from: 18802953162@163.com # 发件人</span><br><span class="line">          to: 245682819@qq.com # 收件人</span><br><span class="line">          enabled: true</span><br><span class="line">eureka:spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.163.com</span><br><span class="line">    username:  ***@163.com # 用户名</span><br><span class="line">    password:  ***</span><br><span class="line">  boot:</span><br><span class="line">    admin:</span><br><span class="line">      notify:</span><br><span class="line">        mail:</span><br><span class="line">          from: ***@163.com # 发件人</span><br><span class="line">          to:  ***@qq.com # 收件人</span><br><span class="line">          enabled: true</span><br><span class="line">eureka:</span><br></pre></td></tr></table></div></figure>
<p>配置后，重启sc-admin-server工程，之后若出现注册的客户端的状态从 UP 变为 OFFLINE 或其他状态，服务端就会自动将电子邮件发送到上面配置的收件地址。<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-77f8d378ab713091.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p>注意 : 配置了邮件通知后，会出现 反复通知 service offline / up。这个问题的原因在于 查询应用程序的状态和信息超时，下面给出两种解决方案：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">#方法一：增加超时时间（单位:ms）</span><br><span class="line">spring.boot.admin.monitor.read-timeout=20000</span><br><span class="line">#方法二：关闭闭未使用或不重要的检查点</span><br><span class="line">management.health.db.enabled=false</span><br><span class="line">management.health.mail.enabled=false</span><br><span class="line">management.health.redis.enabled=false</span><br><span class="line">management.health.mongo.enabled=false</span><br></pre></td></tr></table></div></figure>

        <h3 id="参考博文"   >
          <a href="#参考博文" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/hubo_88/article/details/80671192" >Spring Boot Admin 详解（Spring Boot 2.0，基于 Eureka 的实现）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/hubo_88/article/details/80684339" >解决 Spring Cloud 的服务应用配置 context-path 后 Spring Boot Admin 监控不到信息的问题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://github.com/shmilyah/spring-cloud-componets" >https://github.com/shmilyah/spring-cloud-componets</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中获取spring.profiles.active的值</title>
    <url>/2019/09/01/SpringBoot%E4%B8%AD%E8%8E%B7%E5%8F%96spring-profiles-active%E7%9A%84%E5%80%BC/</url>
    <content><![CDATA[<blockquote>
<p>SpringBoot通过@Profile(“dev”) 可以在配置类中限定配置环境，在实际开发中可能需要方法级别的控制，也就是说获取到当前环境的具体信息</p>
</blockquote>
<span id="more"></span>

<p>最终通过查看<code>SpringBoot</code>日志以及源码找到答案</p>
<ul>
<li>SpringBoot启动日志中有下面这句：</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">15:57:56.128 [restartedMain] INFO  c.d.o.OptplatformApplication - The following profiles are active: dev</span><br></pre></td></tr></table></div></figure>

<ul>
<li>跟踪代码：SpringApplication.run方法<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public ConfigurableApplicationContext run(String... args) &#123;</span><br><span class="line">        StopWatch stopWatch = new StopWatch();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        ConfigurableApplicationContext context = null;</span><br><span class="line">        FailureAnalyzers analyzers = null;</span><br><span class="line">        configureHeadlessProperty();</span><br><span class="line">        SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">        listeners.starting();</span><br><span class="line">        try &#123;</span><br><span class="line">            ApplicationArguments applicationArguments = new DefaultApplicationArguments(</span><br><span class="line">                    args);</span><br><span class="line">            ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">                    applicationArguments);</span><br><span class="line">            Banner printedBanner = printBanner(environment);</span><br><span class="line">            context = createApplicationContext();</span><br><span class="line">            analyzers = new FailureAnalyzers(context);</span><br><span class="line">            prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">                    printedBanner);  // 在这里打印了，跟踪进去</span><br><span class="line">            refreshContext(context);</span><br><span class="line">            afterRefresh(context, applicationArguments);</span><br><span class="line">            listeners.finished(context, null);</span><br><span class="line">            stopWatch.stop();</span><br><span class="line">            if (this.logStartupInfo) &#123;</span><br><span class="line">                new StartupInfoLogger(this.mainApplicationClass)</span><br><span class="line">                        .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">            &#125;</span><br><span class="line">            return context;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Throwable ex) &#123;</span><br><span class="line">            handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">            throw new IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure></li>
<li>跟踪代码：SpringApplication.prepareContext方法</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">private void prepareContext(ConfigurableApplicationContext context,</span><br><span class="line">      ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span><br><span class="line">      ApplicationArguments applicationArguments, Banner printedBanner) &#123;</span><br><span class="line">   context.setEnvironment(environment);</span><br><span class="line">   postProcessApplicationContext(context);</span><br><span class="line">   applyInitializers(context);</span><br><span class="line">   listeners.contextPrepared(context);</span><br><span class="line">   if (this.logStartupInfo) &#123;</span><br><span class="line">      logStartupInfo(context.getParent() == null);</span><br><span class="line">      logStartupProfileInfo(context);  // 名称很明显，继续跟踪进去</span><br><span class="line">   &#125;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<ul>
<li>跟踪代码：SpringApplication.logStartupProfileInfo方法</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">protected void logStartupProfileInfo(ConfigurableApplicationContext context) &#123; </span><br><span class="line">   Log log = getApplicationLog();</span><br><span class="line">   if (log.isInfoEnabled()) &#123;</span><br><span class="line">      String[] activeProfiles = context.getEnvironment().getActiveProfiles();</span><br><span class="line">      if (ObjectUtils.isEmpty(activeProfiles)) &#123;</span><br><span class="line">         String[] defaultProfiles = context.getEnvironment().getDefaultProfiles();</span><br><span class="line">         log.info(&quot;No active profile set, falling back to default profiles: &quot;</span><br><span class="line">               + StringUtils.arrayToCommaDelimitedString(defaultProfiles)); </span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">         log.info(&quot;The following profiles are active: &quot;</span><br><span class="line">               + StringUtils.arrayToCommaDelimitedString(activeProfiles));  //找到了，很明显用了ApplicationContxt容器，接下来就是写个工具类来获取Application就行啦。</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>编写<code>SpringContextHolder</code>工具类</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class SpringContextHolder implements ApplicationContextAware, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    private static ApplicationContext applicationContext = null;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 取得存储在静态变量中的ApplicationContext.</span><br><span class="line">     */</span><br><span class="line">    public static ApplicationContext getApplicationContext() &#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        return applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T getBean(String name) &#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        return (T) applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</span><br><span class="line">        assertContextInjected();</span><br><span class="line">        return applicationContext.getBean(requiredType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查ApplicationContext不为空.</span><br><span class="line">     */</span><br><span class="line">    private static void assertContextInjected() &#123;</span><br><span class="line">        if (applicationContext == null) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;applicaisetApplicationContexttonContext属性未注入, 请在applicationContext&quot; +</span><br><span class="line">                    &quot;.xml中定义SpringContextHolder或在SpringBoot启动类中注册SpringContextHolder.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前环境</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getActiveProfile() &#123;</span><br><span class="line">        return applicationContext.getEnvironment().getActiveProfiles()[0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 清除SpringContextHolder中的ApplicationContext为Null.</span><br><span class="line">     */</span><br><span class="line">    public static void clearHolder() &#123;</span><br><span class="line">        log.debug(&quot;清除SpringContextHolder中的ApplicationContext:&quot;</span><br><span class="line">                + applicationContext);</span><br><span class="line">        applicationContext = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() throws Exception &#123;</span><br><span class="line">        SpringContextHolder.clearHolder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        if (SpringContextHolder.applicationContext != null) &#123;</span><br><span class="line">            log.warn(&quot;SpringContextHolder中的ApplicationContext被覆盖, 原有ApplicationContext为:&quot; + SpringContextHolder.applicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">        SpringContextHolder.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>使用示例</li>
</ul>
<p>可以通过改方式来控制在测试环境打印出当前访问的接口URL</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">if (&quot;dev&quot;.equals(SpringContextHolder.getActiveProfile())) &#123;</span><br><span class="line">          System.out.println(String.format(&quot;====当前接口URL: %s&quot;, request.getRequestURL()));</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot打war包</title>
    <url>/2019/09/07/SpringBoot%E6%89%93war%E5%8C%85/</url>
    <content><![CDATA[<ul>
<li>1.SpringBoot主类配置</li>
</ul>
<span id="more"></span>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder application)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		SpringApplication.run(Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<ul>
<li>2.设置构建打包类型<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//maven</span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></div></figure>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//gradle</span><br><span class="line">apply plugin: &#x27;war&#x27;</span><br></pre></td></tr></table></div></figure></li>
<li>3.编译后排除Tomcat依赖<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//maven</span></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">	&lt;!-- … --&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">		&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">	&lt;!-- … --&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></div></figure></li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//gradle</span><br><span class="line">dependencies &#123;</span><br><span class="line">	// …</span><br><span class="line">	providedRuntime &#x27;org.springframework.boot:spring-boot-starter-tomcat&#x27;</span><br><span class="line">	// …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>参考：<span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/reference/htmlsingle/#howto-create-a-deployable-war-file" >官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动加载的原理</title>
    <url>/2019/09/01/SpringBoot%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<ul>
<li>首先我们在程序入口的位置点进SpringApplication这个类的run方法</li>
</ul>
<span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p> run方法点进去</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static ConfigurableApplicationContext run(Object source, String... args) &#123;</span><br><span class="line">		return run(new Object[] &#123; source &#125;, args);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></div></figure>

<p>继续</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static ConfigurableApplicationContext run(Object[] sources, String[] args) &#123;</span><br><span class="line">	return new SpringApplication(sources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>可以看到run方法只是创建了SpringApplication对象，并执行run方法。继续跟进</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public SpringApplication(Object... sources) &#123;</span><br><span class="line">		initialize(sources);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></div></figure>
<p>initialize具体代码：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	private void initialize(Object[] sources) &#123;</span><br><span class="line">		if (sources != null &amp;&amp; sources.length &gt; 0) &#123;</span><br><span class="line">			this.sources.addAll(Arrays.asList(sources));</span><br><span class="line">		&#125;</span><br><span class="line">		this.webEnvironment = deduceWebEnvironment();</span><br><span class="line">		setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">				ApplicationContextInitializer.class));</span><br><span class="line">		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">		this.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></div></figure>

<p>getSpringFactoriesInstances点进去：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">private &lt;T&gt; Collection&lt;? extends T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type) &#123;</span><br><span class="line">		return getSpringFactoriesInstances(type, new Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></div></figure>

<p>继续：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">private &lt;T&gt; Collection&lt;? extends T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type,</span><br><span class="line">			Class&lt;?&gt;[] parameterTypes, Object... args) &#123;</span><br><span class="line">		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">		// Use names and ensure unique to protect against duplicates</span><br><span class="line">		Set&lt;String&gt; names = new LinkedHashSet&lt;String&gt;(</span><br><span class="line">				SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">		List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">				classLoader, args, names);</span><br><span class="line">		AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line">		return instances;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p><code>loadFactoryNames</code>点进去：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) &#123;</span><br><span class="line">	String factoryClassName = factoryClass.getName();</span><br><span class="line">	try &#123;</span><br><span class="line">		Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">				ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">		List&lt;String&gt; result = new ArrayList&lt;String&gt;();</span><br><span class="line">		while (urls.hasMoreElements()) &#123;</span><br><span class="line">			URL url = urls.nextElement();</span><br><span class="line">			Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));</span><br><span class="line">			String factoryClassNames = properties.getProperty(factoryClassName);</span><br><span class="line">			result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</span><br><span class="line">		&#125;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (IOException ex) &#123;</span><br><span class="line">		throw new IllegalArgumentException(&quot;Unable to load [&quot; + factoryClass.getName() +</span><br><span class="line">				&quot;] factories from location [&quot; + FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>可以看到常量<code> FACTORIES_RESOURCE_LOCATION</code> 的定义：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</span><br></pre></td></tr></table></div></figure>

<p>找到<code>org.springframework.boot.autoconfigure</code>的<code>spring.factories</code>文件:</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-b58edce5e6697c4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p>以Redis为例，我们可以看到<code>spring.factories</code>文件中有Redis的配置</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br></pre></td></tr></table></div></figure>


<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(&#123; JedisConnection.class, RedisOperations.class, Jedis.class &#125;)</span><br><span class="line">@EnableConfigurationProperties(RedisProperties.class)</span><br><span class="line">public class RedisAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * Redis connection configuration.</span><br><span class="line">	 */</span><br><span class="line">	@Configuration</span><br><span class="line">	@ConditionalOnClass(GenericObjectPool.class)</span><br><span class="line">	protected static class RedisConnectionConfiguration &#123;</span><br><span class="line"></span><br><span class="line">		private final RedisProperties properties;</span><br><span class="line"></span><br><span class="line">		private final RedisSentinelConfiguration sentinelConfiguration;</span><br><span class="line"></span><br><span class="line">		private final RedisClusterConfiguration clusterConfiguration;</span><br><span class="line"></span><br><span class="line">		public RedisConnectionConfiguration(RedisProperties properties,</span><br><span class="line">				ObjectProvider&lt;RedisSentinelConfiguration&gt; sentinelConfiguration,</span><br><span class="line">				ObjectProvider&lt;RedisClusterConfiguration&gt; clusterConfiguration) &#123;</span><br><span class="line">			this.properties = properties;</span><br><span class="line">			this.sentinelConfiguration = sentinelConfiguration.getIfAvailable();</span><br><span class="line">			this.clusterConfiguration = clusterConfiguration.getIfAvailable();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		@Bean</span><br><span class="line">		@ConditionalOnMissingBean(RedisConnectionFactory.class)</span><br><span class="line">		public JedisConnectionFactory redisConnectionFactory()</span><br><span class="line">				throws UnknownHostException &#123;</span><br><span class="line">			return applyProperties(createJedisConnectionFactory());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		protected final JedisConnectionFactory applyProperties(</span><br><span class="line">				JedisConnectionFactory factory) &#123;</span><br><span class="line">			configureConnection(factory);</span><br><span class="line">			if (this.properties.isSsl()) &#123;</span><br><span class="line">				factory.setUseSsl(true);</span><br><span class="line">			&#125;</span><br><span class="line">			factory.setDatabase(this.properties.getDatabase());</span><br><span class="line">			if (this.properties.getTimeout() &gt; 0) &#123;</span><br><span class="line">				factory.setTimeout(this.properties.getTimeout());</span><br><span class="line">			&#125;</span><br><span class="line">			return factory;</span><br><span class="line">		&#125;</span><br><span class="line">	...</span><br></pre></td></tr></table></div></figure>
<p>说明：</p>
<ol>
<li><code>@ConditionalOnClass</code>激活一个配置，当类路径中存在这个类时才会配置该类</li>
<li><code>@EnableConfigurationProperties</code> 自动映射一个POJO从Spring Boot配置文件（默认是application.properties文件）的属性集。</li>
<li><code>@ConditionalOnMissingBean</code> 启用一个Bean定义，但必须是这个Bean之前未定义过才有效，还可以使用<code>@ AutoConfigureBefore</code>、<code>@AutoConfigureAfter</code>注解来定义这些配置类的载入顺序</li>
</ol>

        <h4 id="具体几个-Conditon-注解的含义"   >
          <a href="#具体几个-Conditon-注解的含义" class="heading-link"><i class="fas fa-link"></i></a><a href="#具体几个-Conditon-注解的含义" class="headerlink" title="具体几个@Conditon*注解的含义"></a>具体几个@Conditon*注解的含义</h4>
      <ul>
<li><p>@ConditionalOnBean<br>仅仅在当前上下文中存在某个对象时，才会实例化一个Bean</p>
</li>
<li><p>@ConditionalOnClass<br>某个class位于类路径上，才会实例化一个Bean)，该注解的参数对应的类必须存在，否则不解析该注解修饰的配置类</p>
</li>
<li><p>@ConditionalOnExpression<br>当表达式为true的时候，才会实例化一个Bean</p>
</li>
<li><p>@ConditionalOnMissingBean<br>仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean，该注解表示，如果存在它修饰的类的bean，则不需要再创建这个bean，可以给该注解传入参数例如@ConditionOnMissingBean(name = “example”)，这个表示如果name为“example”的bean存在，这该注解修饰的代码块不执行</p>
</li>
<li><p>@ConditionalOnMissingClass<br>某个class类路径上不存在的时候，才会实例化一个Bean</p>
</li>
<li><p>@ConditionalOnNotWebApplication<br>不是web应用时，才会执行</p>
</li>
</ul>
<p>如若想关闭自动配置时我们就是把spring.factories文件不需要自动配置的类过滤掉<br>比如：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication(exclude = &#123;RedisAutoConfiguration.class&#125;)</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


<p>。</p>
<ul>
<li>总结</li>
</ul>
<p>SpringBoot 的 自动配置得益于 SpringFramework 强大的支撑，框架早已有很多工具和注解可以自动装配 Bean 。SpringBoot 通过 一个封装，将市面上通用的组件直接写好了配置类。当我们程序去依赖了这些组件的 jar 包后，启动 SpringBoot应用，于是自动加载开始了。</p>
<p>我们也可以定义自己的自动装配组件，依赖之后，Spring直接可以加载我们定义的 starter 。笔者将在后续文章中进行编码和解读</p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自定义配置自动提示</title>
    <url>/2019/09/01/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<blockquote>
<p>在<code>SpringBoot</code>项目配置文件中如果使用自定义配置时IDE工具时不会自动提示的，如果想实现自动提示可按如下操作</p>
</blockquote>
<span id="more"></span>


        <h4 id="编写自定义配置类"   >
          <a href="#编写自定义配置类" class="heading-link"><i class="fas fa-link"></i></a><a href="#编写自定义配置类" class="headerlink" title="编写自定义配置类"></a>编写自定义配置类</h4>
      <p>使用注解<code>@ConfigurationProperties</code>并指定前缀</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;zg.river&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class RiverGlobalProperties &#123;</span><br><span class="line"></span><br><span class="line">    private String notAllowRefreshIndex;</span><br><span class="line"></span><br><span class="line">    private String traceInterTime;</span><br><span class="line"></span><br><span class="line">    private String patrolMaxTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="编写对应的配置文件"   >
          <a href="#编写对应的配置文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#编写对应的配置文件" class="headerlink" title="编写对应的配置文件"></a>编写对应的配置文件</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">zg:</span><br><span class="line">  river:</span><br><span class="line">    trace-inter-time: 5</span><br><span class="line">    patrol-max-time: 10</span><br></pre></td></tr></table></div></figure>



        <h4 id="添加注解处理器"   >
          <a href="#添加注解处理器" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加注解处理器" class="headerlink" title="添加注解处理器"></a>添加注解处理器</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure>


        <h4 id="修改IDEA配置"   >
          <a href="#修改IDEA配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改IDEA配置" class="headerlink" title="修改IDEA配置"></a>修改IDEA配置</h4>
      <p><code>Settings</code> –&gt; <code>Annotation Processor</code> –&gt; 勾选 <code>Enable annotation processing</code><br><img   src="https://upload-images.jianshu.io/upload_images/8387919-170f50503d795219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h4 id="编译生成提示文件"   >
          <a href="#编译生成提示文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#编译生成提示文件" class="headerlink" title="编译生成提示文件"></a>编译生成提示文件</h4>
      <ul>
<li>重新编译代码</li>
<li>生成的文件如下classes/META-INF/spring-configuration-metadata.json<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-8975935047e45719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hints&quot;: [],</span><br><span class="line">  &quot;groups&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;sourceType&quot;: &quot;com.zg.river.config.properties.RiverGlobalProperties&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;zg.river&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;com.zg.river.config.properties.RiverGlobalProperties&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;properties&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;sourceType&quot;: &quot;com.zg.river.config.properties.RiverGlobalProperties&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;zg.river.not-allow-refresh-index&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;notAllowRefreshIndex&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;sourceType&quot;: &quot;com.zg.river.config.properties.RiverGlobalProperties&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;zg.river.patrol-max-time&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;patrolMaxTime&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;sourceType&quot;: &quot;com.zg.river.config.properties.RiverGlobalProperties&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;zg.river.trace-inter-time&quot;,</span><br><span class="line">      &quot;description&quot;: &quot;traceInterTime&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li>之后发现自定义的配置可以自动提示,并且可以进行跳转了<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-f5cd87e10f8339c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" >
        <h4 id="参考资料："   >
          <a href="#参考资料：" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4>
      </li>
<li><span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html" >Configuration Metadata</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目配置文件密码加密(jasypt)</title>
    <url>/2019/09/01/SpringBoot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86-jasypt/</url>
    <content><![CDATA[<ul>
<li>引入依赖<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure></li>
</ul>
<span id="more"></span>

<ul>
<li>找到jar文件<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-689d044533f155f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></li>
</ul>
<p>命令行执行：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=&quot;hao4267364&quot; password=abc algorithm=PBEWithMD5AndDES</span><br></pre></td></tr></table></div></figure>

<p><code>input</code>:是数据库的明文密码<br><code>password</code>：是机密的盐<br><code>algorithm</code>：是加密的方式(默认)</p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-c274073c8a234a5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<ul>
<li><p>配置文件中使用：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mail:</span><br><span class="line">  host: smtp.163.com</span><br><span class="line">  username: 18802953162@163.com # 用户名</span><br><span class="line">  password: ENC(0ciH5QGCy0Aww5yAcJJOfyf8iAKodNwT)</span><br></pre></td></tr></table></div></figure>
<p>用<code>ENC</code>加括号</p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://github.com/ulisesbocchio/jasypt-spring-boot/blob/master/README.md" >参考</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码学习环境搭建</title>
    <url>/2022/05/08/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>本文主要记录Spring源码的阅读环境的搭建和验证</p>
</blockquote>

        <h3 id="1-前置条件（我的环境）"   >
          <a href="#1-前置条件（我的环境）" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-前置条件（我的环境）" class="headerlink" title="1.前置条件（我的环境）"></a>1.前置条件（我的环境）</h3>
      <ul>
<li>Intellij IDEA 2020.1.3</li>
<li>jdk 1.8</li>
<li>mavne3.6.1</li>
<li>gradle 5.6</li>
<li>git</li>
<li>操作系统Win10</li>
</ul>
<span id="more"></span>

        <h3 id="2-安装Gradle"   >
          <a href="#2-安装Gradle" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-安装Gradle" class="headerlink" title="2. 安装Gradle"></a>2. 安装Gradle</h3>
      <ul>
<li>下载Gradle并解压到指定目录<br><span class="exturl"><a class="exturl__link"   href="https://gradle.org/install/#manually" >官方网站</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>配置环境变量<br>1.变量名：<code>GRADLE_HOME</code> Gradle的解压目录</li>
</ul>
<ol start="2">
<li>变量名：<code>GRADLE_USER_HOME</code>   自定义Gradle仓库目录或者Maven的仓库目录</li>
<li>添加Path %GRADLE_HOME%\bin</li>
<li>验证<br><code> gradle -v</code><br><img   src="https://upload-images.jianshu.io/upload_images/8387919-cf9d0a551bd42cca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></li>
</ol>
<ul>
<li><p>配置Gradle仓库源<br>在Gradle安装目录下的 init.d 文件夹下，新建一个 init.gradle 文件，里面填写以下配置，使用阿里云仓库镜像地址</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line"> repositories &#123;</span><br><span class="line">     maven &#123; url &#x27;file:///C:/MyProgram/development/maven/repository&#x27;&#125;</span><br><span class="line">     mavenLocal()</span><br><span class="line">     maven &#123; name &quot;Alibaba&quot; ; url &quot;https://maven.aliyun.com/repository/public&quot; &#125;</span><br><span class="line">     maven &#123; name &quot;Bstek&quot; ; url &quot;http://nexus.bsdn.org/content/groups/public/&quot; &#125;</span><br><span class="line">     mavenCentral()</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> buildscript &#123; </span><br><span class="line">     repositories &#123; </span><br><span class="line">         maven &#123; name &quot;Alibaba&quot; ; url &#x27;https://maven.aliyun.com/repository/public&#x27; &#125;</span><br><span class="line">         maven &#123; name &quot;Bstek&quot; ; url &#x27;http://nexus.bsdn.org/content/groups/public/&#x27; &#125;</span><br><span class="line">         maven &#123; name &quot;M2&quot; ; url &#x27;https://plugins.gradle.org/m2/&#x27; &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>repositories 中写的是获取 jar 包的顺序。先是本地的 Maven 仓库路径；接着的 mavenLocal() 是获取 Maven 本地仓库的路径，应该是和第一条一样，但是不冲突；第三条和第四条是从国内和国外的网络上仓库获取；最后的 mavenCentral() 是从Apache提供的中央仓库获取 jar 包。</p>
</li>
<li><p>IDEA中配置Gradle<br>新版本的IDEA中设置Gradle界面有很大的变化，更加简洁。如下图<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-117636527e34d246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
</ul>
<ol>
<li>配置gradle的仓库地址</li>
<li>配置idea使用我们本地安装的gradle（指定安装目录）</li>
<li>配置jdk版本</li>
</ol>

        <h3 id="拉取源码"   >
          <a href="#拉取源码" class="heading-link"><i class="fas fa-link"></i></a><a href="#拉取源码" class="headerlink" title="拉取源码"></a>拉取源码</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/spring-projects/spring-framework/tree/5.1.x" >github 地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://gitee.com/mirrors/Spring-Framework/tree/5.1.x" >码云镜像地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>github服务器地址比较慢可以使用码云的镜像地址</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">git pull https://github.com/spring-projects/spring-framework</span><br></pre></td></tr></table></div></figure>

<p>拉取成功后切换到指定分支</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">git beanch 查看当前分支</span><br><span class="line">git checkout 5.1.x 切换到指定分支</span><br></pre></td></tr></table></div></figure>


        <h3 id="构建"   >
          <a href="#构建" class="heading-link"><i class="fas fa-link"></i></a><a href="#构建" class="headerlink" title="构建"></a>构建</h3>
      <ul>
<li>前置命令<br>在<code>README中找到</code><span class="exturl"><a class="exturl__link"   href="https://github.com/spring-projects/spring-framework/wiki/Build-from-Source" >Build from Source</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 打开后可以看到具体的构建步骤<br>由于我这里是最终通过IDEA进行构建与编码，所以选择下面的通过<br><span class="exturl"><a class="exturl__link"   href="https://github.com/spring-projects/spring-framework/blob/master/import-into-idea.md" >IntelliJ IDEA</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 构建<br>可以看到大致步骤如下：<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Precompile spring-oxm with ./gradlew :spring-oxm:compileTestJava</span><br><span class="line">Import into IntelliJ (File -&gt; New -&gt; Project from Existing Sources -&gt; Navigate to directory -&gt; Select build.gradle)</span><br><span class="line">When prompted exclude the spring-aspects module (or after the import via File-&gt; Project Structure -&gt; Modules)</span><br><span class="line">Code away</span><br></pre></td></tr></table></div></figure>

过程中可能出现如下错误<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-54ac10c814209f3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br>通过错误提示进入到指定目录删除对用目录的缓存文件，让gradle重新下载jar包<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-cbe39b456776a90e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" >
        <h3 id="导入到IDEA中"   >
          <a href="#导入到IDEA中" class="heading-link"><i class="fas fa-link"></i></a><a href="#导入到IDEA中" class="headerlink" title="导入到IDEA中"></a>导入到IDEA中</h3>
      在IDEA中选择open或import进行导入，导入之后，idea会自动识别build.gradle文件并进行构建，等待一会，出现build success 代表构建成功<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-097898a1fb40ec73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" >
        <h4 id="排除aspect模块"   >
          <a href="#排除aspect模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#排除aspect模块" class="headerlink" title="排除aspect模块"></a>排除aspect模块</h4>
      <blockquote>
<p>这里说下为什么要排除，因为sapect自己有编译器，会和jvm冲突，所以先排除<br>右键spring-aspect模块 选择Load/Unload Modules 将sapect模块移除<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-0ede9de27d9274d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</blockquote>

        <h3 id="测试-amp-Code-away"   >
          <a href="#测试-amp-Code-away" class="heading-link"><i class="fas fa-link"></i></a><a href="#测试-amp-Code-away" class="headerlink" title="测试&amp; Code away"></a>测试&amp; Code away</h3>
      </li>
</ul>
<ol>
<li><p>idea中新建模块<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-b10680f6c8ed833d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br><img   src="https://upload-images.jianshu.io/upload_images/8387919-6be24f307c5ac0f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</li>
<li><p>创建bean</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* @author haopeng</span><br><span class="line">* @date 2020-07-14 22:08</span><br><span class="line">*/</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * name</span><br><span class="line">  */</span><br><span class="line"> private String name;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * age</span><br><span class="line">  */</span><br><span class="line"> private Integer age;</span><br><span class="line"></span><br><span class="line"> public String getName() &#123;</span><br><span class="line">     return name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setName(String name) &#123;</span><br><span class="line">     this.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public Integer getAge() &#123;</span><br><span class="line">     return age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setAge(Integer age) &#123;</span><br><span class="line">     this.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public String say() &#123;</span><br><span class="line">     return &quot;name:&quot; + name + &quot;=== age&quot; + age;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
</ol>
<ol start="3">
<li>创建beans配置类<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class MyConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Person person() &#123;</span><br><span class="line">        Person person = new Person();</span><br><span class="line">        person.setName(&quot;Mcgrady&quot;);</span><br><span class="line">        person.setAge(28);</span><br><span class="line">        return person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li>
<li>测试<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">* @author haopeng</span><br><span class="line"></span><br><span class="line">* @date 2020-07-14 22:06</span><br><span class="line">  */</span><br><span class="line">  public class HellloSpring &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">  </span><br><span class="line">       AnnotationConfigApplicationContext context =</span><br><span class="line">               new AnnotationConfigApplicationContext(MyConfiguration.class);</span><br><span class="line">      </span><br><span class="line">       Person person = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line">       System.out.println(person.say());</span><br><span class="line">  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<img   src="https://upload-images.jianshu.io/upload_images/8387919-9e96f51a21fd5101.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></li>
</ol>
<ul>
<li>也可以使用xml进行bean配置<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">  &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;bean id=&quot;person&quot; class=&quot;com.hp.beans.Person&quot;&gt;</span><br><span class="line">          &lt;property name=&quot;name&quot; value=&quot;haopeng&quot;&gt;&lt;/property&gt;</span><br><span class="line">          &lt;property name=&quot;age&quot; value=&quot;28&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line">  //ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">  //Person person= (Person) context.getBean(&quot;person&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li>
</ul>
<blockquote>
<p>总结下来：Spring的源码构建中很遇到好多环境问题的坑，一定要耐心慢慢去查看错误提示，查看官网文档，或百度/google查找别人的解决办法，最终构建成功</p>
</blockquote>

        <h5 id="参考："   >
          <a href="#参考：" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://spring.io/projects/spring-framework" >https://spring.io/projects/spring-framework</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/5d03821cf265da1bcf5dd908" >https://juejin.im/post/5d03821cf265da1bcf5dd908</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/63145978" >https://zhuanlan.zhihu.com/p/63145978</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal用法</title>
    <url>/2022/03/29/ThreadLocal%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。使用这个工具类可以很简洁地编写出优美的多线程程序。</li>
<li>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</li>
<li>如果你定义了一个单实例的java bean，它有若干属性，但是有一个属性不是线程安全的，比如说HashMap。并且碰巧你并不需要在不同的线程中共享这个属性，也就是说这个属性不存在跨线程的意义。那么你不要sychronize这么复杂的东西，ThreadLocal将是你不错的选择。</li>
</ul>
</blockquote>
<span id="more"></span>

<p>先看一个简单的示例：</p>
<pre><code>package com.hp.up.test.ThreadLocal;

import java.util.HashMap;
/**
 * Created by haopeng on 2017/12/27 16:45
     */

public class Test2 &#123;

static ThreadLocal&lt;HashMap&gt; map0 = new ThreadLocal&lt;HashMap&gt;()&#123;
    @Override
    protected HashMap initialValue() &#123;
        System.out.println(Thread.currentThread().getName()+&quot;initialValue&quot;);
        return new HashMap();
    &#125;
&#125;;
public void run()&#123;
    Thread[] runs = new Thread[3];
    for(int i=0;i&lt;runs.length;i++)&#123;
        runs[i]=new Thread(new T1(i));
    &#125;
    for(int i=0;i&lt;runs.length;i++)&#123;
        runs[i].start();
    &#125;
&#125;
public static class T1 implements Runnable&#123;
    int id;
    public T1(int id0) &#123;
        id = id0;
    &#125;
    public void run() &#123;
        System.out.println(Thread.currentThread().getName()+&quot;:start&quot;);
        HashMap map = map0.get();
        for(int i=0;i&lt;10;i++)&#123;
            map.put(i, i+id*100);
            try&#123;
                Thread.sleep(100);
            &#125;catch(Exception ex)&#123;
            &#125;
        &#125;
        System.out.println(Thread.currentThread().getName()+&#39;:&#39;+map);
    &#125;
&#125;
/**
 * Main
 * @param args
 */
public static void main(String[] args)&#123;
    Test2 test = new Test2();
    test.run();
&#125;

&#125;
</code></pre>
<p>控制台打印<br><img   src="http://upload-images.jianshu.io/upload_images/8387919-b4387e5ba7977df3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ><br>可以看到map0 虽然是个静态变量，但是initialValue被调用了三次，通过debug发现，initialValue是从map0.get处发起的。而且每个线程都有自己的map，虽然他们同时执行。</p>
<p>查看Theadlocal源码，可以发现get()方法：</p>
<pre><code>/**
 * Returns the value in the current thread&#39;s copy of this
 * thread-local variable.  If the variable has no value for the
 * current thread, it is first initialized to the value returned
 * by an invocation of the &#123;@link #initialValue&#125; method.
 *
 * @return the current thread&#39;s value of this thread-local
 */
public T get() &#123;
    Thread t = Thread.currentThread();
    ThreadLocalMap map = getMap(t);
    if (map != null) &#123;
        ThreadLocalMap.Entry e = map.getEntry(this);
        if (e != null) &#123;
            @SuppressWarnings(&quot;unchecked&quot;)
            T result = (T)e.value;
            return result;
        &#125;
    &#125;
    return setInitialValue();
&#125;
</code></pre>
<p>这说明ThreadLocal确实只有一个变量，但是它内部包含一个map，针对每个thread保留一个entry，如果对应的thread不存在则会调用initialValue。</p>
]]></content>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS脚本过滤</title>
    <url>/2019/09/01/XSS%E8%84%9A%E6%9C%AC%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[
        <h3 id="XSS脚本过滤"   >
          <a href="#XSS脚本过滤" class="heading-link"><i class="fas fa-link"></i></a><a href="#XSS脚本过滤" class="headerlink" title="XSS脚本过滤"></a>XSS脚本过滤</h3>
      <blockquote>
<p>脚本攻击经常是项目测试人员或者“不法分子”闲着没事干，想办法让你的程序不正常，最近项目中刚好用到所以就贴出来做个笔记。</p>
</blockquote>
<span id="more"></span>


        <h5 id="1-思路"   >
          <a href="#1-思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h5>
      <p>我们可以通过servlet规范中的过滤器，对每一次请求进行过滤 –&gt; 将请求参数获取到对脚本数据进行转义处理后再进行持久化操作，比如&lt; script &gt; &lt; /script&gt;中的’&lt;’ ,’&gt;’号。</p>

        <h5 id="2-配置过滤器"   >
          <a href="#2-配置过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-配置过滤器" class="headerlink" title="2.配置过滤器"></a>2.配置过滤器</h5>
      <p>在项目中web.xml中添加:</p>
<pre><code>  &lt;filter&gt;  
    &lt;filter-name&gt;XSSEscape&lt;/filter-name&gt;  
    &lt;filter-class&gt;com.hp.up.front.xss.XSSFilter&lt;/filter-class&gt;
&lt;/filter&gt;  
&lt;filter-mapping&gt;  
    &lt;filter-name&gt;XSSEscape&lt;/filter-name&gt;  
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  
    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;  
&lt;/filter-mapping&gt; 
</code></pre>
<p> 其中com.hp.up.front.xss.XSSFilter就是过滤器路径</p>

        <h5 id="3-编写过滤器"   >
          <a href="#3-编写过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-编写过滤器" class="headerlink" title="3.编写过滤器"></a>3.编写过滤器</h5>
      <p>自然是实现javax.servlet.Filter 重写doFilter了:</p>
<pre><code>import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
public class XSSFilter implements Filter &#123;    
    @Override
    public void init(FilterConfig filterConfig) throws ServletException &#123;
    &#125;
    @Override
    public void destroy() &#123;
    &#125;
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
        throws IOException, ServletException &#123;
        chain.doFilter(new XSSRequestWrapper((HttpServletRequest) request), response);
    &#125;
&#125;
</code></pre>
<p>doFilter方法中传入XSSRequestWrapper对象，该类集成自HttpServletRequestWrapper，其实就是对HttpServletRequest中获取参数的方法的重写，从而实现对参数进行过滤、操作<br><img   src="http://upload-images.jianshu.io/upload_images/8387919-651b7e0cbac686de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<pre><code>import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

import org.apache.commons.lang.StringEscapeUtils;

public class XSSRequestWrapper extends HttpServletRequestWrapper&#123;

public XSSRequestWrapper(HttpServletRequest request) &#123;  
    super(request);  
&#125;  

@Override  
public String getHeader(String name) &#123;  
    return StringEscapeUtils.escapeHtml(super.getHeader(name));  
&#125;  

@Override  
public String getQueryString() &#123;  
    return StringEscapeUtils.escapeHtml(super.getQueryString());  
&#125;  

@Override  
public String getParameter(String name) &#123;  
    return StringEscapeUtils.escapeHtml(super.getParameter(name));  
&#125;  

@Override  
public String[] getParameterValues(String name) &#123;  
    String[] values = super.getParameterValues(name);  
    if(values != null) &#123;  
        int length = values.length;  
        String[] escapseValues = new String[length];  
        for(int i = 0; i &lt; length; i++)&#123;  
            escapseValues[i] = htmlEncode(values[i]);  
        &#125;  
        return escapseValues;  
    &#125;
    return super.getParameterValues(name);  
&#125;

private static String htmlEncode(String source) &#123;
    if (source == null) &#123;
        return &quot;&quot;;
    &#125;
    String html = &quot;&quot;;
    StringBuffer buffer = new StringBuffer();
    for (int i = 0; i &lt; source.length(); i++) &#123;
        char c = source.charAt(i);
        switch (c) &#123;
        case &#39;&lt;&#39;:
            buffer.append(&quot;&amp;lt;&quot;);
            break;
        case &#39;&gt;&#39;:
            buffer.append(&quot;&amp;gt;&quot;);
            break;
        case &#39;&amp;&#39;:
            buffer.append(&quot;&amp;amp;&quot;);
            break;
        case &#39;&quot;&#39;:
            buffer.append(&quot;&amp;quot;&quot;);
            break;
        case 10:
        case 13:
            break;
        default:
            buffer.append(c);
        &#125;
    &#125;
    html = buffer.toString();
    return html;
 &#125;  
&#125;
</code></pre>
<p>最终发现每次提交数据拦截器都会对数据中的脚本进行转义后再存到数据库中:<br> <img   src="http://upload-images.jianshu.io/upload_images/8387919-332030293dad64ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows配置Github的SSH-key</title>
    <url>/2019/09/01/Windows%E9%85%8D%E7%BD%AEGithub%E7%9A%84SSH-key/</url>
    <content><![CDATA[
        <h4 id="检查已存在的SSH-key"   >
          <a href="#检查已存在的SSH-key" class="heading-link"><i class="fas fa-link"></i></a><a href="#检查已存在的SSH-key" class="headerlink" title="检查已存在的SSH key"></a>检查已存在的SSH key</h4>
      <ol>
<li>打开Git Bash</li>
<li>输入 <code>cd ~/.ssh/</code>  <code>ls</code></li>
</ol>
<span id="more"></span>


        <h4 id="生成新的SSH-key"   >
          <a href="#生成新的SSH-key" class="heading-link"><i class="fas fa-link"></i></a><a href="#生成新的SSH-key" class="headerlink" title="生成新的SSH key"></a>生成新的SSH key</h4>
      <ol>
<li>打开Git Bash</li>
<li><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@.com&quot;</code>example 生成一个新的ssh key，使用填入的邮箱地址作为ssh key的标签，并生成RSA密钥对</li>
<li>出现如下提示时： <code>Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] </code> 按下回车</li>
</ol>

        <h4 id="Github账号添加SSH-key"   >
          <a href="#Github账号添加SSH-key" class="heading-link"><i class="fas fa-link"></i></a><a href="#Github账号添加SSH-key" class="headerlink" title="Github账号添加SSH key"></a>Github账号添加SSH key</h4>
      <ol>
<li>前往 GitHub 网站的”account settings”，依次点击”Setting -&gt; SSH Keys”-&gt;”New SSH key”</li>
<li>title随填写，key处拷贝 ~/.ssh/id_rsa.pub 中的内容</li>
</ol>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-1e3054fac4db2c94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h4 id="测试连接"   >
          <a href="#测试连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h4>
      <p><code>ssh -T git@github.com </code></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi tracypen! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose搭建ELK环境</title>
    <url>/2022/04/05/docker-compose%E6%90%AD%E5%BB%BAELK%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[
        <h3 id="Docker-compose搭建ELK环境"   >
          <a href="#Docker-compose搭建ELK环境" class="heading-link"><i class="fas fa-link"></i></a><a href="#Docker-compose搭建ELK环境" class="headerlink" title="Docker-compose搭建ELK环境"></a>Docker-compose搭建ELK环境</h3>
      
        <h4 id="环境信息"   >
          <a href="#环境信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h4>
      <ul>
<li>CentOS 7.4 系统</li>
<li>Docker version 18.06.1-ce</li>
<li>docker-compose version 1.22.0</li>
<li>部署单节点 ELK</li>
</ul>
<span id="more"></span>


        <h4 id="参数配置"   >
          <a href="#参数配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4>
      <p>在宿主机执行</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置内核参数</span></span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生效设置</span></span><br><span class="line">sysctl -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 docker，让内核参数对docker服务生效</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></div></figure>

<ul>
<li>原因分析:</li>
</ul>
<p><code>vm.max_map_count</code>参数，是允许一个进程在VMAs拥有最大数量（VMA：虚拟内存地址， 一个连续的虚拟地址空间），当进程占用内存超过时， 直接OOM。</p>
<p>elasticsearch占用内存较高。官方要求max_map_count需要配置到最小262144。</p>
<p>max_map_count配置文件写在系统的/proc/sys/vm中</p>
<p>通过docker inspect命令， 可查看docker使用宿主机的/proc/sys作为只读路径之一</p>
<figure class="highlight json"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;ReadonlyPaths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">           <span class="string">&quot;/proc/bus&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="string">&quot;/proc/fs&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="string">&quot;/proc/irq&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="string">&quot;/proc/sys&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="string">&quot;/proc/sysrq-trigger&quot;</span></span><br><span class="line">       <span class="punctuation">]</span></span><br></pre></td></tr></table></div></figure>

<p>说明镜像使用宿主机的max_map_count参数。因此直接修改宿主机的max_map_count参数即可</p>

        <h4 id="docker-compose文件"   >
          <a href="#docker-compose文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#docker-compose文件" class="headerlink" title="docker-compose文件"></a>docker-compose文件</h4>
      <figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;elasticsearch:6.7.1&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;elasticsearch&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;elasticsearch_data:/usr/share/elasticsearch&quot;</span></span><br><span class="line">    <span class="comment">#vim /etc/sysctl.conf</span></span><br><span class="line">    <span class="comment">#vm.max_map_count=262144</span></span><br><span class="line">    <span class="comment">#sysctl -w vm.max_map_count=262144</span></span><br><span class="line">    <span class="comment">#sysctl -p</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;elk&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;kibana:6.7.1&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;kibana&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;kibana:/usr/share/kibana&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;elk&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  logstash:</span></span><br><span class="line"><span class="comment">#    image: &quot;logstash:6.7.1&quot;</span></span><br><span class="line"><span class="comment">#    container_name: &quot;logstash&quot;</span></span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>这里我暂时没有用到logstash，其中的版本可以根据情况自行升级，但是需要注意版本一致或兼容，具体请<code>elastic</code>参考官网</p>
</blockquote>
<ul>
<li>启动：<code>docker-compose up -d</code></li>
<li>查看日志 <code>dcoker-compose logs -f</code></li>
<li>修改配置后重新构建 <code>docker-compose up -d --build</code></li>
<li>停止服务 <code>docker-compose stop kibana</code></li>
<li>删除所有docker-compose.yml中描述的服务 <code>docker-compose down</code></li>
</ul>

        <h4 id="修改elasticsearch-yml"   >
          <a href="#修改elasticsearch-yml" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改elasticsearch-yml" class="headerlink" title="修改elasticsearch.yml"></a>修改elasticsearch.yml</h4>
      <figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name</span>: <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host</span>: <span class="string">0.0.0.0</span></span><br><span class="line"><span class="attr">http.cors.enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin</span>: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></div></figure>

<p>其中后两行是允许跨域访问</p>
<ul>
<li><p>重新构建 <code> dockr-compose up -d --build</code></p>
</li>
<li><p>访问 http://{host}:9200/</p>
</li>
<li><p>访问head插件</p>
</li>
</ul>
<blockquote>
<p>这里我使用的是chrom中的head插件，也可以自行安装head插件 <span class="exturl"><a class="exturl__link"   href="https://github.com/mobz/elasticsearch-head" >github</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
<ul>
<li>访问kibana </li>
</ul>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/uPic/1240.png"></p>
<p>之后就可以在kibana中的devtools中进行es的查询了。</p>

        <h4 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考" class="headerlink" title="参考"></a>参考</h4>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://www.elastic.co/cn/" >elastic官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/mobz/elasticsearch-head" >head插件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>elk</tag>
        <tag>elasticsearch</tag>
        <tag>dokcer</tag>
      </tags>
  </entry>
  <entry>
    <title>Zuul 网关限流---Guava RateLimiter</title>
    <url>/2019/09/01/Zuul-%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81-Guava-RateLimiter/</url>
    <content><![CDATA[<blockquote>
<p>限流算法有漏桶算法和令牌桶算法,guava的RateLimiter使用的是令牌桶算法也就是以固定的频率向桶中放入令牌，例如一秒钟10枚令牌，实际业务在每次响应请求之前都从桶中获取令牌，只有取到令牌的请求才会被成功响应，获取的方式有两种：阻塞等待令牌或者取不到立即返回失败</p>
</blockquote>
<span id="more"></span>

<p><img   src="https://upload-images.jianshu.io/upload_images/3710706-773c48de19a24022?imageMogr2/auto-orient/strip%7CimageView2/2/w/286/format/webp" style=""  alt="image"></p>

        <h4 id="Guava-RateLimiter-使用"   >
          <a href="#Guava-RateLimiter-使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Guava-RateLimiter-使用" class="headerlink" title="Guava RateLimiter 使用"></a>Guava RateLimiter 使用</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2019-07-16 20:17</span><br><span class="line"> */</span><br><span class="line">public class GuavaRateLimiterTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testAcquire() &#123;</span><br><span class="line">        // acquire(i); 获取令牌，返回阻塞的时间,支持预消费.</span><br><span class="line">        RateLimiter limiter = RateLimiter.create(100);</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt; 20; i++) &#123;</span><br><span class="line">            double waitTime = limiter.acquire();</span><br><span class="line">            System.out.println(&quot;cutTime=&quot; + longToDate(System.currentTimeMillis()) + &quot; acq:&quot; + i + &quot; waitTime:&quot; + waitTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String longToDate(long lo)&#123;</span><br><span class="line">        Date date = new Date(lo);</span><br><span class="line">        SimpleDateFormat sd = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        return sd.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-3563c71f49bb940d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p>每秒1个令牌生成一个令牌，从输出可看出很平滑，这种实现将突发请求速率平均成固定请求速率。</p>

        <h4 id="Zuul中使用"   >
          <a href="#Zuul中使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Zuul中使用" class="headerlink" title="Zuul中使用"></a>Zuul中使用</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RateLimitFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line">    private static final RateLimiter RATE_LIMITER = RateLimiter.create(100);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String filterType() &#123;</span><br><span class="line">        return PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line">        return SERVLET_DETECTION_FILTER_ORDER - 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object run() throws ZuulException &#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        // 如果获取不到令牌，进行拦截</span><br><span class="line">        if (!RATE_LIMITER.tryAcquire()) &#123;</span><br><span class="line">            requestContext.setSendZuulResponse(false);</span><br><span class="line">            HttpStatus.TOO_MANY_REQUESTS.value()</span><br><span class="line">            requestContext.setResponseStatusCode(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


<hr>

        <h3 id="限流算法"   >
          <a href="#限流算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h3>
      
        <h6 id="1、计数器算法"   >
          <a href="#1、计数器算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、计数器算法" class="headerlink" title="1、计数器算法"></a>1、计数器算法</h6>
      <p>计数器算法是限流算法里最简单也是最容易实现的一种算法。比如我们规定，对于A接口来说，我们1分钟的访问次数不能超过100个。那么我们可以这么做：在一开 始的时候，我们可以设置一个计数器counter，每当一个请求过来的时候，counter就加1，如果counter的值大于100并且该请求与第一个 请求的间隔时间还在1分钟之内，那么说明请求数过多；如果该请求与第一个请求的间隔时间大于1分钟，且counter的值还在限流范围内，那么就重置 counter</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class CounterTest &#123;</span><br><span class="line">    public long timeStamp = getNowTime();</span><br><span class="line">    public int reqCount = 0;</span><br><span class="line">    public final int limit = 100; // 时间窗口内最大请求数</span><br><span class="line">    public final long interval = 1000; // 时间窗口ms</span><br><span class="line"></span><br><span class="line">    public boolean grant() &#123;</span><br><span class="line">        long now = getNowTime();</span><br><span class="line">        if (now &lt; timeStamp + interval) &#123;</span><br><span class="line">            // 在时间窗口内</span><br><span class="line">            reqCount++;</span><br><span class="line">            // 判断当前时间窗口内是否超过最大请求控制数</span><br><span class="line">            return reqCount &lt;= limit;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            timeStamp = now;</span><br><span class="line">            // 超时后重置</span><br><span class="line">            reqCount = 1;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getNowTime() &#123;</span><br><span class="line">        return System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h6 id="滑动窗口"   >
          <a href="#滑动窗口" class="heading-link"><i class="fas fa-link"></i></a><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h6>
      <p>当滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确</p>

        <h6 id="2、令牌桶算法"   >
          <a href="#2、令牌桶算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、令牌桶算法" class="headerlink" title="2、令牌桶算法"></a>2、令牌桶算法</h6>
      <p>令牌桶算法是比较常见的限流算法之一，大概描述如下：</p>
<ul>
<li>1）、所有的请求在处理之前都需要拿到一个可用的令牌才会被处理；</li>
<li>2）、根据限流大小，设置按照一定的速率往桶里添加令牌；</li>
<li>3）、桶设置最大的放置令牌限制，当桶满时、新添加的令牌就被丢弃或者拒绝；</li>
<li>4）、请求达到后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除；</li>
<li>5）、令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流；</li>
</ul>

        <h6 id="3、漏桶算法"   >
          <a href="#3、漏桶算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、漏桶算法" class="headerlink" title="3、漏桶算法"></a>3、漏桶算法</h6>
      ]]></content>
      <tags>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm安装kubernetes</title>
    <url>/2022/03/29/kubeadm%E5%AE%89%E8%A3%85kubernetes/</url>
    <content><![CDATA[
        <h3 id="设置主机"   >
          <a href="#设置主机" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置主机" class="headerlink" title="设置主机"></a>设置主机</h3>
      <span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 查看主机名</span><br><span class="line">$ hostname</span><br><span class="line"># 修改主机名</span><br><span class="line">$ hostnamectl set-hostname &lt;your_hostname&gt;</span><br><span class="line"># 配置host，使所有节点之间可以通过hostname互相访问</span><br><span class="line">$ vi /etc/hosts</span><br><span class="line"># &lt;node-ip&gt; &lt;node-hostname&gt;</span><br></pre></td></tr></table></div></figure>


        <h3 id="免密登陆"   >
          <a href="#免密登陆" class="heading-link"><i class="fas fa-link"></i></a><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id root@192.168.2.202</span><br></pre></td></tr></table></div></figure>


        <h3 id="安装依赖包（-）"   >
          <a href="#安装依赖包（-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装依赖包（-）" class="headerlink" title="安装依赖包（*）"></a>安装依赖包（*）</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 更新yum</span><br><span class="line">$ yum update</span><br><span class="line"># 安装依赖包</span><br><span class="line">$ yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</span><br></pre></td></tr></table></div></figure>


        <h3 id="关闭防火墙、selinux、swap，重置iptables（-）"   >
          <a href="#关闭防火墙、selinux、swap，重置iptables（-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#关闭防火墙、selinux、swap，重置iptables（-）" class="headerlink" title="关闭防火墙、selinux、swap，重置iptables（*）"></a>关闭防火墙、selinux、swap，重置iptables（*）</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 关闭防火墙</span><br><span class="line">$ systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"># 重置iptables</span><br><span class="line">$ iptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT</span><br><span class="line"># 关闭swap</span><br><span class="line">$ swapoff -a</span><br><span class="line">$ sed -i &#x27;/swap/s/^\(.*\)$/#\1/g&#x27; /etc/fstab</span><br><span class="line"># 关闭selinux</span><br><span class="line">$ setenforce 0</span><br><span class="line"># 关闭dnsmasq(否则可能导致docker容器无法解析域名)</span><br><span class="line">$ service dnsmasq stop &amp;&amp; systemctl disable dnsmasq</span><br></pre></td></tr></table></div></figure>


        <h3 id="系统参数设置（-）"   >
          <a href="#系统参数设置（-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统参数设置（-）" class="headerlink" title="系统参数设置（*）"></a>系统参数设置（*）</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 制作配置文件</span><br><span class="line">$ cat &gt; /etc/sysctl.d/kubernetes.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"># 生效文件</span><br><span class="line">$ sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></div></figure>


        <h3 id="安装dcoker-ce（-）"   >
          <a href="#安装dcoker-ce（-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装dcoker-ce（-）" class="headerlink" title="安装dcoker-ce（*）"></a>安装dcoker-ce（*）</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></div></figure>


        <h3 id="安装kubelet-kubeadm-kubectl"   >
          <a href="#安装kubelet-kubeadm-kubectl" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装kubelet-kubeadm-kubectl" class="headerlink" title="安装kubelet kubeadm kubectl(*)"></a>安装<code>kubelet kubeadm kubectl</code>(*)</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">yum install kubelet-1.17.17-0 kubeadm-1.17.17-0 kubectl-1.17.17-0 -y</span><br></pre></td></tr></table></div></figure>


        <h3 id="初始化-master"   >
          <a href="#初始化-master" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化-master" class="headerlink" title="初始化(master)"></a>初始化(master)</h3>
      <p>kubeadm init –image-repository registry.aliyuncs.com/google_containers –pod-network-cidr=10.244.0.0/16 –service-cidr=10.96.0.0/12</p>
<p>需要保存控制台打印的信息</p>
<p>按照提示操作</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></div></figure>


        <h3 id="安装finnal插件"   >
          <a href="#安装finnal插件" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装finnal插件" class="headerlink" title="安装finnal插件"></a>安装finnal插件</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></div></figure>


        <h3 id="加入集群-node"   >
          <a href="#加入集群-node" class="heading-link"><i class="fas fa-link"></i></a><a href="#加入集群-node" class="headerlink" title="加入集群(node)"></a>加入集群(node)</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubeadm join 10.1.20.80:6443 --token hos4yx.fi6m9wq589389c8d \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:832df73a20a3ebd51316bbc4c3b38045f7ea369c916e95b0a2c154ba3af4647a</span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>如果忘记改命令可以通过如下方式获取</p>
</blockquote>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></div></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></div></figure>

<p>可能出现报错：<code>The connection to the server localhost:8080 was refused </code></p>
<p>原因：kubernetes master没有与本机绑定，集群初始化的时候没有绑定，此时设置</p>
<p>在本机的环境变量即可解决问题</p>
<p>设置环境变量</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></div></figure>

<ul>
<li>Kubernetes的node，NotReady 如何查问题:</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">journalctl -f -u kubelet</span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></div></figure>


        <h3 id="安装dashboard"   >
          <a href="#安装dashboard" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装dashboard" class="headerlink" title="安装dashboard"></a>安装dashboard</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.5/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></div></figure>

<p>由于网络问题可能这里会失败，可以手动打开<code>recommended.yaml</code>复制到本地</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl get svc -n kubernetes-dashboard</span><br></pre></td></tr></table></div></figure>

<p>这里是<code>cluster-ip</code>暴露的svc，只能内部访问，需要改成<code>NodePort</code></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl patch svc kubernetes-dashboard -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;type&quot;:&quot;NodePort&quot;&#125;&#125;&#x27; -n kubernetes-dashboard</span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get svc -n kubernetes-dashboard</span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.103.11.69    &lt;none&gt;        8000/TCP   10s</span><br><span class="line">kubernetes-dashboard        ClusterIP   10.96.219.204   &lt;none&gt;        443/TCP    10s</span><br><span class="line">[root@master ~]# kubectl patch svc kubernetes-dashboard -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;type&quot;:&quot;NodePort&quot;&#125;&#125;&#x27; -n kubernetes-dashboard</span><br><span class="line">service/kubernetes-dashboard patched</span><br><span class="line">[root@master ~]# kubectl get svc -n kubernetes-dashboard</span><br><span class="line">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.103.11.69    &lt;none&gt;        8000/TCP        38s</span><br><span class="line">kubernetes-dashboard        NodePort    10.96.219.204   &lt;none&gt;        443:32420/TCP   38s</span><br></pre></td></tr></table></div></figure>

<p>浏览器访问： <code>https://10.1.20.80:32420/</code></p>
<ul>
<li><p>配置token</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@master ~]# cat admin-role.yaml </span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">name: admin</span><br><span class="line">annotations:</span><br><span class="line">  rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span><br><span class="line">roleRef:</span><br><span class="line">kind: ClusterRole</span><br><span class="line">name: cluster-admin</span><br><span class="line">apiGroup: rbac.authorization.k8s.io</span><br><span class="line">subjects:</span><br></pre></td></tr></table></div></figure></li>
<li><p>kind: ServiceAccount<br>name: admin<br>namespace: kube-system</p>
</li>
</ul>
<hr>
<p>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: admin<br>  namespace: kube-system<br>  labels:<br>    kubernetes.io/cluster-service: “true”<br>    addonmanager.kubernetes.io/mode: Reconcile</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">- 创建admin-role</span><br></pre></td></tr></table></div></figure>

<p>kubectl create -f admin-role.yaml</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">- 找到secret(注意这里secret名可能不一样，需要替换)</span><br></pre></td></tr></table></div></figure>

<p>kubectl -n kube-system get secret|grep admin-token</p>
<p>kubectl -n kube-system get secret admin-token-jvjjl -o jsonpath={.data.token}|base64 -d</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>[root@master ~]# kubectl -n kube-system get secret|grep admin-token<br>admin-token-jvjjl                                kubernetes.io/service-account-token   3      9s<br>[root@master ~]# kubectl -n kube-system get secret admin-token-jvjjl -o jsonpath={.data.token}|base64 -d<br>eyJhbGciOiJSUzI1NiIsImtpZCI6IndLSzJiRGxQcjg1Nzl6UG9GSTF3T0pSOTRfS2FiZUw5V0lwTk9JS0owOXcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi10b2tlbi1qdmpqbCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjIwNTdiYzZmLWRiMDQtNGRiMS1iZjg0LWE5MTkyZmRhMzVmNiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTphZG1pbiJ9.OgY0h3grdJlh7lQh4uEq1-8aIDW7AxJ7lmFjszlpEA41WN7OeTeedW-ORAUvjCv0CrrmqyIt4LL0k_SaBBzBW3Gb0FKfwDD09nhyBAAhWghE4ZAAPQHxAxYYPunlKfNO-PArs8a8Ow13YllnxSjgjspLDCEAJy4lpAyv-AWg-sc7ddEMHoV0izUkJQimmVfVAv_kgNmp7dc7xL48bg4kgGISp_DQAqFdWFWbevYIfSoybiut3gTaJvm-4S4REY3zR7iW5mwTzp-EwvEXNaPAHZK3Gs4xc2YChQ0R2xmKtigKhCvJd7bc2QCqO9neig2LP9TbdDQrdePCOlJ8n3KvRg</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">- 使用token登录</span><br><span class="line"></span><br><span class="line">![](kubeadm安装kubernetes集群/8387919-7a99cb05810b6de5.png)</span><br><span class="line"></span><br><span class="line">### 安装K9S</span><br><span class="line"></span><br><span class="line">- 参考[https://github.com/derailed/k9s](https://github.com/derailed/k9s)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 参考</span><br><span class="line"></span><br><span class="line">- https://juejin.cn/post/6986807406403518500</span><br></pre></td></tr></table></div></figure>]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes安装监控指标</title>
    <url>/2022/03/29/kubernetes%E5%AE%89%E8%A3%85%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<ul>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/kubernetes-sigs/metrics-server" >github</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


<blockquote>
<p>可能会遇到网络问题，手动创建<code>components.yaml</code></p>
</blockquote>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">    rbac.authorization.k8s.io/aggregate-to-admin: &quot;true&quot;</span><br><span class="line">    rbac.authorization.k8s.io/aggregate-to-edit: &quot;true&quot;</span><br><span class="line">    rbac.authorization.k8s.io/aggregate-to-view: &quot;true&quot;</span><br><span class="line">  name: system:aggregated-metrics-reader</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - metrics.k8s.io</span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  - nodes</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - &quot;&quot;</span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/stats</span><br><span class="line">  - namespaces</span><br><span class="line">  - configmaps</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: metrics-server-auth-reader</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: extension-apiserver-authentication-reader</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: metrics-server:system:auth-delegator</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:auth-delegator</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: https</span><br><span class="line">    port: 443</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: https</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: metrics-server</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxUnavailable: 0</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=443</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        - --metric-resolution=15s</span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        livenessProbe:</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /livez</span><br><span class="line">            port: https</span><br><span class="line">            scheme: HTTPS</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">        name: metrics-server</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 443</span><br><span class="line">          name: https</span><br><span class="line">          protocol: TCP</span><br><span class="line">        readinessProbe:</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /readyz</span><br><span class="line">            port: https</span><br><span class="line">            scheme: HTTPS</span><br><span class="line">          initialDelaySeconds: 20</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        securityContext:</span><br><span class="line">          readOnlyRootFilesystem: true</span><br><span class="line">          runAsNonRoot: true</span><br><span class="line">          runAsUser: 1000</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /tmp</span><br><span class="line">          name: tmp-dir</span><br><span class="line">      nodeSelector:</span><br><span class="line">        kubernetes.io/os: linux</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      serviceAccountName: metrics-server</span><br><span class="line">      volumes:</span><br><span class="line">      - emptyDir: &#123;&#125;</span><br><span class="line">        name: tmp-dir</span><br><span class="line">---</span><br><span class="line">apiVersion: apiregistration.k8s.io/v1</span><br><span class="line">kind: APIService</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">  name: v1beta1.metrics.k8s.io</span><br><span class="line">spec:</span><br><span class="line">  group: metrics.k8s.io</span><br><span class="line">  groupPriorityMinimum: 100</span><br><span class="line">  insecureSkipTLSVerify: true</span><br><span class="line">  service:</span><br><span class="line">    name: metrics-server</span><br><span class="line">    namespace: kube-system</span><br><span class="line">  version: v1beta1</span><br><span class="line">  versionPriority: 100</span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>可能遇到如下问题</p>
</blockquote>
<ul>
<li><p>1.镜像下载问题</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">docker search metrics-server</span><br><span class="line">docker pull f3n9/metrics-server</span><br><span class="line">docker tag f3n9/metrics-server k8s.gcr.io/metrics-server/metrics-server:v0.5.0</span><br><span class="line">注意每一个节点都需要执行</span><br></pre></td></tr></table></div></figure></li>
<li><p>2.启动日志日提示失败</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">unable to fully scrape metrics: unable to fully scrape metrics from node</span><br></pre></td></tr></table></div></figure></li>
</ul>
<p>解决办法如下</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">#根据日志发现，原因是unable to fully scrape metrics: unable to fully scrape metrics from node docker-desktop: unable to fetch metrics from node docker-desktop: Get &quot;https://192.168.65.3:10250/stats/summary?only_cpu_and_memory=true&quot;: x509: cannot validate certificate for 192.168.65.3 because it doesn&#x27;t contain any IP SANs</span><br><span class="line">#如何修复呢? -添加- --kubelet-insecure-tls</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=4443</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



<ul>
<li><p>执行<code>kubectl apply -f components.yaml</code></p>
</li>
<li><p>执行 <code>kubectl top  pod</code> 查看监控情况</p>
</li>
<li><p>刷新dashboard 即可看到监控信息</p>
</li>
</ul>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-7a79e4b8b6a3bf69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot集成prometheus+grafana</title>
    <url>/2022/05/08/spring-boot%E9%9B%86%E6%88%90prometheus-grafana/</url>
    <content><![CDATA[
        <h3 id="dcoker-compose安装prometheus-grafana"   >
          <a href="#dcoker-compose安装prometheus-grafana" class="heading-link"><i class="fas fa-link"></i></a><a href="#dcoker-compose安装prometheus-grafana" class="headerlink" title="dcoker-compose安装prometheus+grafana"></a>dcoker-compose安装prometheus+grafana</h3>
      <span id="more"></span>

<p>docker-compose.yaml</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  centos1:</span><br><span class="line">    image: centos</span><br><span class="line">    container_name: centos1</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9101:9100&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node_exporter:/root</span><br><span class="line">    command: /root/node_exporter</span><br><span class="line"></span><br><span class="line">  centos2:</span><br><span class="line">    image: centos</span><br><span class="line">    container_name: centos2</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9102:9100&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./node_exporter:/root</span><br><span class="line">    command: /root/node_exporter</span><br><span class="line"></span><br><span class="line">  prometheus:</span><br><span class="line">    image: prom/prometheus</span><br><span class="line">    container_name: prometheus</span><br><span class="line">    user: root</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9099:9090&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./prometheus:/etc/prometheus</span><br><span class="line">      - ./prometheus_data:/prometheus</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span><br><span class="line">      - &#x27;--storage.tsdb.path=/prometheus&#x27;</span><br><span class="line"></span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana</span><br><span class="line">    container_name: grafana</span><br><span class="line">    restart: always</span><br><span class="line">    user: root</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3000:3000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./grafana_data:/var/lib/grafana</span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>下载node_explorer <span class="exturl"><a class="exturl__link"   href="https://prometheus.io/download/#node_exporter" >https://prometheus.io/download/#node_exporter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
<p>prometheus/prometheus.yml</p>
<figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;prometheus:9090&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;linux-exporter&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;centos1:9100&#x27;</span>, <span class="string">&#x27;centos2:9100&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



<p>启动之后可能发现如下两个错误</p>
<ol>
<li>prometheus权限问题<br>加上<code>user: root</code>即可解决</li>
</ol>
<p><span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/questions/66221155/error-opening-query-log-file-file-prometheus-queries-active-err-open-prometh" >参考stacoverflow</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>[github issue 描述] <span class="exturl"><a class="exturl__link"   href="https://github.com/prometheus/prometheus/issues/5976" >https://github.com/prometheus/prometheus/issues/5976</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<ol start="2">
<li>grafana权限问题<br>报错如下<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mkdir: cannot create directory ‘/var/lib/grafana/plugins‘: Permission denied</span><br></pre></td></tr></table></div></figure>
给予<code>grafana_data</code>目录权限，即可解决<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">chmod 777 grafana_data</span><br></pre></td></tr></table></div></figure></li>
</ol>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20210607165427174.png" alt="image-20210607165427174"></p>
<p>grafana初始用户名密码都是<code>admin</code></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20210607165442722.png" alt="image-20210607165442722"></p>

        <h3 id="在grafana中添加数据源"   >
          <a href="#在grafana中添加数据源" class="heading-link"><i class="fas fa-link"></i></a><a href="#在grafana中添加数据源" class="headerlink" title="在grafana中添加数据源"></a>在grafana中添加数据源</h3>
      <p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20210607165832983.png" alt="image-20210607165832983"></p>

        <h3 id="添加自定义node-exporter监控（系统负载）"   >
          <a href="#添加自定义node-exporter监控（系统负载）" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加自定义node-exporter监控（系统负载）" class="headerlink" title="添加自定义node_exporter监控（系统负载）"></a>添加自定义node_exporter监控（系统负载）</h3>
      <p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20210607170107364.png" alt="image-20210607170107364"></p>
<p>选择数据源和指标</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20210607170136283.png" alt="image-20210607170136283"></p>

        <h3 id="添加插件库-node-exporter监控"   >
          <a href="#添加插件库-node-exporter监控" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加插件库-node-exporter监控" class="headerlink" title="添加插件库 node_exporter监控"></a>添加插件库 node_exporter监控</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://grafana.com/grafana/dashboards" >https://grafana.com/grafana/dashboards</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>  grafana 图标插件库</p>
<p>找到ID=8919的图标id</p>
<p>导入grafana中</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20210607165856880.png" alt="image-20210607165856880"></p>

        <h2 id="集成SpringBoot-Actuator-监控信息"   >
          <a href="#集成SpringBoot-Actuator-监控信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#集成SpringBoot-Actuator-监控信息" class="headerlink" title="集成SpringBoot Actuator 监控信息"></a>集成SpringBoot Actuator 监控信息</h2>
      <ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<ul>
<li>配置文件</li>
</ul>
<figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">exam-admin</span></span><br></pre></td></tr></table></div></figure>

<ul>
<li>配置Prometheus</li>
</ul>
<figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;actuator-exam-admin&#x27;</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">&#x27;/admin/actuator/prometheus&#x27;</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;172.22.1.44:8001&#x27;</span>]</span><br></pre></td></tr></table></div></figure>

<ul>
<li>配置grafana图标</li>
</ul>
<p>导入插件id=4701<br>注意选中prometheus数据源</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20210607170805367.png" alt="image-20210607170805367"></p>

        <h3 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考" class="headerlink" title="参考"></a>参考</h3>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://juejin.cn/post/6844903913481568270" >https://juejin.cn/post/6844903913481568270</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://juejin.cn/post/6844903975196573710" >https://juejin.cn/post/6844903975196573710</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/lihao21/article/details/104349219" >https://blog.csdn.net/lihao21/article/details/104349219</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>云原生</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 下MySQL绿色（ZIP）版安装</title>
    <url>/2019/09/02/windows-%E4%B8%8BMySQL%E7%BB%BF%E8%89%B2%EF%BC%88ZIP%EF%BC%89%E7%89%88%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[
        <h4 id="1-下载"   >
          <a href="#1-下载" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4>
      <p>下载mysql zip文件，到你要安装的目录 <span class="exturl"><a class="exturl__link"   href="https://downloads.mysql.com/archives/community/" >历史版本下载地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<span id="more"></span>


        <h4 id="2-解压配置"   >
          <a href="#2-解压配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-解压配置" class="headerlink" title="2.解压配置"></a>2.解压配置</h4>
      <p>  解压会发现根目录的配置文件my-default.ini 但是默认的配置文件会出现很多问题，比如中文乱码等。所以一般配置个人的默认配置文件：<br>  在解压后的路径下新建文件：my.ini，具体配置如下：(注意替换其中的路径为你的MySQL解压路径)</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line"> basedir =&quot;C:\Program Files\MySQL\mysql-5.7.14-winx64&quot;</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line"> datadir =&quot;C:\Program Files\MySQL\mysql-5.7.14-winx64\data&quot;</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></div></figure>

        <h4 id="3-安装MySQL"   >
          <a href="#3-安装MySQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-安装MySQL" class="headerlink" title="3.安装MySQL"></a>3.安装MySQL</h4>
      <p>以管理员身份运行命令提示符(很重要)，并切换到MySQL的bin目录下，输入mysqld install命令（注意是mysqld而不是mysql）回车，即可安装MySQL</p>

        <h4 id="4-启动MySQL服务"   >
          <a href="#4-启动MySQL服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-启动MySQL服务" class="headerlink" title="4.启动MySQL服务"></a>4.启动MySQL服务</h4>
      <p>   继续输入net start mysql来启动MySQL，输入net stop mysql 来关闭MySQL服务，也可以在服务里面手动启动/关闭MySQL服务；<br>   但是这块很可能会出现服务无法启动的错误，解决办法如下：<br>   还是以管理员身份运行cmd.exe，并且进入到MySQL安装目录中的bin目录，然后输入如下命令回车即可：mysqld –initialize-insecure –user=mysql<br>   执行完上面命令后，MySQL会自建一个data文件夹，并且建好默认数据库，登录的用户名为root，密码为空，之后就可以通过命令net start mysql启动mysql服务了。</p>

        <h4 id="5-配置环境变量"   >
          <a href="#5-配置环境变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h4>
      <p>   总不能每次链接MySQL都进入到bin下，所以…<br>   添加mysql\bin路径到系统path变量中即可，至此MySQL基本安装完成，<br>   打开cmd输入mysql -uroot -p 提示输入密码，默认安装的mysql是没有密码的，直接回车确定即可。</p>

        <h4 id="6-MySQL密码"   >
          <a href="#6-MySQL密码" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-MySQL密码" class="headerlink" title="6.MySQL密码"></a>6.MySQL密码</h4>
      <p> 为你的MySQL配置密码，以下是MySQL配置密码的常营三种方法，选择其中一种即可。</p>
<ol>
<li>用root 进入mysql后<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mysql&gt;set password =password(&#x27;你的密码&#x27;);</span><br><span class="line">  mysql&gt;flush privileges;</span><br></pre></td></tr></table></div></figure></li>
<li>使用GRANT语句 <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mysql&gt;grant all on *.* to &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的密码&#x27;with grant option ;</span><br><span class="line">mysql&gt;flush privileges;   </span><br></pre></td></tr></table></div></figure></li>
<li>进入mysql库修改user表<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;update user set password=password(&#x27;你的密码&#x27;) where user=&#x27;root&#x27;; </span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></div></figure></li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>一 Spring Data JPA介绍</title>
    <url>/2022/05/13/%E4%B8%80-Spring-Data-JPA%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[
        <h2 id="1-Spring-Data-JPA介绍"   >
          <a href="#1-Spring-Data-JPA介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-Spring-Data-JPA介绍" class="headerlink" title="1. Spring Data JPA介绍"></a>1. Spring Data JPA介绍</h2>
      <blockquote>
<p>是什么</p>
</blockquote>

        <h3 id="1-1-Spring-Data"   >
          <a href="#1-1-Spring-Data" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-Spring-Data" class="headerlink" title="1.1 Spring Data"></a>1.1 Spring Data</h3>
      <p>Spring Data 的使命是为数据访问提供熟悉且一致的、基于 Spring 的编程模型，同时仍保留底层数据存储的特殊特征。</p>
<p>它使得使用数据访问技术、关系和非关系数据库、map-reduce 框架和基于云的数据服务变得容易。这是一个总括项目，其中包含许多特定于给定数据库的子项目。这些项目是通过与这些令人兴奋的技术背后的许多公司和开发人员合作开发的。</p>
<span id="more"></span>

<p><strong>Spring子项目使用占比</strong></p>
<img src="https://haopeng.oss-cn-beijing.aliyuncs.com/blogblogimage-20220509194649583.png" style="zoom: 80%;" />


        <h3 id="1-2-什么是Spring-Data-JPA"   >
          <a href="#1-2-什么是Spring-Data-JPA" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-什么是Spring-Data-JPA" class="headerlink" title="1.2 什么是Spring Data JPA"></a>1.2 什么是Spring Data JPA</h3>
      <p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220509162437172.png" alt="image-20220509162437172"></p>

        <h4 id="JPA"   >
          <a href="#JPA" class="heading-link"><i class="fas fa-link"></i></a><a href="#JPA" class="headerlink" title="JPA "></a><strong>JPA</strong> <!-- {docsify-ignore} --></h4>
      <p>JPA是JDK5.0新增的协议，通过持久层注解（@Entity）来描述对象和数据库的表映射关系。将Java项目运行期的实体对象，通过一种Session持久化到数据库中去。</p>
<p><strong>JPA主要涵盖以下三方面的功能:</strong></p>
<ul>
<li>1)ORM映射元数据：JPA支持XML和注解两种元数据形式来描述定义实体与表之前的关系</li>
<li>2)通用API：通过操作对象实体来操作CRUD，框架屏蔽了jdbc的复杂性</li>
<li>3)JPQL 通过面向对象，而非面向数据库的查询语言来查询数据，避免程序与sql的耦合</li>
</ul>

        <h4 id="Spring-Data-JPA"   >
          <a href="#Spring-Data-JPA" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA "></a><strong>Spring Data JPA</strong> <!-- {docsify-ignore} --></h4>
      <p>为 Java Persistence API (JPA) 提供存储库支持。它简化了需要访问 JPA 数据源的应用程序的开发。</p>
<p> Jpa 就是定义了一系列标准，让实体类和数据库中的表建立一个对应的关系，当我们在使用 java 操作实体类的时候能达到操作数据库中表的效果(不用写sql ,就可以达到效果），jpa 的实现思想即是 ORM （Object Relation Mapping），对象关系映射，用于在关系型数据库和业务实体对象之间作一个映射。</p>
<p>jpa 并不是一个框架，是一类框架的总称，持久层框架 Hibernate 是 jpa 的一个具体实现，本文要谈的 spring data jpa 又是在 Hibernate 的基础之上的封装实现。</p>
<p><strong>总结：</strong>提供通用接口，和模板类。屏蔽存储介质差异。</p>

        <h3 id="1-3-特性"   >
          <a href="#1-3-特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-特性" class="headerlink" title="1.3 特性"></a>1.3 特性</h3>
      <ul>
<li>Sophisticated support to build repositories based on Spring and JPA</li>
<li>Support for <span class="exturl"><a class="exturl__link"   href="http://www.querydsl.com/" >Querydsl</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> predicates and thus type-safe JPA queries</li>
<li>Transparent auditing of domain class</li>
<li>Pagination support, dynamic query execution, ability to integrate custom data access code</li>
<li>Validation of <code>@Query</code> annotated queries at bootstrap time</li>
<li>Support for XML based entity mapping</li>
<li>JavaConfig based repository configuration by introducing <code>@EnableJpaRepositories</code>.</li>
</ul>
]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>SpringDataJPA</tag>
      </tags>
  </entry>
  <entry>
    <title>事务的传播机制与隔离级别</title>
    <url>/2019/09/02/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
    <content><![CDATA[
        <h3 id="什么是事务？"   >
          <a href="#什么是事务？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h3>
      <p>事务由一组操作构成，我们希望这组操作能够全部正确执行，如果这一组操作中的任意一个步骤发生错误，那么就需要回滚之前已经完成的操作。也就是同一个事务中的所有操作，要么全都正确执行，要么全都不要执行。</p>
<span id="more"></span>


        <h3 id="事务的四大特性-ACID"   >
          <a href="#事务的四大特性-ACID" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的四大特性-ACID" class="headerlink" title="事务的四大特性 ACID"></a>事务的四大特性 ACID</h3>
      <p>说到事务，就不得不提一下事务著名的四大特性。</p>
<ul>
<li>原子性<br>原子性要求，事务是一个不可分割的执行单元，事务中的所有操作要么全都执行，要么全都不执行。</li>
</ul>
<ul>
<li>一致性<br>一致性要求，事务在开始前和结束后，数据库的完整性约束没有被破坏。</li>
</ul>
<ul>
<li>隔离性<br>事务的执行是相互独立的，它们不会相互干扰，一个事务不会看到另一个正在运行过程中的事务的数据。</li>
</ul>
<ul>
<li>持久性<br>持久性要求，一个事务完成之后，事务的执行结果必须是持久化保存的。即使数据库发生崩溃，在数据库恢复后事务提交的结果仍然不会丢失。</li>
</ul>
<blockquote>
<p>注意：事务只能保证数据库的高可靠性，即数据库本身发生问题后，事务提交后的数据仍然能恢复；而如果不是数据库本身的故障，如硬盘损坏了，那么事务提交的数据可能就丢失了。这属于『高可用性』的范畴。因此，事务只能保证数据库的『高可靠性』，而『高可用性』需要整个系统共同配合实现。</p>
</blockquote>

        <h3 id="事务的隔离级别"   >
          <a href="#事务的隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3>
      <p>这里扩展一下，对事务的隔离性做一个详细的解释。</p>
<p>在事务的四大特性ACID中，要求的隔离性是一种严格意义上的隔离，也就是多个事务是串行执行的，彼此之间不会受到任何干扰。这确实能够完全保证数据的安全性，但在实际业务系统中，这种方式性能不高。因此，数据库定义了四种隔离级别，隔离级别和数据库的性能是呈反比的，隔离级别越低，数据库性能越高，而隔离级别越高，数据库性能越差。</p>

        <h4 id="事务并发执行会出现的问题"   >
          <a href="#事务并发执行会出现的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务并发执行会出现的问题" class="headerlink" title="事务并发执行会出现的问题"></a>事务并发执行会出现的问题</h4>
      <ul>
<li><p><strong>更新丢失</strong><br>当有两个并发执行的事务，更新同一行数据，那么有可能一个事务会把另一个事务的更新覆盖掉。<br>当数据库没有加任何锁操作的情况下会发生。</p>
</li>
<li><p><strong>脏读</strong><br>一个事务读到另一个尚未提交的事务中的数据。<br>该数据可能会被回滚从而失效。<br>如果第一个事务拿着失效的数据去处理那就发生错误了。</p>
</li>
<li><p><strong>不可重复读</strong><br>不可重复度的含义：一个事务对同一行数据读了两次，却得到了不同的结果。它具体分为如下两种情况：</p>
<ul>
<li><strong>虚读</strong>：在事务1两次读取同一记录的过程中，事务2对该记录进行了修改，从而事务1第二次读到了不一样的记录。</li>
<li><strong>幻读</strong>：事务1在两次查询的过程中，事务2对该表进行了插入、删除操作，从而事务1第二次查询的结果发生了变化。</li>
</ul>
</li>
</ul>
<blockquote>
<p>不可重复读 与 脏读 的区别？ 脏读读到的是尚未提交的数据，而不可重复读读到的是已经提交的数据，只不过在两次读的过程中数据被另一个事务改过了。</p>
</blockquote>

        <h4 id="数据库的四种隔离级别"   >
          <a href="#数据库的四种隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库的四种隔离级别" class="headerlink" title="数据库的四种隔离级别"></a>数据库的四种隔离级别</h4>
      <p>数据库一共有如下四种隔离级别：</p>
<ol>
<li><strong>Read uncommitted 读未提交</strong><br>在该级别下，一个事务对一行数据修改的过程中，不允许另一个事务对该行数据进行修改，但允许另一个事务对该行数据读。<br>因此本级别下，不会出现更新丢失，但会出现脏读、不可重复读。</li>
</ol>
<ol start="2">
<li><strong>Read committed 读已提交</strong><br>在该级别下，未提交的写事务不允许其他事务访问该行，因此不会出现脏读；但是读取数据的事务允许其他事务的访问该行数据，因此会出现不可重复读的情况。</li>
</ol>
<ol start="3">
<li><strong>Repeatable read 可重复读</strong><br>在该级别下，读事务禁止写事务，但允许读事务，因此不会出现同一事务两次读到不同的数据的情况（不可重复读），且写事务禁止其他一切事务。</li>
</ol>
<ol start="4">
<li><strong>Serializable 序列化</strong><br>该级别要求所有事务都必须串行执行，因此能避免一切因并发引起的问题，但效率很低。</li>
</ol>
<blockquote>
<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p>
</blockquote>
<div class="table-container"><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交(Read uncommitted)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>读已提交(Read committed)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>可重复读(Repeatable read)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>可串行化(Serializable )</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table></div>

        <h3 id="Spring中七种事务传播行为"   >
          <a href="#Spring中七种事务传播行为" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring中七种事务传播行为" class="headerlink" title="Spring中七种事务传播行为"></a>Spring中七种事务传播行为</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th>序号</th>
<th>事务传播行为类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>PROPAGATION_REQUIRED</td>
<td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td>
</tr>
<tr>
<td>2</td>
<td>PROPAGATION_SUPPORTS</td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行</td>
</tr>
<tr>
<td>3</td>
<td>PROPAGATION_MANDATORY</td>
<td>使用当前的事务，如果当前没有事务，就抛出异常。</td>
</tr>
<tr>
<td>4</td>
<td>PROPAGATION_REQUIRES_NEW</td>
<td>新建事务，如果当前存在事务，把当前事务挂起。</td>
</tr>
<tr>
<td>5</td>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td>
</tr>
<tr>
<td>6</td>
<td>PROPAGATION_NEVER</td>
<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td>7</td>
<td>PROPAGATION_NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td>
</tr>
</tbody></table></div>
<blockquote>
<p>可以看出1、2、3为一组，都表现对当前事务的支持，不同的在于当前不存在事务的处理方式；4、5、6为一组，都表现对当前事务的不支持，不同的在于当前有事务的处理方式。然后7单独一组。</p>
</blockquote>
<blockquote>
<p>举个小栗子，比如有一个service中有方法A，调用了方法B，方法B的传播行为是PROPAGATION_REQUIRED，那么如果方法A的传播行为也是PROPAGATION_REQUIRED，方法A运行的时候，开启了一个事务，方法A中执行到方法B的时候，察觉到当前已经有事务了，方法B就不会再创建新的事务，直接包含在方法A的事务当中。</p>
</blockquote>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;READ_COMMITTED&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;count*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--由于没有给method配置isolation属性，所以默认是isolation=‘DEFAULT’，也就是使用后端数据库默认的隔离级别。--&gt;</span></span><br></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>二 SpringDataJPA有什么优缺点</title>
    <url>/2022/05/13/%E4%BA%8C-SpringDataJPA%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
    <content><![CDATA[
        <h2 id="2-主流ORM框架对比"   >
          <a href="#2-主流ORM框架对比" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-主流ORM框架对比" class="headerlink" title="2. 主流ORM框架对比"></a>2. 主流ORM框架对比</h2>
      <blockquote>
<p> 为什么</p>
</blockquote>

        <h3 id="2-1-主流的orm"   >
          <a href="#2-1-主流的orm" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-主流的orm" class="headerlink" title="2.1 主流的orm"></a>2.1 主流的orm</h3>
      <ul>
<li>
        <h5 id="jdbc"   >
          <a href="#jdbc" class="heading-link"><i class="fas fa-link"></i></a><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h5>
      </li>
<li>
        <h5 id="jdbcTmplate"   >
          <a href="#jdbcTmplate" class="heading-link"><i class="fas fa-link"></i></a><a href="#jdbcTmplate" class="headerlink" title="jdbcTmplate"></a>jdbcTmplate</h5>
      </li>
<li>
        <h5 id="hibernete"   >
          <a href="#hibernete" class="heading-link"><i class="fas fa-link"></i></a><a href="#hibernete" class="headerlink" title="hibernete"></a>hibernete</h5>
      </li>
<li>
        <h5 id="mybatis"   >
          <a href="#mybatis" class="heading-link"><i class="fas fa-link"></i></a><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h5>
      </li>
<li>
        <h5 id="spring-data-jpa"   >
          <a href="#spring-data-jpa" class="heading-link"><i class="fas fa-link"></i></a><a href="#spring-data-jpa" class="headerlink" title="spring-data-jpa"></a>spring-data-jpa</h5>
      </li>
</ul>
<span id="more"></span>


        <h3 id="2-2-JPA优势"   >
          <a href="#2-2-JPA优势" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-JPA优势" class="headerlink" title="2.2 JPA优势"></a>2.2 JPA优势</h3>
      
        <h5 id="1）规范标准化"   >
          <a href="#1）规范标准化" class="heading-link"><i class="fas fa-link"></i></a><a href="#1）规范标准化" class="headerlink" title="1）规范标准化"></a>1）规范标准化</h5>
      
        <h5 id="2）简单易用，容易集成"   >
          <a href="#2）简单易用，容易集成" class="heading-link"><i class="fas fa-link"></i></a><a href="#2）简单易用，容易集成" class="headerlink" title="2）简单易用，容易集成"></a>2）简单易用，容易集成</h5>
      
        <h5 id="3）Spring生态"   >
          <a href="#3）Spring生态" class="heading-link"><i class="fas fa-link"></i></a><a href="#3）Spring生态" class="headerlink" title="3）Spring生态"></a>3）Spring生态</h5>
      
        <h5 id="4）支持面向对象的高级特性"   >
          <a href="#4）支持面向对象的高级特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#4）支持面向对象的高级特性" class="headerlink" title="4）支持面向对象的高级特性"></a>4）支持面向对象的高级特性</h5>
      
        <h5 id="5）事务性，并发访问、大数据量"   >
          <a href="#5）事务性，并发访问、大数据量" class="heading-link"><i class="fas fa-link"></i></a><a href="#5）事务性，并发访问、大数据量" class="headerlink" title="5）事务性，并发访问、大数据量"></a>5）事务性，并发访问、大数据量</h5>
      <blockquote>
<p>在国际上，<code>JPA/Hibernate</code>非常流行，而<code>MyBatis</code>很少人使用。以下图表来自 2018 年 JVM 生态报告（<span class="exturl"><a class="exturl__link"   href="https://xie.infoq.cn/link?target=https://link.zhihu.com/?target=https://snyk.io/blog/jvm-ecosystem-report-2018-platform-application/" >https://snyk.io/blog/jvm-ecosystem-report-2018-platform-application/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）</p>
</blockquote>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511160512629.png" alt="image-20220511160512629"></p>
]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>SpringDataJPA</tag>
      </tags>
  </entry>
  <entry>
    <title>五 重新认识SpringDataJPA</title>
    <url>/2022/05/13/%E4%BA%94-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86SpringDataJPA/</url>
    <content><![CDATA[
        <h2 id="5-重新认识Spring-Data-JPA"   >
          <a href="#5-重新认识Spring-Data-JPA" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-重新认识Spring-Data-JPA" class="headerlink" title="5. 重新认识Spring Data JPA"></a>5. 重新认识Spring Data JPA</h2>
      
        <h4 id="5-1-再谈Spring-Data-JPA"   >
          <a href="#5-1-再谈Spring-Data-JPA" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-1-再谈Spring-Data-JPA" class="headerlink" title="5.1 再谈Spring Data JPA"></a>5.1 再谈Spring Data JPA</h4>
      <ul>
<li>强的很</li>
<li>生态完善</li>
<li>技术服务于业务</li>
</ul>
<span id="more"></span>


        <h4 id="5-2-指导意义"   >
          <a href="#5-2-指导意义" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-2-指导意义" class="headerlink" title="5.2 指导意义"></a>5.2 指导意义</h4>
      <ul>
<li>规范|标准化</li>
<li>拓展性</li>
<li>spring</li>
<li>设计思路</li>
<li>设计模式运用</li>
</ul>

        <h4 id="5-3-参考文档"   >
          <a href="#5-3-参考文档" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-3-参考文档" class="headerlink" title="5.3 参考文档"></a>5.3 参考文档</h4>
      <ul>
<li><p><span class="exturl"><a class="exturl__link"   href="https://spring.io/projects/spring-data-jpa#learn" >Spring-Data-JPA官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://snyk.io/blog/jvm-ecosystem-report-2018-platform-application/" >2018 年 JVM 生态报告</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://www.byteslounge.com/subcategory/jpa" >国外老哥的一篇关于JPA锁和事务的博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>SpringDataJPA</tag>
      </tags>
  </entry>
  <entry>
    <title>使用K9S工具管理K8S集群资源</title>
    <url>/2022/05/08/%E4%BD%BF%E7%94%A8K9S%E5%B7%A5%E5%85%B7%E7%AE%A1%E7%90%86K8S%E9%9B%86%E7%BE%A4%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<blockquote>
<p>K9s是一个基于终端的UI，可以与Kubernetes集群进行交互。K9s的目的是简化导航，观察和管理已部署应用程序的过程。K9s持续监视Kubernetes的变化，并提供后续命令来与所观察到的资源进行交互。</p>
</blockquote>
<!-- more -->

<p><span class="exturl"><a class="exturl__link"   href="https://k9scli.io/" >官方文档 https://k9scli.io</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220225184052596.png" alt="image-20220225184052596"></h3>
        <h2 id="特征"   >
          <a href="#特征" class="heading-link"><i class="fas fa-link"></i></a><a href="#特征" class="headerlink" title="特征"></a>特征</h2>
      <ul>
<li>跟踪Kubernetes集群中运行的资源的实时活动。</li>
<li>处理Kubernetes标准资源和自定义资源定义。</li>
<li>跟踪与Pod、容器和节点等资源相关的实时指标。</li>
<li>提供标准的集群管理命令，例如log，scaling，port-forward，restart…</li>
<li>通过别名和热键自定义命令快捷方式。</li>
<li>支持扩展K9s插件以创建自己的集群命令。</li>
<li>强大的过滤模式：允许用户向下钻并查看与工作负载相关的资源。</li>
<li>误差放大：直接深入了解群集资源的问题。</li>
<li>外观可定制</li>
<li>通过K9s皮肤定义自己的终端外观。</li>
<li>按资源自定义/安排要显示的列。</li>
<li>提供查看最小或完整资源定义的切换</li>
<li>通过Pulses和XRay视图提供群集资源的概述。</li>
<li>RBAC</li>
<li>支持查看RBAC规则，例如群集/角色及其关联的绑定。</li>
<li>反向查找断言用户/组或ServiceAccount可以在集群上做什么。</li>
<li>可以直接从K9s内置的基准测试对HTTP - services/pods进行基准测试，以查看应用程序的运行情况，并相应地调整资源请求/限制。</li>
<li>K9s提供方便地遍历Kubernetes资源及其相关资源。</li>
</ul>

        <h2 id="快捷键操作"   >
          <a href="#快捷键操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h2>
      <p>K9s uses aliases to navigate most K8s resources.</p>
<div class="table-container"><table>
<thead>
<tr>
<th>操作</th>
<th>快捷键</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>Show active keyboard mnemonics and help</td>
<td><code>?</code></td>
<td></td>
</tr>
<tr>
<td>Show all available resource alias</td>
<td><code>ctrl-a</code></td>
<td></td>
</tr>
<tr>
<td>To bail out of K9s</td>
<td><code>:q</code>, <code>ctrl-c</code></td>
<td></td>
</tr>
<tr>
<td>View a Kubernetes resource using singular/plural or short-name</td>
<td><code>:</code>po⏎</td>
<td>accepts singular, plural, short-name or alias ie pod or pods</td>
</tr>
<tr>
<td>View a Kubernetes resource in a given namespace</td>
<td><code>:</code>alias namespace⏎</td>
<td></td>
</tr>
<tr>
<td>Filter out a resource view given a filter</td>
<td><code>/</code>filter⏎</td>
<td>Regex2 supported ie `fred</td>
</tr>
<tr>
<td>Inverse regex filter</td>
<td><code>/</code>! filter⏎</td>
<td>Keep everything that <em>doesn’t</em> match.</td>
</tr>
<tr>
<td>Filter resource view by labels</td>
<td><code>/</code>-l label-selector⏎</td>
<td></td>
</tr>
<tr>
<td>Fuzzy find a resource given a filter</td>
<td><code>/</code>-f filter⏎</td>
<td></td>
</tr>
<tr>
<td>Bails out of view/command/filter mode</td>
<td><code>&lt;esc&gt;</code></td>
<td></td>
</tr>
<tr>
<td>Key mapping to describe, view, edit, view logs,…</td>
<td><code>d</code>,<code>v</code>, <code>e</code>, <code>l</code>,…</td>
<td></td>
</tr>
<tr>
<td>To view and switch to another Kubernetes context</td>
<td><code>:</code>ctx⏎</td>
<td></td>
</tr>
<tr>
<td>To view and switch to another Kubernetes context</td>
<td><code>:</code>ctx context-name⏎</td>
<td></td>
</tr>
<tr>
<td>To view and switch to another Kubernetes namespace</td>
<td><code>:</code>ns⏎</td>
<td></td>
</tr>
<tr>
<td>To view all saved resources</td>
<td><code>:</code>screendump or sd⏎</td>
<td></td>
</tr>
<tr>
<td>To delete a resource (TAB and ENTER to confirm)</td>
<td><code>ctrl-d</code></td>
<td></td>
</tr>
<tr>
<td>To kill a resource (no confirmation dialog!)</td>
<td><code>ctrl-k</code></td>
<td></td>
</tr>
<tr>
<td>Launch pulses view</td>
<td><code>:</code>pulses or pu⏎</td>
<td></td>
</tr>
<tr>
<td>Launch XRay view</td>
<td><code>:</code>xray RESOURCE [NAMESPACE]⏎</td>
<td>RESOURCE can be one of po, svc, dp, rs, sts, ds, NAMESPACE is optional</td>
</tr>
<tr>
<td>Launch Popeye view</td>
<td><code>:</code>popeye or pop⏎</td>
<td>See <a href="#popeye">popeye</a></td>
</tr>
</tbody></table></div>
<hr>

        <h3 id="实践"   >
          <a href="#实践" class="heading-link"><i class="fas fa-link"></i></a><a href="#实践" class="headerlink" title="实践"></a>实践</h3>
      <ul>
<li>切换集群</li>
<li>查看别名</li>
<li>切换资源视图</li>
<li>扩缩容</li>
<li>杀死（强制）pod</li>
<li>查看日志</li>
<li>实时编辑yaml</li>
<li>describe</li>
</ul>

        <h3 id="彩蛋"   >
          <a href="#彩蛋" class="heading-link"><i class="fas fa-link"></i></a><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3>
      <p>自定义主题</p>
<p><span class="exturl"><a class="exturl__link"   href="https://k9scli.io/topics/skins/" >https://k9scli.io/topics/skins/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220225185149885.png" alt="image-20220225185149885"></p>

        <h2 id="Skin-Example"   >
          <a href="#Skin-Example" class="heading-link"><i class="fas fa-link"></i></a><a href="#Skin-Example" class="headerlink" title=" Skin Example"></a><img src="https://k9scli.io/assets/sections/examples.png" alt="img"> Skin Example</h2>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># $XDG_CONFIG_HOME/k9s/in_the_navy_skin.yml</span><br><span class="line">k9s:</span><br><span class="line">  # General K9s styles</span><br><span class="line">  body:</span><br><span class="line">    fgColor: dodgerblue</span><br><span class="line">    bgColor: &#x27;#ffffff&#x27;</span><br><span class="line">    logoColor: &#x27;#0000ff&#x27;</span><br><span class="line"></span><br><span class="line">  # ClusterInfoView styles</span><br><span class="line">  info:</span><br><span class="line">    fgColor: lightskyblue</span><br><span class="line">    sectionColor: steelblue</span><br><span class="line"></span><br><span class="line">  # Frame styles</span><br><span class="line">  frame:</span><br><span class="line">    # Borders styles</span><br><span class="line">    border:</span><br><span class="line">      fgColor: dodgerblue</span><br><span class="line">      focusColor: aliceblue</span><br><span class="line"></span><br><span class="line">    # MenuView attributes and styles</span><br><span class="line">    menu:</span><br><span class="line">      fgColor: darkblue</span><br><span class="line">      keyColor: cornflowerblue</span><br><span class="line">      # Used for favorite namespaces</span><br><span class="line">      numKeyColor: cadetblue</span><br><span class="line"></span><br><span class="line">    # CrumbView attributes for history navigation.</span><br><span class="line">    crumbs:</span><br><span class="line">      fgColor: white</span><br><span class="line">      bgColor: steelblue</span><br><span class="line">      activeColor: skyblue</span><br><span class="line"></span><br><span class="line">    # Resource status and update styles</span><br><span class="line">    status:</span><br><span class="line">      newColor: &#x27;#00ff00&#x27;</span><br><span class="line">      modifyColor: powderblue</span><br><span class="line">      addColor: lightskyblue</span><br><span class="line">      errorColor: indianred</span><br><span class="line">      highlightcolor: royalblue</span><br><span class="line">      killColor: slategray</span><br><span class="line">      completedColor: gray</span><br><span class="line"></span><br><span class="line">    # Border title styles.</span><br><span class="line">    title:</span><br><span class="line">      fgColor: aqua</span><br><span class="line">      bgColor: white</span><br><span class="line">      highlightColor: skyblue</span><br><span class="line">      counterColor: slateblue</span><br><span class="line">      filterColor: slategray</span><br><span class="line">  # Specific views styles</span><br><span class="line">  views:</span><br><span class="line">    # TableView attributes.</span><br><span class="line">    table:</span><br><span class="line">      fgColor: blue</span><br><span class="line">      bgColor: darkblue</span><br><span class="line">      cursorColor: aqua</span><br><span class="line">      # Header row styles.</span><br><span class="line">      header:</span><br><span class="line">        fgColor: white</span><br><span class="line">        bgColor: darkblue</span><br><span class="line">        sorterColor: orange</span><br><span class="line"></span><br><span class="line">    # YAML info styles.</span><br><span class="line">    yaml:</span><br><span class="line">      keyColor: steelblue</span><br><span class="line">      colonColor: blue</span><br><span class="line">      valueColor: royalblue</span><br><span class="line"></span><br><span class="line">    # Logs styles.</span><br><span class="line">    logs:</span><br><span class="line">      fgColor: white</span><br><span class="line">      bgColor: black</span><br></pre></td></tr></table></div></figure>


]]></content>
      <tags>
        <tag>工具</tag>
        <tag>云原生</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SpringIntegration实现分布式锁</title>
    <url>/2020/04/17/%E4%BD%BF%E7%94%A8SpringIntegration%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<blockquote>
<p>分布式锁的实现方式有很多种方式，然而<code>spring</code>家族中已经有了比较优雅的实现</p>
</blockquote>
<span id="more"></span>


        <h3 id="1-引入依赖"   >
          <a href="#1-引入依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-integration&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.integration&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-integration-redis&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-配置"   >
          <a href="#2-配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    # 连接超时时间（记得添加单位，Duration）</span><br><span class="line">    timeout: 10000ms</span><br><span class="line">    # Redis默认情况下有16个分片，这里配置具体使用的分片</span><br><span class="line">    # database: 0</span><br><span class="line">    lettuce:</span><br><span class="line">      pool:</span><br><span class="line">        # 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br><span class="line">        max-active: 8</span><br><span class="line">        # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span><br><span class="line">        max-wait: -1ms</span><br><span class="line">        # 连接池中的最大空闲连接 默认 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        # 连接池中的最小空闲连接 默认 0</span><br><span class="line">        min-idle: 0</span><br></pre></td></tr></table></div></figure>
<hr>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2020-04-17 14:49</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RedisLockConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisLockRegistry redisLockRegistry(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">        return new RedisLockRegistry(redisConnectionFactory, &quot;distributed-lock&quot;, 5000L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h3 id="3-编写controller"   >
          <a href="#3-编写controller" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-编写controller" class="headerlink" title="3.编写controller"></a>3.编写controller</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/lock&quot;)</span><br><span class="line">public void lock() throws InterruptedException &#123;</span><br><span class="line">    Lock lock = redisLockRegistry.obtain(&quot;lock&quot;);</span><br><span class="line">    stock = 1000;</span><br><span class="line">    CountDownLatch countDownLatch = new CountDownLatch(1000);</span><br><span class="line">    ExecutorService pool = Executors.newFixedThreadPool(10);</span><br><span class="line">    for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">        pool.execute(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                lock.tryLock(1,TimeUnit.SECONDS);</span><br><span class="line">                stock--;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    System.out.println(&quot;stock= &quot; + stock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h3 id="4-测试"   >
          <a href="#4-测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3>
      <ul>
<li><p>不加锁</p>
<blockquote>
<p>可以看到返回的结果会出现不一致（预期应该是0）<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-10b9bafcc84d095b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</blockquote>
</li>
<li><p>加锁后</p>
<blockquote>
<p>返回了正确的结果<br><img   src="https://upload-images.jianshu.io/upload_images/8387919-627b4083d0a2e713.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Redis</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>四 Spring Data JPA源码分析</title>
    <url>/2022/05/13/%E5%9B%9B-Spring-Data-JPA%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[
        <h2 id="4-Spring-Data-JPA-原理"   >
          <a href="#4-Spring-Data-JPA-原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-Spring-Data-JPA-原理" class="headerlink" title="4. Spring Data JPA 原理"></a>4. Spring Data JPA 原理</h2>
      
        <h3 id="4-1-思考"   >
          <a href="#4-1-思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1-思考" class="headerlink" title="4.1 思考"></a>4.1 思考</h3>
      <img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511134553451.png" alt="image-20220511134553451" style="zoom:80%;" />

<span id="more"></span>


        <h3 id="4-2-源码分析"   >
          <a href="#4-2-源码分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-源码分析" class="headerlink" title="4.2 源码分析"></a>4.2 源码分析</h3>
      
        <h4 id="4-2-1-Spring-Data-Jpa-自动配置"   >
          <a href="#4-2-1-Spring-Data-Jpa-自动配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-1-Spring-Data-Jpa-自动配置" class="headerlink" title="4.2.1 Spring Data Jpa 自动配置"></a>4.2.1 Spring Data Jpa 自动配置</h4>
      <p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511134910241.png" alt="image-20220511134910241"></p>
<p> <code> @Import  org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesRegistrar</code></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511091903320.png" alt="image-20220511091903320"></p>
<p>在该类中配置了 @EnableJpaRepositories</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511091942768.png"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511093031190.png" alt="image-20220511093031190"></p>
<p> <code>@Import org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrar</code></p>
<p>集成<code>RepositoryBeanDefinitionRegistrarSupport</code></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JpaRepositoriesRegistrar</span> <span class="keyword">extends</span> <span class="title class_">RepositoryBeanDefinitionRegistrarSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * (non-Javadoc)</span></span><br><span class="line"><span class="comment">	 * @see org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupport#getAnnotation()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; getAnnotation() &#123;</span><br><span class="line">		<span class="keyword">return</span> EnableJpaRepositories.class;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * (non-Javadoc)</span></span><br><span class="line"><span class="comment">	 * @see org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupport#getExtension()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> RepositoryConfigurationExtension <span class="title function_">getExtension</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JpaRepositoryConfigExtension</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="4-2-2-创建JpaRepositoryFactoryBean"   >
          <a href="#4-2-2-创建JpaRepositoryFactoryBean" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-2-创建JpaRepositoryFactoryBean" class="headerlink" title="4.2.2. 创建JpaRepositoryFactoryBean"></a>4.2.2. 创建JpaRepositoryFactoryBean</h4>
      <p><code>RepositoryBeanDefinitionRegistrarSupport</code>实现<code>ImportBeanDefinitionRegistrar</code></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.data.repository.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanNameGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EnvironmentAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConfigurationClassPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.NonNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RepositoryBeanDefinitionRegistrarSupport</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, ResourceLoaderAware, EnvironmentAware &#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RepositoryBeanDefinitionRegistrarSupport</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnvironment</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinitions(metadata, registry, ConfigurationClassPostProcessor.IMPORT_BEAN_NAME_GENERATOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry, BeanNameGenerator generator)</span> &#123;</span><br><span class="line">        Assert.notNull(metadata, <span class="string">&quot;AnnotationMetadata must not be null!&quot;</span>);</span><br><span class="line">        Assert.notNull(registry, <span class="string">&quot;BeanDefinitionRegistry must not be null!&quot;</span>);</span><br><span class="line">        Assert.notNull(<span class="built_in">this</span>.resourceLoader, <span class="string">&quot;ResourceLoader must not be null!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (metadata.getAnnotationAttributes(<span class="built_in">this</span>.getAnnotation().getName()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">AnnotationRepositoryConfigurationSource</span> <span class="variable">configurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationRepositoryConfigurationSource</span>(metadata, <span class="built_in">this</span>.getAnnotation(), <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.environment, registry, generator);</span><br><span class="line">            <span class="type">RepositoryConfigurationExtension</span> <span class="variable">extension</span> <span class="operator">=</span> <span class="built_in">this</span>.getExtension();</span><br><span class="line">            RepositoryConfigurationUtils.exposeRegistration(extension, registry, configurationSource);</span><br><span class="line">            <span class="type">RepositoryConfigurationDelegate</span> <span class="variable">delegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RepositoryConfigurationDelegate</span>(configurationSource, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.environment);</span><br><span class="line">            <span class="comment">// 委托类注册</span></span><br><span class="line">            delegate.registerRepositoriesIn(registry, extension);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; getAnnotation();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> RepositoryConfigurationExtension <span class="title function_">getExtension</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>最终生成代理类</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511101643918.png" alt="image-20220511101643918"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511101648015.png" alt="image-20220511101648015"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511101655585.png" alt="image-20220511101655585"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511101803945.png" alt="image-20220511101803945"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511101819136.png" alt="image-20220511101819136"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511101908120.png" alt="image-20220511101908120"></p>

        <h4 id="4-2-3-代理类SimpleJpaRepository"   >
          <a href="#4-2-3-代理类SimpleJpaRepository" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-3-代理类SimpleJpaRepository" class="headerlink" title="4.2.3. 代理类SimpleJpaRepository"></a>4.2.3. 代理类<code>SimpleJpaRepository</code></h4>
      <p>上一步我们确定了，jps是通过创建factory动态创建repository的，先看一看<code>JpaRepositoryFactoryBean</code> 源码</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = <span class="built_in">this</span>.createRepositoryFactory();</span><br><span class="line">        <span class="built_in">this</span>.factory.setQueryLookupStrategyKey(<span class="built_in">this</span>.queryLookupStrategyKey);</span><br><span class="line">        <span class="built_in">this</span>.factory.setNamedQueries(<span class="built_in">this</span>.namedQueries);</span><br><span class="line">        <span class="built_in">this</span>.factory.setEvaluationContextProvider((QueryMethodEvaluationContextProvider)<span class="built_in">this</span>.evaluationContextProvider.orElseGet(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> QueryMethodEvaluationContextProvider.DEFAULT;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="built_in">this</span>.factory.setBeanClassLoader(<span class="built_in">this</span>.classLoader);</span><br><span class="line">        <span class="built_in">this</span>.factory.setBeanFactory(<span class="built_in">this</span>.beanFactory);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.publisher != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.factory.addRepositoryProxyPostProcessor(<span class="keyword">new</span> <span class="title class_">EventPublishingRepositoryProxyPostProcessor</span>(<span class="built_in">this</span>.publisher));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RepositoryFactorySupport</span> <span class="variable">var10001</span> <span class="operator">=</span> <span class="built_in">this</span>.factory;</span><br><span class="line">        <span class="built_in">this</span>.repositoryBaseClass.ifPresent(var10001::setRepositoryBaseClass);</span><br><span class="line">        <span class="built_in">this</span>.repositoryFactoryCustomizers.forEach((customizer) -&gt; &#123;</span><br><span class="line">            customizer.customize(<span class="built_in">this</span>.factory);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">RepositoryFragments</span> <span class="variable">customImplementationFragment</span> <span class="operator">=</span> (RepositoryFragments)<span class="built_in">this</span>.customImplementation.map((xva$<span class="number">0</span>) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> RepositoryFragments.just(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;xva$<span class="number">0</span>&#125;);</span><br><span class="line">        &#125;).orElseGet(RepositoryFragments::empty);</span><br><span class="line">        <span class="type">RepositoryFragments</span> <span class="variable">repositoryFragmentsToUse</span> <span class="operator">=</span> ((RepositoryFragments)<span class="built_in">this</span>.repositoryFragments.orElseGet(RepositoryFragments::empty)).append(customImplementationFragment);</span><br><span class="line">        <span class="built_in">this</span>.repositoryMetadata = <span class="built_in">this</span>.factory.getRepositoryMetadata(<span class="built_in">this</span>.repositoryInterface);</span><br><span class="line">        <span class="built_in">this</span>.repository = Lazy.of(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> (Repository)<span class="built_in">this</span>.factory.getRepository(<span class="built_in">this</span>.repositoryInterface, repositoryFragmentsToUse);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.mappingContext.ifPresent((it) -&gt; &#123;</span><br><span class="line">            it.getPersistentEntity(<span class="built_in">this</span>.repositoryMetadata.getDomainType());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.lazyInit) &#123;</span><br><span class="line">            <span class="built_in">this</span>.repository.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>

<p>顺着getRepository方法继续追踪</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getRepository</span><span class="params">(Class&lt;T&gt; repositoryInterface, RepositoryFragments fragments)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(LogMessage.format(<span class="string">&quot;Initializing repository instance for %s…&quot;</span>, repositoryInterface.getName()));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Assert.notNull(repositoryInterface, <span class="string">&quot;Repository interface must not be null!&quot;</span>);</span><br><span class="line">		Assert.notNull(fragments, <span class="string">&quot;RepositoryFragments must not be null!&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">ApplicationStartup</span> <span class="variable">applicationStartup</span> <span class="operator">=</span> getStartup();</span><br><span class="line"></span><br><span class="line">		<span class="type">StartupStep</span> <span class="variable">repositoryInit</span> <span class="operator">=</span> onEvent(applicationStartup, <span class="string">&quot;spring.data.repository.init&quot;</span>, repositoryInterface);</span><br><span class="line"></span><br><span class="line">		repositoryBaseClass.ifPresent(it -&gt; repositoryInit.tag(<span class="string">&quot;baseClass&quot;</span>, it.getName()));</span><br><span class="line"></span><br><span class="line">		<span class="type">StartupStep</span> <span class="variable">repositoryMetadataStep</span> <span class="operator">=</span> onEvent(applicationStartup, <span class="string">&quot;spring.data.repository.metadata&quot;</span>,</span><br><span class="line">				repositoryInterface);</span><br><span class="line">		<span class="type">RepositoryMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> getRepositoryMetadata(repositoryInterface);</span><br><span class="line">		repositoryMetadataStep.end();</span><br><span class="line"></span><br><span class="line">		<span class="type">StartupStep</span> <span class="variable">repositoryCompositionStep</span> <span class="operator">=</span> onEvent(applicationStartup, <span class="string">&quot;spring.data.repository.composition&quot;</span>,</span><br><span class="line">				repositoryInterface);</span><br><span class="line">		repositoryCompositionStep.tag(<span class="string">&quot;fragment.count&quot;</span>, String.valueOf(fragments.size()));</span><br><span class="line"></span><br><span class="line">		<span class="type">RepositoryComposition</span> <span class="variable">composition</span> <span class="operator">=</span> getRepositoryComposition(metadata, fragments);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//指定RepositoryBaseClass为SimpleJpaRepository</span></span><br><span class="line">		<span class="type">RepositoryInformation</span> <span class="variable">information</span> <span class="operator">=</span> getRepositoryInformation(metadata, composition);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/// ...</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> repository;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></div></figure>



<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> RepositoryInformation <span class="title function_">getRepositoryInformation</span><span class="params">(RepositoryMetadata metadata,</span></span><br><span class="line"><span class="params">		RepositoryComposition composition)</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">RepositoryInformationCacheKey</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RepositoryInformationCacheKey</span>(metadata, composition);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> repositoryInformationCache.computeIfAbsent(cacheKey, key -&gt; &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 获取指定的Repository类</span></span><br><span class="line">		Class&lt;?&gt; baseClass = repositoryBaseClass.orElse(getRepositoryBaseClass(metadata));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultRepositoryInformation</span>(metadata, baseClass, composition);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>RepositoryFactorySupport</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the base class backing the actual repository instance. Make sure</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getTargetRepository(RepositoryInformation)&#125; returns an instance of this class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> metadata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata);</span><br></pre></td></tr></table></div></figure>

<p>JpaRepositoryFactory</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaRepositoryFactory</span> <span class="keyword">extends</span> <span class="title class_">RepositoryFactorySupport</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata) &#123;</span><br><span class="line">     <span class="keyword">return</span> SimpleJpaRepository.class;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="4-2-4-Spring-Data-JPA-是怎么匹配Repository接口的？"   >
          <a href="#4-2-4-Spring-Data-JPA-是怎么匹配Repository接口的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-4-Spring-Data-JPA-是怎么匹配Repository接口的？" class="headerlink" title="4.2.4. Spring Data JPA 是怎么匹配Repository接口的？"></a>4.2.4. Spring Data JPA 是怎么匹配Repository接口的？</h4>
      <p>RepositoryConfigurationExtensionSupport</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isStrictRepositoryCandidate</span><span class="params">(RepositoryMetadata metadata)</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (noMultiStoreSupport) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这里就是获取标识|（识别）类型</span></span><br><span class="line">	Collection&lt;Class&lt;?&gt;&gt; types = getIdentifyingTypes();</span><br><span class="line">	Collection&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt; annotations = getIdentifyingAnnotations();</span><br><span class="line">	<span class="type">String</span> <span class="variable">moduleName</span> <span class="operator">=</span> getModuleName();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (types.isEmpty() &amp;&amp; annotations.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!noMultiStoreSupport) &#123;</span><br><span class="line">			logger.warn(LogMessage.format(<span class="string">&quot;Spring Data %s does not support multi-store setups!&quot;</span>, moduleName));</span><br><span class="line">			noMultiStoreSupport = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></div></figure>

<p>JpaRepositoryConfigExtension</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Collection&lt;Class&lt;?&gt;&gt; getIdentifyingTypes() &#123;</span><br><span class="line">   <span class="keyword">return</span> Collections.&lt;Class&lt;?&gt;&gt; singleton(JpaRepository.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="4-3-总结"   >
          <a href="#4-3-总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-3-总结" class="headerlink" title="4.3 总结"></a>4.3 总结</h3>
      <p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220511135637658.png" alt="image-20220511135637658"></p>
]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>SpringDataJPA</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务下日志处理组件</title>
    <url>/2019/09/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8B%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>与传统单体应用不同，微服务下由于，项目模块、业务拆分成多个独立系统，数据库一般也相互独立。所以对于日志的统一管理和收集，也趋于复杂，这里提供一种通用思路借助于springboot自动配置和spring事件发布订阅、SpringAop以及组件化思想，构建一个通用日志组件</p>
</blockquote>
<span id="more"></span>


        <h4 id="实现思路与步骤"   >
          <a href="#实现思路与步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现思路与步骤" class="headerlink" title="实现思路与步骤"></a>实现思路与步骤</h4>
      
        <h5 id="1-通过自定义注解-ZgLog携带项目模块名和日志操作类型"   >
          <a href="#1-通过自定义注解-ZgLog携带项目模块名和日志操作类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-通过自定义注解-ZgLog携带项目模块名和日志操作类型" class="headerlink" title="1.通过自定义注解@ZgLog携带项目模块名和日志操作类型"></a>1.通过自定义注解@ZgLog携带项目模块名和日志操作类型</h5>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2019-06-09 17:42</span><br><span class="line"> */</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface ZgLog &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 服务(子系统)名 默认取$&#123;spring.application.name&#125;</span><br><span class="line">     */</span><br><span class="line">    String serverName() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 模块名</span><br><span class="line">     */</span><br><span class="line">    String module() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 日志描述信息</span><br><span class="line">     */</span><br><span class="line">    String description() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="2-通过Apo-Aspect拦截所有配置-ZgLog的业务请求"   >
          <a href="#2-通过Apo-Aspect拦截所有配置-ZgLog的业务请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-通过Apo-Aspect拦截所有配置-ZgLog的业务请求" class="headerlink" title="2.通过Apo Aspect拦截所有配置@ZgLog的业务请求"></a>2.通过Apo Aspect拦截所有配置@ZgLog的业务请求</h5>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2019-06-09 17:47</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">public class LogAspect &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br><span class="line">    private String serverName;</span><br><span class="line"></span><br><span class="line">    @Around(value = &quot;@annotation(zgLog)&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint point, ZgLog zgLog) throws Throwable &#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line">        String strClassName = point.getTarget().getClass().getName();</span><br><span class="line">        String strMethodName = point.getSignature().getName();</span><br><span class="line">        logger.debug(&quot;[类名]:&#123;&#125;,[方法]:&#123;&#125;&quot;, strClassName, strMethodName);</span><br><span class="line">        SysLog logVo = SysLogUtils.getSysLog();</span><br><span class="line">        logVo.setServerName(StringUtils.isNotBlank(zgLog.serverName()) ? zgLog.serverName() : serverName);</span><br><span class="line">        logVo.setModule(zgLog.module());</span><br><span class="line">        logVo.setDescription(zgLog.description());</span><br><span class="line">        // 发送异步日志事件</span><br><span class="line">        Long startTime = System.currentTimeMillis();</span><br><span class="line">        Object obj = point.proceed();</span><br><span class="line">        Long endTime = System.currentTimeMillis();</span><br><span class="line">        logVo.setTime(endTime - startTime);</span><br><span class="line">        SpringContextHolder.publishEvent(new SysLogEvent(logVo));</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>上面<code>spring.application.name</code>取自微服务中服务名称，用于<code>@ZgLog</code>注解中默认子系统名称，因为统一子系统名称相同，重复配置很臃肿。</p>
<p>另外，拦截到的日志信息通过<code>publishEvent</code>Spring事件发布功能进行日志消费</p>

        <h5 id="3-定义日志事件类"   >
          <a href="#3-定义日志事件类" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-定义日志事件类" class="headerlink" title="3.定义日志事件类"></a>3.定义日志事件类</h5>
      <p>只需集成Spring <code>ApplicationEvent</code>即可作为事件进行发布</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class SysLogEvent extends ApplicationEvent &#123;</span><br><span class="line"></span><br><span class="line">    public SysLogEvent(SysLog source) &#123;</span><br><span class="line">        super(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="4-在SpringContextHolder工具类中定义事件发布方法"   >
          <a href="#4-在SpringContextHolder工具类中定义事件发布方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-在SpringContextHolder工具类中定义事件发布方法" class="headerlink" title="4.在SpringContextHolder工具类中定义事件发布方法"></a>4.在<code>SpringContextHolder</code>工具类中定义事件发布方法</h5>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">	@Service</span><br><span class="line">@Lazy(false)</span><br><span class="line">public class SpringContextHolder implements ApplicationContextAware, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">	private static ApplicationContext applicationContext = null;</span><br><span class="line"></span><br><span class="line">	private static Logger logger = LoggerFactory.getLogger(SpringContextHolder.class);</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得存储在静态变量中的ApplicationContext.</span><br><span class="line">	 */</span><br><span class="line">	public static ApplicationContext getApplicationContext() &#123;</span><br><span class="line">		assertContextInjected();</span><br><span class="line">		return applicationContext;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class="line">	 */</span><br><span class="line">	@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">	public static &lt;T&gt; T getBean(String name) &#123;</span><br><span class="line">		assertContextInjected();</span><br><span class="line">		return (T) applicationContext.getBean(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</span><br><span class="line">	 */</span><br><span class="line">	public static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</span><br><span class="line">		assertContextInjected();</span><br><span class="line">		return applicationContext.getBean(requiredType);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 清除SpringContextHolder中的ApplicationContext为Null.</span><br><span class="line">	 */</span><br><span class="line">	public static void clearHolder() &#123;</span><br><span class="line">		if (logger.isDebugEnabled())&#123;</span><br><span class="line">			logger.debug(&quot;清除SpringContextHolder中的ApplicationContext:&quot; + applicationContext);</span><br><span class="line">		&#125;</span><br><span class="line">		applicationContext = null;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 实现ApplicationContextAware接口, 注入Context到静态变量中.</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class="line">		SpringContextHolder.applicationContext = applicationContext;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static  String getStatic()&#123;</span><br><span class="line">		return SpringContextHolder.getApplicationContext().getApplicationName()+ &quot;/static&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	/**</span><br><span class="line">	 * 实现DisposableBean接口, 在Context关闭时清理静态变量.</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void destroy() throws Exception &#123;</span><br><span class="line">		SpringContextHolder.clearHolder();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 检查ApplicationContext不为空.</span><br><span class="line">	 */</span><br><span class="line">	private static void assertContextInjected() &#123;</span><br><span class="line">		Validate.validState(applicationContext != null, &quot;applicaitonContext属性未注入, 请在applicationContext.xml中定义SpringContextHolder.&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 发布事件</span><br><span class="line">	 *</span><br><span class="line">	 * @param event</span><br><span class="line">	 */</span><br><span class="line">	public static void publishEvent(ApplicationEvent event) &#123;</span><br><span class="line">		if (applicationContext == null) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		applicationContext.publishEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>如上：<code>publishEvent</code>方法，用于发布日志消费（入库）事件</p>

        <h5 id="5-定义事件监听器"   >
          <a href="#5-定义事件监听器" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-定义事件监听器" class="headerlink" title="5.定义事件监听器"></a>5.定义事件监听器</h5>
      <p>事件发布后，必须也要有事件的监听消费，一一对应，类似消息队列JMS规范中的点对点事件模型</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2019-06-09 18:13</span><br><span class="line"> */</span><br><span class="line">public class SysLogListener &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(SysLogListener.class);</span><br><span class="line"></span><br><span class="line">    private RemoteLogService remoteLogService;</span><br><span class="line"></span><br><span class="line">    @Async</span><br><span class="line">    @Order</span><br><span class="line">    @EventListener</span><br><span class="line">    public void saveSysLog(SysLogEvent event) &#123;</span><br><span class="line">        SysLog sysLog = (SysLog) event.getSource();</span><br><span class="line">        logger.info(&quot;日志信息...&quot;);</span><br><span class="line">        //todo insert logs into mysql ...</span><br><span class="line">        remoteLogService.saveLog(sysLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RemoteLogService getRemoteLogService() &#123;</span><br><span class="line">        return remoteLogService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRemoteLogService(RemoteLogService remoteLogService) &#123;</span><br><span class="line">        this.remoteLogService = remoteLogService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SysLogListener(RemoteLogService remoteLogService) &#123;</span><br><span class="line">        this.remoteLogService = remoteLogService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

        <h5 id="6-日志统一消费入库"   >
          <a href="#6-日志统一消费入库" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-日志统一消费入库" class="headerlink" title="6.日志统一消费入库"></a>6.日志统一消费入库</h5>
      <p>日志的展示聚合一般在项目平台应用模块，所以这里采用feign组件统一保存日志</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@FeignClient(value = &quot;fire-ww-01&quot;, fallbackFactory = RemoteLogServiceFallbackFactory.class)</span><br><span class="line">public interface RemoteLogService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存日志</span><br><span class="line">     * @param sysLog log</span><br><span class="line">     * @return boolean</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/log&quot;)</span><br><span class="line">    boolean saveLog(@RequestBody SysLog sysLog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>其中<code>RemoteLogServiceFallbackFactory</code>为日志调用feigin熔断器，具体代码如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2019-06-09 18:17</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class RemoteLogServiceFallbackImpl implements RemoteLogService &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOG = LoggerFactory.getLogger(RemoteLogServiceFallbackImpl.class);</span><br><span class="line">    private Throwable cause;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean saveLog(SysLog sysLog) &#123;</span><br><span class="line">        LOG.error(&quot;feign 插入日志失败&quot;, cause);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Throwable getCause() &#123;</span><br><span class="line">        return cause;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCause(Throwable cause) &#123;</span><br><span class="line">        this.cause = cause;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

        <h5 id="7-在平台模块实现日志的写入和保存"   >
          <a href="#7-在平台模块实现日志的写入和保存" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-在平台模块实现日志的写入和保存" class="headerlink" title="7.在平台模块实现日志的写入和保存"></a>7.在平台模块实现日志的写入和保存</h5>
      <p> 这里的代码不再赘述根据自己项目的技术栈实现rest接口实现即可</p>

        <h5 id="8-组件化，自动化，开关化"   >
          <a href="#8-组件化，自动化，开关化" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-组件化，自动化，开关化" class="headerlink" title="8.组件化，自动化，开关化"></a>8.组件化，自动化，开关化</h5>
      <ul>
<li>通过<code>SpringBoot</code>自动配置实现零配置<br>在日志组件中穿件<code>resources/META-INF/spring.factories</code>文件(该文件是springboot自动配置读取文件)<code>SpringBoot</code>在启动时会根据此类文件自动加载相关配置    <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.zg.common.log.LogAutoConfiguration</span><br></pre></td></tr></table></div></figure></li>
<li><code>LogAutoConfiguration</code>自动配置类实现<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">@EnableAsync</span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnWebApplication</span><br><span class="line">@ConditionalOnProperty(name = &quot;enable&quot;,prefix = &quot;zg.log&quot;,havingValue = &quot;true&quot;,matchIfMissing = true)</span><br><span class="line">@EnableFeignClients(&#123;&quot;com.zg.common.log.feign&quot;&#125;)</span><br><span class="line">public class LogAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    private final RemoteLogService remoteLogService;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public SysLogListener sysLogListener() &#123;</span><br><span class="line">        return new SysLogListener(remoteLogService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public LogAspect logAspect() &#123;</span><br><span class="line">        return new LogAspect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LogAutoConfiguration(RemoteLogService remoteLogService) &#123;</span><br><span class="line">        this.remoteLogService = remoteLogService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
说明：</li>
</ul>
<ol>
<li><code>@EnableAsync</code>开启异步功能</li>
<li><code>@Configuration</code>声明配置类</li>
<li><code>@ConditionalOnWebApplication</code>只有web项目应用该组件时才会加载该配置</li>
<li><code>@EnableFeignClients</code>声明feign客户端以及组件包扫描路径</li>
</ol>
<ul>
<li>通过自定义属性灵活控制日志开关<br>上面<code>LogAutoConfiguration</code>日志自动配置类中<code>@ConditionalOnProperty(name = &quot;enable&quot;,prefix = &quot;zg.log&quot;,havingValue = &quot;true&quot;,matchIfMissing = true)</code><br>通过加载项目中<code>zg.log.enable</code>的值来决定是否加载该配置,为<code>true</code>时加载，默认<code>true</code></li>
</ul>
<p>例如，在项目配置文件中通过如下定义来开启/关闭日志功能</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">zg:</span><br><span class="line">  log:</span><br><span class="line">    enable: false/false</span><br></pre></td></tr></table></div></figure>

<p>以上就是微服务中日志处理的一种常见思路，到此项目中可以完成日志的统一入库与展示</p>

        <h3 id="拓展—组件化"   >
          <a href="#拓展—组件化" class="heading-link"><i class="fas fa-link"></i></a><a href="#拓展—组件化" class="headerlink" title="拓展—组件化"></a>拓展—组件化</h3>
      <blockquote>
<p>以上示例是在项目的公共依赖模块中，如common中定义，那么依赖该公共组件的项目就可实现日志的处理，如果别的项目也需要用，是不是在写一遍逻辑，其实可以利用mavne去抽离成公共日志组件</p>
</blockquote>
<ol>
<li>新建java maven工程，引入相关基础依赖，实现以上逻辑。</li>
<li>打包jar文件</li>
<li>安装jar文件到本地仓库或者maven私服<br>执行maven部署命令<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:/lib/com.zg.log.jar -DgroupId=com.zg -DartifactId=fire-log -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true</span><br></pre></td></tr></table></div></figure></li>
<li>任意项目模块中引入</li>
</ol>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.zg&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;fire-log&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure>
<p>由于引入的公共日志组件，所以日志组件的自动配置文件<code>spring.factories</code>也会自动加载，其实这也是为什么我们在引入SpringBoot的一些starter后可以零配置进行一些功能集成，例如<code>spring-data-redis</code>，其实也就是这个原理</p>
]]></content>
      <tags>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>认识云原生</title>
    <url>/2022/05/08/%E8%AE%A4%E8%AF%86%E4%BA%91%E5%8E%9F%E7%94%9F/</url>
    <content><![CDATA[<blockquote>
<p>云原生体系结构和技术是一种方法，用于设计、构造和操作在云中构建并充分利用云计算模型的工作负载。</p>
</blockquote>

        <h3 id="云原生的定义"   >
          <a href="#云原生的定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#云原生的定义" class="headerlink" title="云原生的定义"></a>云原生的定义</h3>
      
        <h4 id="Pivotal-最初的定义"   >
          <a href="#Pivotal-最初的定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#Pivotal-最初的定义" class="headerlink" title="Pivotal 最初的定义"></a>Pivotal 最初的定义</h4>
      <p>早在 2015 年 <code>Pivotal</code> 公司的 <code>Matt Stine</code> 写了一本叫做 <span class="exturl"><a class="exturl__link"   href="https://jimmysong.io/migrating-to-cloud-native-application-architectures/" >迁移到云原生应用架构</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的小册子，其中探讨了云原生应用架构的几个主要特征：</p>
<ul>
<li>符合 12 因素应用</li>
<li>面向微服务架构<!-- more --></li>
<li>自服务敏捷架构</li>
<li>基于 API 的协作</li>
<li>抗脆弱性</li>
</ul>

        <h4 id="CNCF-最初的定义"   >
          <a href="#CNCF-最初的定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#CNCF-最初的定义" class="headerlink" title="CNCF 最初的定义"></a>CNCF 最初的定义</h4>
      <p>到了 2015 年 Google 主导成立了云原生计算基金会（CNCF），起初 CNCF 对云原生（Cloud Native）的定义包含以下三个方面：</p>
<ul>
<li>应用容器化</li>
<li>面向微服务架构</li>
<li>应用支持容器的编排调度</li>
</ul>

        <h3 id="重定义"   >
          <a href="#重定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#重定义" class="headerlink" title="重定义"></a>重定义</h3>
      <p>到了 2018 年，随着近几年来云原生生态的不断壮大，所有主流云计算供应商都加入了该基金会，且从 <span class="exturl"><a class="exturl__link"   href="https://i.cncf.io/" >Cloud Native Landscape</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 中可以看出云原生有意蚕食原先非云原生应用的部分。CNCF 基金会中的会员以及容纳的项目越来越多，该定义已经限制了云原生生态的发展，CNCF 为云原生进行了重新定位。</p>
<p>以下是 CNCF 对云原生的<span class="exturl"><a class="exturl__link"   href="https://github.com/cncf/toc/blob/main/DEFINITION.md" >重新定义</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（中英对照）：</p>
<blockquote>
<p>Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.</p>
</blockquote>
<p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。</p>
<blockquote>
<p>These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.</p>
</blockquote>
<p>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。</p>
<blockquote>
<p>The Cloud Native Computing Foundation seeks to drive adoption of this paradigm by fostering and sustaining an ecosystem of open source, vendor-neutral projects. We democratize state-of-the-art patterns to make these innovations accessible for everyone.</p>
</blockquote>
<p>云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。</p>

        <h4 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h4>
      <p>关于什么是云原生的争论还在进行中，在笔者看来云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。Kubernetes 开启了云原生的序幕，服务网格 Istio 的出现，引领了后 Kubernetes 时代的微服务，serverless 的再次兴起，使得云原生从基础设施层不断向应用架构层挺进，我们正处于一个云原生的新时代。</p>

        <h4 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考" class="headerlink" title="参考"></a>参考</h4>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://cloudnative.to/" >https://cloudnative.to/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链设计模式</title>
    <url>/2022/05/08/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>责任链模式用于弱化请求发生者和请求处理者之间的关系。当多个对象都可以对请求进行处理，但不同的对象能处理的请求类型不同时，可以通过指向另一个对象的引用把这些对象连成一条责任链。当 Client 发出一个请求时，并不知道具体由哪个对象进行处理，它看到的只是一条责任链，将请求直接交给责任链，请求会在责任链中传递，直到找到一个能够进行处理的对象或者遍历结束找不到一个能够处理的对象为止。Java 语言中的异常处理机制就是责任链模式的一个典型应用例子。另外一些框架源码中也大量使用到责任链模式，比如SpringMVC中对拦截器的处理，Servelet中过滤器链的处理，SpringSecurity/shiro中认证逻辑的处理，以及Netty中piple中<code>ChannelHandler</code>的处理</p>
</blockquote>
<span id="more"></span>

<p><strong>实现功能</strong>：模拟Servelet中的请求过滤器链实现对输入字符串的过滤：对输入的字符分别过滤出<code>水果</code>、<code>蔬菜</code>字符串</p>

        <h3 id="1-if-else方式"   >
          <a href="#1-if-else方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-if-else方式" class="headerlink" title="1.if-else方式"></a>1.<code>if-else</code>方式</h3>
      <p>最简单的方式就是通过<code>if-elae</code>来实现，代码如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       String data = &quot;水果蔬菜鸡蛋和肉都很好吃&quot;;</span><br><span class="line"></span><br><span class="line">       if (data.contains(&quot;水果&quot;)) &#123;</span><br><span class="line">           data = data.replaceAll(&quot;水果&quot;, &quot;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       if (data.contains(&quot;蔬菜&quot;)) &#123;</span><br><span class="line">           data = data.replaceAll(&quot;蔬菜&quot;, &quot;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println(data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>
<p> 以上方式虽然可以实现功能，但是有如下缺点：</p>
<ol>
<li>不满足<code>开闭原则</code>如果增加过滤逻辑，则需要增加<code>if-else</code></li>
<li>调整顺序的话需要修改代码
        <h3 id="2-责任链设计模式方式"   >
          <a href="#2-责任链设计模式方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-责任链设计模式方式" class="headerlink" title="2.责任链设计模式方式"></a>2.<code>责任链设计模式</code>方式</h3>
      接下来通过<code>责任链设计模式来改造</code>，核心代码如下：</li>
</ol>
<ul>
<li><p>请求对象（被过滤对象）</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2021-07-05 19:52</span><br><span class="line"> */</span><br><span class="line">public class Request &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 请求数据</span><br><span class="line">     */</span><br><span class="line">    private String data;</span><br><span class="line"></span><br><span class="line">    public Request() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Request(String data) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getData() &#123;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setData(String data) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>过滤器链</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 过滤器链</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2021-07-05 19:51</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 过滤器链</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2020-08-05 19:51</span><br><span class="line"> */</span><br><span class="line">public class FilterChain &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private List&lt;Filter&gt; filters = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private int index = 0;</span><br><span class="line"></span><br><span class="line">    public void addFilter(Filter filter) &#123;</span><br><span class="line">        this.filters.add(filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Request doFilter(Request request) &#123;</span><br><span class="line">        </span><br><span class="line">        //执行终止条件</span><br><span class="line">        if (index &gt;= filters.size()) &#123;</span><br><span class="line">            return request;</span><br><span class="line">        &#125;</span><br><span class="line">        Filter filter = filters.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        </span><br><span class="line">        //类似递归执行</span><br><span class="line">        return filter.doFilter(request, this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li>
<li><p>过滤器接口</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2021-07-05 19:51</span><br><span class="line"> */</span><br><span class="line">public interface Filter &#123;</span><br><span class="line">    Request doFilter(Request request, FilterChain filterChain);</span><br><span class="line"></span><br><span class="line">    default Request filterByKeyWord(Request request, String word) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder(request.getData());</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            int index = sb.indexOf(word);</span><br><span class="line">            if (index != -1) &#123;</span><br><span class="line">                for (int i = 0; i &lt; word.length(); i++) &#123;</span><br><span class="line">                    sb.deleteCharAt(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new Request(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>水果过滤器</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2021-07-05 20:31</span><br><span class="line"> */</span><br><span class="line">public class FruitFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Request doFilter(Request request, FilterChain filterChain) &#123;</span><br><span class="line"></span><br><span class="line">        request = filterByKeyWord(request, &quot;水果&quot;);</span><br><span class="line"></span><br><span class="line">        return filterChain.doFilter(request);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>蔬菜过滤器</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2021-07-05 20:31</span><br><span class="line"> */</span><br><span class="line">public class VegetablesFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Request doFilter(Request request, FilterChain filterChain) &#123;</span><br><span class="line"></span><br><span class="line">        request = filterByKeyWord(request, &quot;蔬菜&quot;);</span><br><span class="line"></span><br><span class="line">        return filterChain.doFilter(request);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>测试类</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author haopeng</span><br><span class="line"> * @date 2021-07-05 20:43</span><br><span class="line"> */</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Request request = new Request(&quot;水果蔬菜鸡蛋和肉都很好吃&quot;);</span><br><span class="line"></span><br><span class="line">        FilterChain filterChain = new FilterChain();</span><br><span class="line"></span><br><span class="line">        //添加过滤器</span><br><span class="line">        filterChain.addFilter(new FruitFilter());</span><br><span class="line">        filterChain.addFilter(new VegetablesFilter());</span><br><span class="line"></span><br><span class="line">        //执行</span><br><span class="line"></span><br><span class="line">        request = filterChain.doFilter(request);</span><br><span class="line">        System.out.println(request.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li><p>执行结果</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">鸡蛋和肉都很好吃</span><br></pre></td></tr></table></div></figure></li>
</ul>
<p>类图如下：<br><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/uPic/1240-20220508212410430.png"></p>

        <h4 id="责任链模式的优点"   >
          <a href="#责任链模式的优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#责任链模式的优点" class="headerlink" title="责任链模式的优点"></a>责任链模式的优点</h4>
      <p>1.如果要加一些过滤的关键字，只需要加一个过滤的类，然后再添加到过滤器的集合中，不需要对原来的代码进行侵入式的开发。符合开闭原则。</p>
<p>2.执行顺序要变更的话，也不需要侵入式的改代码，只需要改一下添加过滤器的顺序。比如在Servlet中，过滤器的顺序就是按xml文件定义的顺序。或通过<code>@Order</code>注解完成</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之泛型</title>
    <url>/2022/05/08/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[
        <h3 id="泛型概述以及泛型类"   >
          <a href="#泛型概述以及泛型类" class="heading-link"><i class="fas fa-link"></i></a><a href="#泛型概述以及泛型类" class="headerlink" title="泛型概述以及泛型类"></a>泛型概述以及泛型类</h3>
      <ul>
<li>泛型就是类型参数化，处理的数据类型不是固定的，而是可以作为参数传入；</li>
<li>泛型的核心: 告诉编译器想使用什么类型，然后编译器帮你处理一切；</li>
</ul>
<span id="more"></span>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericClass &#123;</span><br><span class="line"></span><br><span class="line">    private static class Pair&lt;U,V&gt;&#123;</span><br><span class="line">        private U first;</span><br><span class="line">        private V second;</span><br><span class="line"></span><br><span class="line">        public Pair(U first, V second) &#123;</span><br><span class="line">            this.first = first;</span><br><span class="line">            this.second = second;</span><br><span class="line">        &#125;</span><br><span class="line">        public U getFirst() &#123;</span><br><span class="line">            return first;</span><br><span class="line">        &#125;</span><br><span class="line">        public V getSecond() &#123;</span><br><span class="line">            return second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Pair&lt;String,Integer&gt;pair = new Pair&lt;&gt;(&quot;zhangsan&quot;, 23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>为什么Java不直接使用普通的Object类呢 ？</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericClass2 &#123;</span><br><span class="line"></span><br><span class="line">    private static class Pair&#123; //　Generic Class</span><br><span class="line">        private Object first;</span><br><span class="line">        private Object second;</span><br><span class="line"></span><br><span class="line">        public Pair(Object first, Object second) &#123;</span><br><span class="line">            this.first = first;</span><br><span class="line">            this.second = second;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Object getFirst() &#123;</span><br><span class="line">            return first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Object getSecond() &#123;</span><br><span class="line">            return second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Pair pair = new Pair(&quot;zhangsan&quot;, 23);</span><br><span class="line">        String name = (String) pair.getFirst();</span><br><span class="line">        Integer age = (Integer) pair.getSecond();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<blockquote>
<p>其实是可以这样的，而且Java的内部就是这样实现的。</p>
</blockquote>
<ul>
<li>Java有Java编译器和Java虚拟机，编译器将Java源代码转换为.class文件，虚拟机加载并运行.class文件。</li>
<li>对于泛型类，Java编译器会将泛型代码转换为普通的非泛型代码，就像上面的普通Pair类代码及其使用代码一样，将类型参数T擦除，替换为Object，插入必要的强制类型转换。Java虚拟机实际执行的时候，它是不知道泛型这回事的，它只知道普通的类及代码。</li>
<li>再次强调，Java泛型是通过擦除实现的，类定义中的类型参数如T会被替换为Object，在程序运行过程中，不知道泛型的实际类型参数，比如Pair<Integer>，运行中只知道Pair，而不知道Integer。</li>
</ul>
<blockquote>
<p>那为什么还要使用泛型呢? 泛型有两个好处:</p>
</blockquote>
<ul>
<li>更好的安全性；</li>
<li>更高的可读性；
        <h3 id="泛型方法"   >
          <a href="#泛型方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3>
      </li>
<li>要定义泛型方法，只需要将泛型参数列表置于返回值前；</li>
<li>注意: 一个方法是不是泛型的, 和它所在的类是不是泛型没有任何关系；</li>
<li>泛型方法调用的时候，不需要指定类型参数的实际类型，Java编译器会推断出来；<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericMethod &#123;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; int indexOf(T[] arr, T ele)&#123; // Generic Method</span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">            if(arr[i].equals(ele))</span><br><span class="line">                return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(indexOf(new Integer[]&#123;1, 3, 5, 7&#125;, 5));</span><br><span class="line">        System.out.println(indexOf(new String[]&#123;&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;&#125;, &quot;lisi&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
实际上泛型类和泛型方法没有联系:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//泛型类的泛型和泛型方法的泛型没有一点关系</span><br><span class="line">public class GenericClassMethod&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; void testMethod(T t)&#123;</span><br><span class="line">        System.out.println(t.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T testMethod1(T t)&#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        GenericClassMethod&lt;String&gt;gcm = new GenericClassMethod&lt;&gt;();</span><br><span class="line">        gcm.testMethod(&quot;generic&quot;);</span><br><span class="line">        Integer res = gcm.testMethod1(new Integer(10));</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// java.lang.String</span><br><span class="line">// 10</span><br></pre></td></tr></table></div></figure>

        <h3 id="三、泛型接口"   >
          <a href="#三、泛型接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、泛型接口" class="headerlink" title="三、泛型接口"></a>三、泛型接口</h3>
      接口也可以是泛型的，例如，Java中的<code>Comparable</code>和<code>Comparator</code>：<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public interface Comparable&lt;T&gt; &#123;</span><br><span class="line">    public int compareTo(T o);</span><br><span class="line">&#125;</span><br><span class="line">public interface Comparator&lt;T&gt; &#123;</span><br><span class="line">    int compare(T o1, T o2);</span><br><span class="line">    boolean equals(Object obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h3 id="四、extends、-lt-、参数类型必须是给定的或者子类型"   >
          <a href="#四、extends、-lt-、参数类型必须是给定的或者子类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、extends、-lt-、参数类型必须是给定的或者子类型" class="headerlink" title="四、extends、&lt;=、参数类型必须是给定的或者子类型"></a>四、extends、&lt;=、参数类型必须是给定的或者子类型</h3>
      
        <h4 id="1、上界为某个具体类"   >
          <a href="#1、上界为某个具体类" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、上界为某个具体类" class="headerlink" title="1、上界为某个具体类"></a>1、上界为某个具体类</h4>
      </li>
<li>可以使用extends来限定一个上界，此时参数类型必须是给定的类型或者其子类型；</li>
<li>比如定义一个NumberPair类，限定两个参数类型必须是Number或者子类型，这样限定之后，在子类中，first、second变量就可以当做Number进行处理了，比如调用Number类中的方法doubleValue()、intValue等；<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">// 示例代码，(省略了上面的Pair&lt;U,V&gt;类)</span><br><span class="line">public class GenericExtends &#123;</span><br><span class="line"></span><br><span class="line">    private static class NumberPair&lt;U extends Number, V extends Number&gt; extends Pair&lt;U, V&gt;&#123;</span><br><span class="line"></span><br><span class="line">        public NumberPair(U first, V second) &#123; // must realize (achieve)</span><br><span class="line">            super(first, second);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public double getSum()&#123;</span><br><span class="line">            return getFirst().doubleValue() + getSecond().intValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        NumberPair&lt;Double, Integer&gt;np = new NumberPair&lt;&gt;(3.3, 3); // &lt;U, V&gt;可以是 Number的子类，即 &lt;=</span><br><span class="line">        System.out.println(np.getSum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h4 id="2-上界为某个接口"   >
          <a href="#2-上界为某个接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-上界为某个接口" class="headerlink" title="2.上界为某个接口"></a>2.上界为某个接口</h4>
      在泛型方法中，一种常见的限定类型是必须实现Comparable接口:</li>
<li>下面的例子，要进行元素的比较，要求元素必须实现Comparable接口， 所以给类型参数设置了一个上边界Comparable 必须实现Comparable接口；</li>
<li>可以理解为： T是一种数据类型，必须实现Comparable,且必须可以与相同类型的元素进行比较；<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ublic class GenericExtends2 &#123;</span><br><span class="line"></span><br><span class="line">    // 要进行元素的比较，要求元素必须实现Comparable接口</span><br><span class="line">    // 所以给类型参数设置了一个上边界Comparable,T 必须实现Comparable接口</span><br><span class="line">    public static &lt;T extends Comparable&gt; T getMax(T[] arr)&#123;</span><br><span class="line">        T max = arr[0];</span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">            if(arr[i].compareTo(max) &gt; 0)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 不过上面这么写会有警告 因为Comparable是一个泛型接口，它也需要一个类型参数，所以下面的写法比较好</span><br><span class="line">    // 理解: T是一种数据类型，必须实现Comparable,且必须可以与相同类型的元素进行比较</span><br><span class="line">    public static &lt;T extends Comparable&lt;T&gt; &gt; T getMax2(T[] arr)&#123;</span><br><span class="line">        T max = arr[0];</span><br><span class="line">        for(int i = 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">            if(arr[i].compareTo(max) &gt; 0)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h4 id="3-上界为其他参数类型"   >
          <a href="#3-上界为其他参数类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-上界为其他参数类型" class="headerlink" title="3.上界为其他参数类型"></a>3.上界为其他参数类型</h4>
      </li>
<li>这里模仿ArrayList来创建一个类， 并想着实现其中的addAll()方法，但是如果不使用一个上界的话，会出现无法添加子类的情况，看下面的代码，Number的集合理应可以添加Integer类型的元素。<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericExtends3 &#123;</span><br><span class="line"></span><br><span class="line">    // seems like ArrayList</span><br><span class="line">    private static class DynamicArray&lt;E&gt;&#123;</span><br><span class="line"></span><br><span class="line">        private static final int DEFAULT_CAPACITY = 10;</span><br><span class="line">        private int size;</span><br><span class="line">        private Object[] data;</span><br><span class="line"></span><br><span class="line">        public DynamicArray() &#123;</span><br><span class="line">            this.data = new Object[DEFAULT_CAPACITY];</span><br><span class="line">        &#125;</span><br><span class="line">        private void ensureCapacity(int minCapacity)&#123;  // simulate ArrayList</span><br><span class="line">            int oldCapacity = data.length;</span><br><span class="line">            if(oldCapacity &gt;= minCapacity)</span><br><span class="line">                return;</span><br><span class="line">            int newCapacity = oldCapacity * 2;</span><br><span class="line">            if(newCapacity &lt; minCapacity) //如果扩展2倍还是小于minCapacity，就直接扩展成为minCapacity</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            data = Arrays.copyOf(data, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void add(E e)&#123;</span><br><span class="line">            ensureCapacity(size + 1);</span><br><span class="line">            data[size++] = e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public E get(int index)&#123;</span><br><span class="line">            return (E)data[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int size()&#123;</span><br><span class="line">            return size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public E set(int index, E e)&#123;</span><br><span class="line">            E oldValue = get(index);</span><br><span class="line">            data[index] = e;</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        public void addAll(DynamicArray&lt;E&gt;arr)&#123;</span><br><span class="line">            for(int i = 0; i &lt; arr.size; i++)&#123;</span><br><span class="line">                add(arr.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        DynamicArray&lt;Number&gt;numbers = new DynamicArray&lt;&gt;();</span><br><span class="line">        DynamicArray&lt;Integer&gt;ints = new DynamicArray&lt;&gt;();</span><br><span class="line">        ints.add(10);</span><br><span class="line">        ints.add(20);</span><br><span class="line">//        numbers.addAll(ints); // compile error</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
那个需求感觉上是可以，但是通过反证法可以发现是行不通的，看下面代码以及解释:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">DynamicArray&lt;Number&gt;numbers = new DynamicArray&lt;&gt;();</span><br><span class="line">numbers = ints; // 假设合法</span><br><span class="line">numbers.add(new Double(3.3)); // 那么这一样也可以，此时因为numbers和ints指向的同一个堆区空间，则ints中出现double类型值，显然不合理</span><br><span class="line"></span><br><span class="line">//再看一个例子</span><br><span class="line">List&lt;Object&gt;olist = null;</span><br><span class="line">List&lt;String&gt;slist = new ArrayList&lt;&gt;();</span><br><span class="line">olist = slist; // err</span><br><span class="line">//如果上述假设合理</span><br><span class="line">olist.add(111);</span><br><span class="line">//则slist中就会出现Integer类型的值，显然不合理</span><br></pre></td></tr></table></div></figure>
所以，可以使用上界类型将addAll方法改进如下:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//传入的是T类型，限定为是E类型或者E的子类类型</span><br><span class="line">public &lt;T extends E&gt;void addAll(DynamicArray&lt;T&gt;arr)&#123;</span><br><span class="line">    for(int i = 0; i &lt; arr.size; i++)&#123;</span><br><span class="line">        add(arr.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h3 id="五、通配符"   >
          <a href="#五、通配符" class="heading-link"><i class="fas fa-link"></i></a><a href="#五、通配符" class="headerlink" title="五、通配符?"></a>五、通配符?</h3>
      
        <h4 id="1、有限定类型通配符的简单使用"   >
          <a href="#1、有限定类型通配符的简单使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、有限定类型通配符的简单使用" class="headerlink" title="1、有限定类型通配符的简单使用"></a>1、有限定类型通配符的简单使用</h4>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public void addAll(DynamicArray&lt;? extends E&gt;arr)&#123;</span><br><span class="line">    for(int i = 0; i &lt; arr.size; i++)&#123;</span><br><span class="line">        add(arr.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<code>&lt;? extends E&gt;</code>表示有限定通配符，匹配E或E的某个子类型，具体是什么子类型是未知的。 看一下<code>public &lt;T extends E&gt;void addAll(DynamicArray&lt;T&gt;arr)</code> 和<code>public void addAll(DynamicArray&lt;? extends E&gt;arr)</code>的区别:</li>
<li><code>&lt;T extends E&gt;</code>用于定义类型参数，它声明了一个类型参数T，可放在泛型类中类名的后面、泛型方法返回值前面；</li>
<li><code>&lt;? extends E&gt;</code>用于实例化类型参数，它用于实例化泛型变量中的类型参数，只是这个具体类型是未知的，只知道它是E或E的子类型；
        <h4 id="2、无限定类型通配符"   >
          <a href="#2、无限定类型通配符" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、无限定类型通配符" class="headerlink" title="2、无限定类型通配符"></a>2、无限定类型通配符</h4>
      简单使用: 第一种方式使用通配符，第二种方式使用类型参数，可以达到同样的目的:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//使用通配符  </span><br><span class="line">public static int indexOf(DynamicArray&lt;?&gt; arr, Object elm)&#123;</span><br><span class="line">    for(int i = 0; i &lt; arr.size(); i++)&#123;</span><br><span class="line">        if(arr.get(i).equals(elm))</span><br><span class="line">            return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用类型参数 type parameter</span><br><span class="line">public static &lt;T&gt; int indexOf2(DynamicArray&lt;T&gt; arr, Object elm)&#123;</span><br><span class="line">    for(int i = 0; i &lt; arr.size(); i++)&#123;</span><br><span class="line">        if(arr.get(i).equals(elm))</span><br><span class="line">            return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
但是通配符也有一些限制</li>
<li>1)、第一条限制: 只能读，不能写<br>比如 ，下面三行代码就会报错 :<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class WildcardCharacter &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; ints = new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;? extends Number&gt; numbers = ints; // 使用extends通配符指定上界</span><br><span class="line"></span><br><span class="line">        Integer a = 10;</span><br><span class="line">//        numbers.add(a); // err</span><br><span class="line">//        numbers.add(Object(a)); //err</span><br><span class="line">//        numbers.add(Number(a)); //err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li>解释: ?表示类型安全无知，? extends Number表示是Number的某个子类型，但不知道具体子类型，如果允许写入，Java就无法确保类型安全性，所以干脆禁止；</li>
<li>这种限制关系是好的，但是这使得很多理应可以完成的操作可能会出现错误；<br>比如: 下面的代码中最后两行会报错，原因就是不能修改？通配符的值：<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static void swap(ArrayList&lt;?&gt; arr, int i, int j)&#123;</span><br><span class="line">     Object tmp = arr.get(i);</span><br><span class="line">     arr.set(i, arr.get(j)); // can&#x27;t change the value</span><br><span class="line">     arr.set(j, tmp);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure>
再看一个例子：在方法传递参数的时候，不能往参数中添加元素:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericExtends4 &#123;</span><br><span class="line"></span><br><span class="line">	private static class Fruit &#123;&#125;</span><br><span class="line">	private static class Apple extends Fruit&#123;&#125;</span><br><span class="line">	private static class Pear extends Fruit&#123;&#125;</span><br><span class="line">	private static class FuShiApple extends Apple&#123;&#125;</span><br><span class="line"></span><br><span class="line">    static class Clazz&lt;T extends Fruit&gt;&#123;  //创建的类必须是Fruit的子类//为了自己类中使用这个类</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Clazz&lt;Fruit&gt;t = new Clazz&lt;&gt;();  // &lt;= 关系</span><br><span class="line">		Clazz&lt;Apple&gt;t2 = new Clazz&lt;&gt;();</span><br><span class="line">		Clazz&lt;Pear&gt;t3 = new Clazz&lt;&gt;();</span><br><span class="line">		Clazz&lt;FuShiApple&gt;t4= new Clazz&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		//调用方法</span><br><span class="line">		List&lt;? extends Fruit&gt; list1 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list1);</span><br><span class="line">		List&lt;Fruit&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list2);</span><br><span class="line">		List&lt;Apple&gt; list3 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list3);</span><br><span class="line">		List&lt;? extends Apple&gt; list4 = new ArrayList&lt;FuShiApple&gt;();  //存放Apple以及它的子类</span><br><span class="line">		add(list4);</span><br><span class="line">		List&lt;FuShiApple&gt; list5 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		//？为什么错误 : 因为 ? 等同于？ extends Object :不是&lt;= Fruit的 下面两个是一样的</span><br><span class="line">		List&lt;?&gt;list6 = new ArrayList&lt;&gt;();</span><br><span class="line">		List&lt;? extends Object&gt;list7 = new ArrayList&lt;&gt;();</span><br><span class="line">		//add(list6); // err</span><br><span class="line">		//add(list7); // err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 为了保证向下兼容的一致性，不能添加元素</span><br><span class="line">	public static void add(List&lt;? extends Fruit&gt; list) &#123;</span><br><span class="line">		/** 不能往里面加这样的对象 不能用于添加数据</span><br><span class="line">		 list.add(new Fruit());</span><br><span class="line">		 list.add(new Apple());</span><br><span class="line">		 list.add(new Pear());</span><br><span class="line">		 */</span><br><span class="line">		list.add(null);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li>2)、第二条限制: 参数类型间的依赖关系<br>如果参数类型之间有依赖关系，也只能用类型参数，比如下面的例子:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">// S和D要么相同，要么S是D的子类，否则类型不兼容，有编译错误</span><br><span class="line">public static &lt;D,S extends D&gt; void copy(ArrayList&lt;D&gt; dest, ArrayList&lt;S&gt; src)&#123;</span><br><span class="line">    for(int i=0; i&lt;src.size(); i++)</span><br><span class="line">        dest.add(src.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 可以使用通配符简化一下</span><br><span class="line">public static &lt;D&gt; void copy2(ArrayList&lt;D&gt; dest, ArrayList&lt;? extends D&gt; src)&#123;</span><br><span class="line">    for(int i=0; i&lt;src.size(); i++)</span><br><span class="line">        dest.add(src.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li>3)、第三条限制: 如果返回值依赖于类型参数，也不能用通配符<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//不能使用通配符，只能用类型参数，因为要返回</span><br><span class="line">public static &lt;T extends Comparable&lt;T&gt; &gt; T max(ArrayList&lt;T&gt; arr)&#123;</span><br><span class="line">    T max = arr.get(0);</span><br><span class="line">    for(int i = 1; i &lt; arr.size(); i++)&#123;</span><br><span class="line">        if(arr.get(i).compareTo(max)&gt;0)&#123;</span><br><span class="line">            max = arr.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
那么到底该用通配符还是类型参数呢?<blockquote>
<ul>
<li>通配符形式都可以用类型参数的形式来替代，通配符能做的，用类型参数都能做。</li>
</ul>
</blockquote>
</li>
</ul>
<blockquote>
<ul>
<li>通配符形式可以减少类型参数，形式上往往更为简单，可读性也更好，所以，能用通配符的就用通配符。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>如果类型参数之间有依赖关系，或者返回值依赖类型参数，或者需要写操作，则只能用类型参数。</li>
</ul>
</blockquote>
<p>通配符形式和类型参数往往配合使用，比如，上面的copy2方法，定义必要的类型参数，使用通配符表达依赖，并接受更广泛的数据类型。</p>

        <h3 id="六、super、-gt-、超类型通配符"   >
          <a href="#六、super、-gt-、超类型通配符" class="heading-link"><i class="fas fa-link"></i></a><a href="#六、super、-gt-、超类型通配符" class="headerlink" title="六、super、&gt;=、超类型通配符"></a>六、super、&gt;=、超类型通配符</h3>
      <ul>
<li>简单的来说，super和extends刚好相反，匹配的是&gt;= E的类型；</li>
<li>相当于是规定了一个下界，可以匹配 &gt;=的类型；
        <h4 id="1、使用场景"   >
          <a href="#1、使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h4>
      看它的使用场景， 在DynamicArray中添加一个copyTo方法，功能是将当前对象容器中的数拷贝到传入的参数dest容器中:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//add current value to the dest collection</span><br><span class="line"> public void copyTo(DynamicArray&lt;E&gt;dest)&#123;</span><br><span class="line">     for(int i = 0; i &lt; dest.size(); i++)</span><br><span class="line">         dest.add(this.get(i));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure>
然后不使用super，看下面的代码，最后一行就会报错，但是将Integer数组拷贝到Number数组理应是可以的:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">      DynamicArray&lt;Integer&gt;ints = new DynamicArray&lt;&gt;();</span><br><span class="line">      ints.add(3);</span><br><span class="line">      ints.add(4);</span><br><span class="line"></span><br><span class="line">      DynamicArray&lt;Number&gt;nums = new DynamicArray&lt;&gt;();</span><br><span class="line">      ints.copyTo(nums);  // 将ints 中的元素拷贝到nums，本应该是可以的，但是如果没有? super E就不行</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>
使用超类型通配符就可以解决上面的问题:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public void copyTo(DynamicArray&lt;? super E&gt;dest)&#123;</span><br><span class="line">    for(int i = 0; i &lt; dest.size(); i++)</span><br><span class="line">        dest.add(this.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

        <h4 id="2、没有-lt-T-super-E-gt-有"   >
          <a href="#2、没有-lt-T-super-E-gt-有" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、没有-lt-T-super-E-gt-有" class="headerlink" title="2、没有&lt; T super E&gt;(有)"></a>2、没有&lt; T super E&gt;(有<T extend E>)</h4>
      比较类型参数限定与超类型通配符，类型参数限定只有extends形式，没有super形式，比如前面的copyTo方法，它的通配符形式的声明为：<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public void copyTo(DynamicArray&lt;? super E&gt; dest)</span><br></pre></td></tr></table></div></figure>
如果类型参数限定支持super形式，则应该是：<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public &lt;T super E&gt; void copyTo(DynamicArray&lt;T&gt; dest)</span><br></pre></td></tr></table></div></figure>
但是，Java并不支持这种语法。对于有限定的通配符形式&lt;? extends E&gt;，可以用类型参数限定替代，但是对于类似上面的超类型通配符，则无法用类型参数替代。<br>再看和extends使用方法传递参数的对比: (在方法传递中可以添加自己和子类的数据，　区别于extends，extends都不可以添加)<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericSuper2 &#123;</span><br><span class="line"></span><br><span class="line">    private static class Fruit &#123;&#125;</span><br><span class="line">    private static class Apple extends Fruit&#123;&#125;</span><br><span class="line">    private static class Pear extends Fruit&#123;&#125;</span><br><span class="line">    private static class FuShiApple extends Apple&#123;&#125;</span><br><span class="line"></span><br><span class="line">    static class Clazz&lt;T extends Fruit&gt;&#123;  //创建的类必须是Fruit的子类//为了自己类中使用这个类</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		List&lt;Apple&gt;list1 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list1);</span><br><span class="line">		List&lt;Fruit&gt;list2 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list2);</span><br><span class="line">		List&lt;Object&gt;list3 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list3);</span><br><span class="line"></span><br><span class="line">		//？super的使用</span><br><span class="line">		List&lt;? super Apple&gt;list4 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list4);</span><br><span class="line">		List&lt;? super Apple&gt;list5 = new ArrayList&lt;&gt;();</span><br><span class="line">		add(list5);</span><br><span class="line">		</span><br><span class="line">		List&lt;FuShiApple&gt;list6 = new ArrayList&lt;&gt;();  // &lt; 的不行</span><br><span class="line">//		add(list6); // err</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//只要是Apple的祖先都可以调用这个方法 &gt;= </span><br><span class="line">	public static void add(List &lt;? super Apple&gt; list) &#123;  </span><br><span class="line">		/*** 不能用于添加父类对象的数据</span><br><span class="line">		 * list.add(new Fruit());</span><br><span class="line">		 */</span><br><span class="line">		//区别于extends, 可以添加自己和子类的数据</span><br><span class="line">		list.add(new Apple());</span><br><span class="line">		list.add(new FuShiApple());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
</ul>

        <h3 id="七、通配符extends、super比较"   >
          <a href="#七、通配符extends、super比较" class="heading-link"><i class="fas fa-link"></i></a><a href="#七、通配符extends、super比较" class="headerlink" title="七、通配符extends、super比较"></a>七、通配符extends、super比较</h3>
      <p>通配符比较:</p>
<ul>
<li><p>共同点: 目的都是为了使方法接口更为灵活，可以接受更为广泛的类型。</p>
</li>
<li><? super E>用于灵活写入或比较，使得对象可以写入父类型的容器(>=)，使得父类型的比较方法可以应用于子类对象。</li>
<li><? extends E>用于灵活读取，使得方法可以读取E或E的任意子类型的容器对象。
Java容器类的实现中，有很多这种用法，比如，Collections中就有如下一些方法：
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; T max(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</span><br></pre></td></tr></table></div></figure>
### 八、泛型擦除</li>
<li><p>泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。</p>
</li>
<li><p>通俗地讲，泛型类和普通类在 java 虚拟机内是没有什么特别的地方；<br>看下面代码：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericWipe &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; slist = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; ilist = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        System.out.println(slist.getClass() == ilist.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>这段代码的输出结果是true。正如一开始说的，编译器会将T擦除，然后替换成为Object(并不完全正确)，在必要的时候进行强制类型转换。</p>
</li>
</ul>
<p>再看以下代码的输出结果:</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericWipe&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private T obj;</span><br><span class="line"></span><br><span class="line">    public GenericWipe(T obj)&#123;</span><br><span class="line">        this.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        GenericWipe&lt;String&gt;gw = new GenericWipe&lt;&gt;(&quot;wipe&quot;);</span><br><span class="line">        Class gwClass = gw.getClass();</span><br><span class="line">        System.out.println(gwClass.getName()); // 得到运行时的状态信息,运行时是真实的类型</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        Field[] fs = gwClass.getDeclaredFields();  //得到在JVM中的类型 </span><br><span class="line">        for ( Field f:fs)</span><br><span class="line">            System.out.println(&quot;Field name &quot; + f.getName() + &quot; type:&quot; + f.getType().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">JavaPrimary.Generic.GenericWipe</span><br><span class="line">--------------------------</span><br><span class="line">Field name obj type:java.lang.Object</span><br></pre></td></tr></table></div></figure>
<p>第一种类型是<code>Class</code> 的类型是 <code>GenericWipe</code>，并不是 <code>GenericWipe&lt;T&gt;</code> 这种形式，第二种类型是<code>Jvm</code>中的类型； 那是不是泛型类被类型擦除后，相应的类型就被替换成 <code>Object</code> 类型呢？这种说法不是完全正确的。</p>
<p>更改一下代码:</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericWipe&lt;T extends String&gt; &#123;  // &lt;= String</span><br><span class="line"></span><br><span class="line">    private T obj;</span><br><span class="line"></span><br><span class="line">    public GenericWipe(T obj)&#123;</span><br><span class="line">        this.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        GenericWipe&lt;String&gt;gw = new GenericWipe&lt;&gt;(&quot;wipe&quot;);</span><br><span class="line">        Class gwClass = gw.getClass();</span><br><span class="line">        System.out.println(gwClass.getName()); // 得到运行时的状态信息,运行时是真实的类型</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        Field[] fs = gwClass.getDeclaredFields();  //得到在JVM中的类型</span><br><span class="line">        for ( Field f:fs)</span><br><span class="line">            System.out.println(&quot;Field name &quot; + f.getName() + &quot; type:&quot; + f.getType().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">JavaPrimary.Generic.GenericWipe</span><br><span class="line">--------------------------</span><br><span class="line">Field name obj type:java.lang.String</span><br></pre></td></tr></table></div></figure>
<p>可以看到，第二个输出变成了String。所以结论如下:</p>
<ul>
<li>在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如<T>则会被转译成普通的 Object 类型；</li>
<li>如果指定了上限如 <T extends String> 则类型参数就被替换成类型上限。<br>所以，在反射中，add() 这个方法对应的 Method 的签名应该是 Object.class。也就是说，如果你要在反射中找到 add 对应的 Method，你应该调用 getDeclaredMethod(“add”,Object.class) 否则程序会报错，提示没有这么一个方法，原因就是类型擦除的时候，T 被替换成 Object 类型了。<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericWipe&lt;T&gt; &#123;  // &lt;= String</span><br><span class="line">    // public class GenericWipe&lt;T extends String&gt; &#123;  // &lt;= String</span><br><span class="line">    private T obj;</span><br><span class="line"></span><br><span class="line">    public GenericWipe(T obj)&#123;</span><br><span class="line">        this.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void add(T obj)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        GenericWipe&lt;String&gt;gw = new GenericWipe&lt;&gt;(&quot;wipe&quot;);</span><br><span class="line">        Class gwClass = gw.getClass();</span><br><span class="line">        System.out.println(gwClass.getName()); // 得到运行时的状态信息,运行时是真实的类型</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;--------------------------&quot;);</span><br><span class="line">        Method[] methods = gwClass.getDeclaredMethods();</span><br><span class="line">        for ( Method m:methods )&#123;</span><br><span class="line">            System.out.println(&quot; method:&quot; + m.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<a href="%5Bhttps://blog.csdn.net/briblue/article/details/76736356#t11%5D(https://blog.csdn.net/briblue/article/details/76736356#t11)">更加详细的解释见这里</a>
        <h3 id="九、泛型注意事项"   >
          <a href="#九、泛型注意事项" class="heading-link"><i class="fas fa-link"></i></a><a href="#九、泛型注意事项" class="headerlink" title="九、泛型注意事项"></a>九、泛型注意事项</h3>
      
        <h4 id="1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受-8-种基本数据类型。"   >
          <a href="#1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受-8-种基本数据类型。" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受-8-种基本数据类型。" class="headerlink" title="1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受 8 种基本数据类型。"></a>1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受 8 种基本数据类型。</h4>
      比如:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">List&lt;int&gt; li = new ArrayList&lt;&gt;(); // err</span><br><span class="line">List&lt;boolean&gt; li = new ArrayList&lt;&gt;(); // err</span><br><span class="line">List&lt;Integer&gt; li = new ArrayList&lt;&gt;();  //ok</span><br><span class="line">List&lt;Boolean&gt; li1 = new ArrayList&lt;&gt;(); // ok</span><br></pre></td></tr></table></div></figure>

        <h4 id="2、运行时类型信息不适用于泛型"   >
          <a href="#2、运行时类型信息不适用于泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、运行时类型信息不适用于泛型" class="headerlink" title="2、运行时类型信息不适用于泛型"></a>2、运行时类型信息不适用于泛型</h4>
      这个也就是上面说的泛型擦除，泛型不支持运行时的信息(和反射有关)。</li>
</ul>
<p>instanceof后面是接口或类名，instanceof是运行时判断，也与泛型无关，所以，Java也不支持类似如下写法：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">if(p1 instanceof Pair&lt;Integer&gt;)</span><br></pre></td></tr></table></div></figure>

        <h4 id="3、Java-不能创建具体类型的泛型数组"   >
          <a href="#3、Java-不能创建具体类型的泛型数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、Java-不能创建具体类型的泛型数组" class="headerlink" title="3、Java 不能创建具体类型的泛型数组"></a>3、Java 不能创建具体类型的泛型数组</h4>
      <p>例如下面的list1和list2创建是错误的，但是后面的?可以，因为?代表的是未知类型:</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class GenericOther &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">//        List&lt;Integer&gt;[] list1 = new ArrayList&lt;Integer&gt;[]; // complier err</span><br><span class="line">//        List&lt;Boolean&gt; list2 = new ArrayList&lt;Boolean&gt;[]; // complier err</span><br><span class="line">        List&lt;?&gt;[] list3 = new ArrayList&lt;?&gt;[10]; // 这个却可以 ? 代表的是未知类型</span><br><span class="line">        list3[1] = new ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;?&gt; tmp = list3[1];</span><br><span class="line">        System.out.println(tmp.get(0));</span><br><span class="line">//        tmp.set(1, 2); complier err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<ul>
<li><code>List&lt;Boolean&gt;</code> 和 <code>List&lt;Boolean&gt;</code> 在 Jvm 中等同于<code>List&lt;Object&gt;</code> ，所有的类型信息都被擦除，程序也无法分辨一个数组中的元素类型具体是 <code>List&lt;Integer&gt;</code>类型还是 <code>List&lt;Boolean&gt;</code> 类型。</li>
<li> <code>？</code> 代表未知类型，涉及的操作都基本上与类型无关，Jvm 不针对它对类型作判断，因此它能编译通过，但是，它只能读，不能写。比如，上面的 tmp 这个局部变量，它只能进行 get() 操作，不能进行 add() 操作。<br>再从如果可以创建泛型数组会出现什么样的问题来看: 数组可以进行不同类型之间的转换，但是也需要注意使用，使用不当就会造成运行时异常，而如果运行创建泛型数组也会产生类似的问题，所以Java干脆禁止。<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class NoGenericClassArray &#123;</span><br><span class="line">     private static class Pair &#123; //　Generic Class</span><br><span class="line">        private Object first;</span><br><span class="line">        private Object second;</span><br><span class="line">        public Pair(Object first, Object second) &#123;</span><br><span class="line">            this.first = first;</span><br><span class="line">            this.second = second;</span><br><span class="line">        &#125;</span><br><span class="line">        public Object getFirst() &#123;</span><br><span class="line">            return first;</span><br><span class="line">        &#125;</span><br><span class="line">        public Object getSecond() &#123;</span><br><span class="line">            return second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // 数组是Java直接支持的概念，它知道数组元素的实际类型，</span><br><span class="line">        // 它知道Object和Number都是Integer的父类型，所以这个操作是允许的。</span><br><span class="line">        Integer[] ints = new Integer[10];</span><br><span class="line">        Number[] numbers = ints; //  is ok</span><br><span class="line">        Object[] objs = ints;</span><br><span class="line"></span><br><span class="line">        // 虽然Java允许这种转换，但是如果使用不恰当，就有可能引起运行时异常</span><br><span class="line">        Integer[] ints2 = new Integer[10];</span><br><span class="line">        Object[] objs2 = ints2;</span><br><span class="line">        objs2[0] = &quot;hello&quot;; // RuntimeException</span><br><span class="line"></span><br><span class="line">//        Pair&lt;Object, Integer&gt;[] options = new Pair&lt;Object, Integer&gt;[3]; //如果可以，那最后一行就会不会编译错误，这样显然是不行的</span><br><span class="line">//        Object[] objs = options;</span><br><span class="line">//        objs[0] = new Pair&lt;Double, String&gt;(12.34, &quot;hello&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h4 id="4、不能通过类型参数创建对象"   >
          <a href="#4、不能通过类型参数创建对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、不能通过类型参数创建对象" class="headerlink" title="4、不能通过类型参数创建对象"></a>4、不能通过类型参数创建对象</h4>
      下面的写法是非法的。<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">T elm = new T();</span><br><span class="line">T[] arr = new T[10];</span><br></pre></td></tr></table></div></figure>
如果允许，本来你以为创建的就是对应类型的对象，但由于类型擦除，Java只能创建Object类型的对象，而无法创建T类型的对象。 那如果确实希望根据类型创建对象呢？需要设计API接受类型对象，即Class对象，并使用Java中的反射机制，如果类型有默认构造方法，可以调用Class的newInstance方法构建对象：<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; T create(Class&lt;T&gt; type)&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return type.newInstance();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h4 id="5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型"   >
          <a href="#5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型" class="headerlink" title="5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型"></a>5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型</h4>
      对于泛型类声明的类型参数，可以在实例变量和方法中使用，但在静态变量和静态方法中是不能使用的。下面的写法是非法的:<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class Singleton&lt;T&gt; &#123;</span><br><span class="line">    private static T instance;</span><br><span class="line">    public synchronized static T getInstance()&#123;</span><br><span class="line">        if(instance==null)&#123;</span><br><span class="line">             // 创建实例</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></div></figure>
如果合法的话，那么对于每种实例化类型，都需要有一个对应的静态变量和方法。但由于类型擦除，Singleton类型只有一份，静态变量和方法都是类型的属性，且与类型参数无关，所以不能使用泛型类类型参数。<br>但是，对于静态方法，它可以是泛型方法，可以声明自己的类型参数，这个参数与泛型类的类型参数是没有关系的。
        <h4 id="6、子类继承父类泛型"   >
          <a href="#6、子类继承父类泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#6、子类继承父类泛型" class="headerlink" title="6、子类继承父类泛型"></a>6、子类继承父类泛型</h4>
      注意子类继承泛型的注意事项: 可以有四种方式，可以按需实现，或者定义子类自己的泛型等<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">public class SubClass &#123;</span><br><span class="line"></span><br><span class="line">    public abstract class Father&lt;T1,T2&gt; &#123;     //注意实际过程中一般定义为抽象的父类</span><br><span class="line">        T1 age;</span><br><span class="line">        public abstract void test(T2 name);  //抽象方法</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //1)全部保留</span><br><span class="line">    class C1&lt;T1,T2,A,B&gt; extends Father&lt;T1,T2&gt;&#123;  //除了继承父类,可以自己&quot;加&quot;&quot;富二代&quot;(不是负二代)</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void test(T2 name) &#123;</span><br><span class="line">            // this.age --&gt;  T1类型</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2)部分保留</span><br><span class="line">    class C2&lt;T2,A,B&gt; extends Father&lt;Integer,T2&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void test(T2 name) &#123;</span><br><span class="line">            // this.age --&gt;  Integer类型</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //不保留: --&gt;按需实现</span><br><span class="line">    class C3&lt;A,B&gt; extends Father&lt;Integer,String&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void test(String name) &#123; //注意这里是String 不是T2</span><br><span class="line">            // this.age --&gt;  Integer类型</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2)没有类型 : 擦除 (类似于Object)//相当于</span><br><span class="line">    class C4&lt;A,B&gt; extends Father &#123;  //相当于  class C4&lt;A,B&gt; extends Father&lt;Object,Object&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void test(Object name) &#123; //注意这里是Object(完全没有类型(擦除))</span><br><span class="line">            // this.age --&gt;  Object类型</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
</ul>
]]></content>
      <tags>
        <tag>面试</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成Elasticsearch7.X</title>
    <url>/2022/04/05/SpringBoot%E9%9B%86%E6%88%90Elasticsearch7-X/</url>
    <content><![CDATA[<blockquote>
<p>本文记录使用hight level rest client 在springboot中集成elasticsearch，而elasticsearch官方也推荐使用<code>hight level rest client</code>来操作es。spring-data-elasticsearch虽然也比较方便集成，但是由于其不是官方直接维护，所以存在版本严重落后现象。</p>
</blockquote>

        <h4 id="1-安装elasticsearch"   >
          <a href="#1-安装elasticsearch" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-安装elasticsearch" class="headerlink" title="1.安装elasticsearch"></a>1.安装elasticsearch</h4>
      <span id="more"></span>


        <h5 id="1-1-环境配置"   >
          <a href="#1-1-环境配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h5>
      <ul>
<li>安装docker</li>
<li>安装docker-compose</li>
<li>配置系统参数</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 设置内核参数</span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line"># 生效设置</span><br><span class="line">sysctl -p</span><br><span class="line"># 重启 docker，让内核参数对docker服务生效</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></div></figure>


        <h5 id="1-2-安装"   >
          <a href="#1-2-安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h5>
      <p>使用docker-compose安装elasticsearch7.1.1以及kibana7.1.1</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;elasticsearch:7.1.1&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;elasticsearch&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;elasticsearch:/usr/share/elasticsearch&quot;</span></span><br><span class="line">    <span class="comment">#vim /etc/sysctl.conf</span></span><br><span class="line">    <span class="comment">#vm.max_map_count=262144</span></span><br><span class="line">    <span class="comment">#sysctl -w vm.max_map_count=262144</span></span><br><span class="line">    <span class="comment">#sysctl -p</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;elk&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;kibana:7.1.1&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;kibana&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;kibana:/usr/share/kibana&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;elk&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">elk:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">运行docker容器</span><br><span class="line">docker-compose up -d --build</span><br><span class="line">查看日志</span><br><span class="line">docker-compose logs -f </span><br></pre></td></tr></table></div></figure>


        <h5 id="1-3-配置"   >
          <a href="#1-3-配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h5>
      <p>安装完成之后开启es跨域，这样外部head插件或者kibana就可访问到</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></div></figure>

<p>配置完成之后重启elasticsearch和kibana</p>

        <h4 id="2-集成springboot"   >
          <a href="#2-集成springboot" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-集成springboot" class="headerlink" title="2.集成springboot"></a>2.集成springboot</h4>
      
        <h5 id="2-1引入依赖"   >
          <a href="#2-1引入依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1引入依赖" class="headerlink" title="2.1引入依赖"></a>2.1引入依赖</h5>
      <figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- es依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置解析处理 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- hutool工具 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h5 id="2-2-配置"   >
          <a href="#2-2-配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h5>
      <ul>
<li>属性配置类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haopeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;elasticsearch&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求协议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">schema</span> <span class="operator">=</span> <span class="string">&quot;http&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集群名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">clusterName</span> <span class="operator">=</span> <span class="string">&quot;elasticsearch&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集群节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; clusterNodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接超时时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">connectTimeout</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * socket 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">socketTimeout</span> <span class="operator">=</span> <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接请求超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">connectionRequestTimeout</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个路由的最大连接数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">maxConnectPerRoute</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大连接总数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">maxConnectTotal</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Index</span> <span class="variable">index</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Index</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Index</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分片数量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">numberOfShards</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 副本数量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">numberOfReplicas</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 认证用户</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 认证密码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



<ul>
<li>客户端配置类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haopeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ElasticsearchProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchProperties elasticsearchProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;HttpHost&gt; httpHosts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; clusterNodes = elasticsearchProperties.getClusterNodes();</span><br><span class="line">        <span class="keyword">if</span> (clusterNodes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;集群节点不允许为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clusterNodes.forEach(node -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String[] parts = StringUtils.split(node, <span class="string">&quot;:&quot;</span>);</span><br><span class="line">                Assert.notNull(parts, <span class="string">&quot;Must defined&quot;</span>);</span><br><span class="line">                Assert.state(parts.length == <span class="number">2</span>, <span class="string">&quot;Must be defined as &#x27;host:port&#x27;&quot;</span>);</span><br><span class="line">                httpHosts.add(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(parts[<span class="number">0</span>], Integer.parseInt(parts[<span class="number">1</span>]), elasticsearchProperties.getSchema()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Invalid ES nodes &quot;</span> + <span class="string">&quot;property &#x27;&quot;</span> + node + <span class="string">&quot;&#x27;&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> RestClient.builder(httpHosts.toArray(<span class="keyword">new</span> <span class="title class_">HttpHost</span>[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">return</span> getRestHighLevelClient(builder, elasticsearchProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get restHistLevelClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestHighLevelClient <span class="title function_">getRestHighLevelClient</span><span class="params">(RestClientBuilder builder, ElasticsearchProperties elasticsearchProperties)</span> &#123;</span><br><span class="line">        <span class="comment">// Callback used the default &#123;@link RequestConfig&#125; being set to the &#123;@link CloseableHttpClient&#125;</span></span><br><span class="line">        builder.setRequestConfigCallback(requestConfigBuilder -&gt; &#123;</span><br><span class="line">            requestConfigBuilder.setConnectTimeout(elasticsearchProperties.getConnectTimeout());</span><br><span class="line">            requestConfigBuilder.setSocketTimeout(elasticsearchProperties.getSocketTimeout());</span><br><span class="line">            requestConfigBuilder.setConnectionRequestTimeout(elasticsearchProperties.getConnectionRequestTimeout());</span><br><span class="line">            <span class="keyword">return</span> requestConfigBuilder;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// Callback used to customize the &#123;@link CloseableHttpClient&#125; instance used by a &#123;@link RestClient&#125; instance.</span></span><br><span class="line">        builder.setHttpClientConfigCallback(httpClientBuilder -&gt; &#123;</span><br><span class="line">            httpClientBuilder.setMaxConnTotal(elasticsearchProperties.getMaxConnectTotal());</span><br><span class="line">            httpClientBuilder.setMaxConnPerRoute(elasticsearchProperties.getMaxConnectPerRoute());</span><br><span class="line">            <span class="keyword">return</span> httpClientBuilder;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// Callback used the basic credential auth</span></span><br><span class="line">        ElasticsearchProperties.<span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> elasticsearchProperties.getAccount();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(account.getUsername()) &amp;&amp; !StringUtils.isEmpty(account.getUsername())) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">CredentialsProvider</span> <span class="variable">credentialsProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCredentialsProvider</span>();</span><br><span class="line"></span><br><span class="line">            credentialsProvider.setCredentials(AuthScope.ANY, <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(account.getUsername(), account.getPassword()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>



<ul>
<li>实体类（LOL游戏人物）</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 英雄联盟游戏人物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haopeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lol</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 英雄游戏名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 英雄名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 英雄描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="2-3-编写接口与实现类"   >
          <a href="#2-3-编写接口与实现类" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-编写接口与实现类" class="headerlink" title="2.3 编写接口与实现类"></a>2.3 编写接口与实现类</h5>
      <ul>
<li>ES操作接口</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IEsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createIndexRequest</span><span class="params">(String index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteIndexRequest</span><span class="params">(String index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新索引文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateRequest</span><span class="params">(String index, String id, Object object)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增索引文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertRequest</span><span class="params">(String index, String id, Object object)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteRequest</span><span class="params">(String index, String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>接口实现类</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsserviceImpl</span> <span class="keyword">implements</span> <span class="title class_">IEsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        RequestOptions.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">        <span class="comment">// 默认缓冲限制为100MB，此处修改为30MB。</span></span><br><span class="line">        builder.setHttpAsyncResponseConsumerFactory(<span class="keyword">new</span> <span class="title class_">HttpAsyncResponseConsumerFactory</span>.HeapBufferedResponseConsumerFactory(<span class="number">30</span> * <span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndexRequest</span><span class="params">(String index)</span> &#123;</span><br><span class="line">        <span class="type">CreateIndexRequest</span> <span class="variable">createIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(index)</span><br><span class="line">                .settings(Settings.builder().put(<span class="string">&quot;index.number_of_shards&quot;</span>, <span class="number">3</span>).put(<span class="string">&quot;index.number_of_replicas&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CreateIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().create(createIndexRequest, COMMON_OPTIONS);</span><br><span class="line">            log.info(<span class="string">&quot; 所有节点确认响应 : &#123;&#125;&quot;</span>, response.isAcknowledged());</span><br><span class="line">            log.info(<span class="string">&quot; 所有分片的复制未超时 :&#123;&#125;&quot;</span>, response.isShardsAcknowledged());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;创建索引库【&#123;&#125;】失败&quot;</span>, index, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteIndexRequest</span><span class="params">(String index)</span> &#123;</span><br><span class="line">        <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(index);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AcknowledgedResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().delete(request, COMMON_OPTIONS);</span><br><span class="line">            System.out.println(response.isAcknowledged());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;删除索引库【&#123;&#125;】失败&quot;</span>, index, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRequest</span><span class="params">(String index, String id, Object object)</span> &#123;</span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(index, id);</span><br><span class="line">        updateRequest.doc(BeanUtil.beanToMap(object), XContentType.JSON);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.update(updateRequest, COMMON_OPTIONS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;更新索引文档 &#123;&quot;</span> + index + <span class="string">&quot;&#125; 数据 &#123;&quot;</span> + object + <span class="string">&quot;&#125; 失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertRequest</span><span class="params">(String index, String id, Object object)</span> &#123;</span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(index).id(id).source(BeanUtil.beanToMap(object), XContentType.JSON);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.index(indexRequest, COMMON_OPTIONS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;创建索引文档 &#123;&quot;</span> + index + <span class="string">&quot;&#125; 数据 &#123;&quot;</span> + object + <span class="string">&quot;&#125; 失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteRequest</span><span class="params">(String index, String id)</span> &#123;</span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(index, id);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.delete(deleteRequest, COMMON_OPTIONS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;删除索引文档 &#123;&quot;</span> + index + <span class="string">&quot;&#125; 数据id &#123;&quot;</span> + id + <span class="string">&quot;&#125; 失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>LolService接口实现</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haopeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LolService</span> <span class="keyword">extends</span> <span class="title class_">EsserviceImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBach</span><span class="params">(String index, List&lt;Lol&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;bach insert index but list is empty ...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.forEach((lol)-&gt;&#123;</span><br><span class="line">            <span class="built_in">super</span>.insertRequest(index, lol.getId().toString(), lol);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Lol&gt; <span class="title function_">searchList</span><span class="params">(String index)</span> &#123;</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> search(index);</span><br><span class="line">        SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">        List&lt;Lol&gt; lolList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.stream(hits).forEach(hit -&gt; &#123;</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">            <span class="type">Lol</span> <span class="variable">lol</span> <span class="operator">=</span> BeanUtil.mapToBean(sourceAsMap, Lol.class, <span class="literal">true</span>);</span><br><span class="line">            lolList.add(lol);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> lolList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SearchResponse <span class="title function_">search</span><span class="params">(String index)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(index);</span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        <span class="comment">//bool符合查询</span></span><br><span class="line">        <span class="comment">//BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder()</span></span><br><span class="line">        <span class="comment">//        .filter(QueryBuilders.matchQuery(&quot;name&quot;, &quot;盖伦&quot;))</span></span><br><span class="line">        <span class="comment">//        .must(QueryBuilders.matchQuery(&quot;desc&quot;, &quot;部落&quot;))</span></span><br><span class="line">        <span class="comment">//        .should(QueryBuilders.matchQuery(&quot;realName&quot;, &quot;光辉&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        <span class="comment">//searchSourceBuilder.from(1).size(2);</span></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="comment">//searchSourceBuilder.sort(&quot;&quot;, SortOrder.DESC);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">////误拼写时的fuzzy模糊搜索方法 2表示允许的误差字符数</span></span><br><span class="line">        <span class="comment">//QueryBuilders.fuzzyQuery(&quot;title&quot;, &quot;ceshi&quot;).fuzziness(Fuzziness.build(&quot;2&quot;));</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        System.out.println(searchSourceBuilder.toString());</span><br><span class="line">        System.out.println(JSONUtil.parseObj(searchSourceBuilder.toString()).toStringPretty());</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            searchResponse = client.search(searchRequest, COMMON_OPTIONS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> searchResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="2-4-单元测试"   >
          <a href="#2-4-单元测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-单元测试" class="headerlink" title="2.4 单元测试"></a>2.4 单元测试</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INDEX_NAME</span> <span class="operator">=</span> <span class="string">&quot;lol&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LolService lolService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        lolService.createIndexRequest(INDEX_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        lolService.deleteIndexRequest(INDEX_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Lol&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(Lol.builder().id(<span class="number">1L</span>).name(<span class="string">&quot;德玛西亚之力&quot;</span>).realName(<span class="string">&quot;盖伦&quot;</span>).desc(<span class="string">&quot;作为一名自豪而高贵的勇士，盖伦将自己当做无畏先锋中的普通一员参与战斗。他既受到同袍手足的爱戴，也受到敌人对手的尊敬--尤其作为尊贵的冕卫家族的子嗣，他被委以重任，守卫德玛西亚的疆土和理想。他身披抵御魔法的重甲，手持阔剑，时刻准备着用正义的钢铁风暴在战场上正面迎战一切操纵魔法的狂人。&quot;</span>).build());</span><br><span class="line">        list.add(Lol.builder().id(<span class="number">2L</span>).name(<span class="string">&quot;疾风剑豪&quot;</span>).realName(<span class="string">&quot;亚索(快乐风男)&quot;</span>).desc(<span class="string">&quot;亚索是一个百折不屈的艾欧尼亚人，也是一名身手敏捷的御风剑客。这位生性自负的年轻人，被误认为杀害长老的凶手--由于无法证明自己的清白，他出于自卫而杀死了自己的哥哥。虽然长老死亡的真相已然大白，亚索还是无法原谅自己的所作所为。他在家园的土地上流浪，只有疾风指引着他的剑刃。&quot;</span>).build());</span><br><span class="line">        list.add(Lol.builder().id(<span class="number">3L</span>).name(<span class="string">&quot;魂锁典狱长&quot;</span>).realName(<span class="string">&quot;锤石&quot;</span>).desc(<span class="string">&quot;暴虐又狡猾的锤石是一个来自暗影岛的亡灵，野心勃勃、不知疲倦。他曾经是无数奥秘的看守，寻找着超越生死的力量，而现在他则使用自己独创的钻心痛苦缓慢地折磨并击溃其他人，以此作为自己存在下去的手段。被他迫害的人需要承受远超死亡的痛苦，因为锤石会让他们的灵魂也饱尝剧痛，将他们的灵魂囚禁在自己的灯笼中，经受永世的折磨。&quot;</span>).build());</span><br><span class="line">        list.add(Lol.builder().id(<span class="number">4L</span>).name(<span class="string">&quot;圣枪游侠&quot;</span>).realName(<span class="string">&quot;卢锡安&quot;</span>).desc(<span class="string">&quot;曾担光明哨兵的卢锡安是一位冷酷的死灵猎人。他用一对圣物手枪无情地追猎并灭绝不死亡灵。为亡妻复仇的意念吞噬了他，让他无止无休。除非消灭锤石，那个手握她灵魂的恶鬼。冷酷而且决绝的卢锡安不允许任何东西挡住自己的复仇之路。如果有什么人或者什么东西愚蠢到敢挑衅他的原则，就必将接受压倒性的神圣枪火狂轰滥炸。&quot;</span>).build());</span><br><span class="line">        list.add(Lol.builder().id(<span class="number">5L</span>).name(<span class="string">&quot;法外狂徒格雷福斯&quot;</span>).realName(<span class="string">&quot;格雷福斯&quot;</span>).desc(<span class="string">&quot;马尔科姆.格雷福斯是有名的佣兵、赌徒和窃贼，凡是他到过的城邦或帝国，都在通缉悬赏他的人头。虽然他脾气暴躁，但却非常讲究黑道的义气，他的双管散弹枪“命运”就经常用来纠正背信弃义之事。几年前他和老搭档崔斯特.菲特冰释前嫌，如今二人一同在比尔吉沃特的地下黑道纷争中再次如鱼得水。&quot;</span>).build());</span><br><span class="line">        list.add(Lol.builder().id(<span class="number">6L</span>).name(<span class="string">&quot;光辉女郎&quot;</span>).realName(<span class="string">&quot;拉克丝&quot;</span>).desc(<span class="string">&quot;拉克珊娜.冕卫出身自德玛西亚，一个将魔法视为禁忌的封闭国度。只要一提起魔法，人们总是带着恐惧和怀疑。所以拥有折光之力的她，在童年的成长过程中始终担心被人发现进而遭到放逐，一直强迫自己隐瞒力量，以此保住家族的贵族地位。虽然如此，拉克丝的乐观和顽强让她学会拥抱自己独特的天赋，现在的她正在秘密地运用自己的能力为祖国效力。&quot;</span>).build());</span><br><span class="line">        list.add(Lol.builder().id(<span class="number">7L</span>).name(<span class="string">&quot;发条魔灵&quot;</span>).realName(<span class="string">&quot;奥莉安娜&quot;</span>).desc(<span class="string">&quot;奥莉安娜曾是一个拥有血肉之躯的好奇女孩，而现在则是全身上下部由发条和齿轮构成的科技奇观。祖安下层地区的一次事故间接导致了她身染重病，日渐衰竭的身体必须替换为精密的人造器官，一个接一个，直到全身上下再也没有人类的肉体。她给自己制作了一枚奇妙的黄铜球体，既是伙伴，也是保镖。如今她已经可以自由地探索壮观的皮尔特沃夫，以及更遥远的地方。&quot;</span>).build());</span><br><span class="line"></span><br><span class="line">        lolService.insertBach(INDEX_NAME, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Lol</span> <span class="variable">lol</span> <span class="operator">=</span> Lol.builder().id(<span class="number">6L</span>).name(<span class="string">&quot;殇之木乃伊&quot;</span>).realName(<span class="string">&quot;阿木木&quot;</span>).desc(<span class="string">&quot;或许阿木木是英雄联盟世界里最古老的保卫者英雄之一，他对加入联盟前的生活仍一无所知。阿木木唯一记得的是自己在Shuima沙漠的一座金字塔内独自醒来。他全身缠着裹尸布，感受不到自己的心跳。此外，他感到一股强大而莫名的悲伤；他知道他失去了亲人，虽然他已不记得他们是谁。阿木木跪下来，在绷带内哭泣。不论做什么，似乎他都无法阻止眼泪或悲伤。最后他站起来在这个世界上游荡，并进入了联盟&quot;</span>).build();</span><br><span class="line">        lolService.updateRequest(INDEX_NAME, lol.getId().toString(), lol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">        lolService.deleteRequest(INDEX_NAME, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">searchListTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Lol&gt; personList = lolService.searchList(INDEX_NAME);</span><br><span class="line">        System.out.println(personList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ul>
<li>可以通过<code>kibana</code>中<code>DevTools</code>进行查询验证结果</li>
</ul>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">//查询所有</span><br><span class="line">GET /lol/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">   &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//match查询</span><br><span class="line">GET /lol/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">  &quot;match&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;魔灵&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//term查询</span><br><span class="line">POST /lol/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">   &quot;term&quot;: &#123;</span><br><span class="line">     &quot;_id&quot;: &#123;</span><br><span class="line">       &quot;value&quot;: &quot;7&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>






<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-7cb2d30ef5f873be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-0b1af5b5231c8f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>
<p><img   src="https://upload-images.jianshu.io/upload_images/8387919-6f660ae540569aa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="" ></p>

        <h4 id="参考资料："   >
          <a href="#参考资料：" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4>
      <ul>
<li><p><span class="exturl"><a class="exturl__link"   href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.x/java-rest-high.html" >Java High Level REST Client</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
<li><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/asker009/p/10179544.html" >复合查询</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础总结</title>
    <url>/2022/05/08/Spring%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[
        <h1 id="Spring笔记整理"   >
          <a href="#Spring笔记整理" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring笔记整理" class="headerlink" title="Spring笔记整理"></a>Spring笔记整理</h1>
      <span id="more"></span>


        <h2 id="1-Spring概述"   >
          <a href="#1-Spring概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-Spring概述" class="headerlink" title="1. Spring概述"></a>1. Spring概述</h2>
      <p>Spring是一个轻量级的IoC和AOP容器框架，为Java应用程序提供基础性服务，简化了企业应用程序的开发，使得开发者只需要关心业务需求。</p>
<p>几个重要模块：</p>
<ul>
<li>Spring Core：核心类库，所有功能都依赖于该类库，提供IOC和DI服务</li>
<li>Spring AOP：AOP服务</li>
<li>Spring ORM：对现有的ORM框架的支持</li>
<li>Spring Web : 为创建Web应用程序提供支持</li>
<li>Spring JDBC : Java数据库连接</li>
</ul>

        <h2 id="2-IOC"   >
          <a href="#2-IOC" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-IOC" class="headerlink" title="2. IOC"></a>2. IOC</h2>
      <p>IOC就是<strong>控制反转</strong>（Inverse of Control），是<strong>依赖倒置原则</strong>的一种代码设计思路，具体采用的方法就是<strong>依赖注入</strong>（Dependency Injection）。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/873379da165a406994e17983bb5f4e59~tplv-k3u1fbpfcp-watermark.image" alt="beanSelf.jpg"></p>
<p><strong>依赖倒置原则</strong></p>
<p>把原本的高层依赖底层“倒置”过来，变成底层依赖高层。高层决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现“牵一发动全身”的情况。</p>
<p><strong>依赖注入</strong></p>
<p>把底层类作为参数传入上层类，实现上层类对下层类的“控制”。主要有三种方式：</p>
<ul>
<li>构造方法传递</li>
<li>Setter传递</li>
<li>接口传递</li>
</ul>
<p>这三种方式的核心思路都差不多，都是为了实现控制反转（依赖注入是方法，是为了实现控制反转）。</p>
<p><strong>控制反转容器</strong>（IoC Container）</p>
<p>对目标类进行初始化的一系列代码发生的地方，就是控制反转容器。他的优点主要是以下两点：</p>
<ul>
<li>降低重复代码</li>
</ul>
<p>因为采用了依赖注入，在初始化的过程中就不可避免的会写大量的new。这里IoC容器就解决了这个问题。这个容器可以自动对你的代码进行初始化，你只需要维护一个Configuration（可以是xml可以是一段代码），而不用每次初始化一个类都要亲手去写那一大段初始化的代码。</p>
<ul>
<li>隐藏细节</li>
</ul>
<p>在创建实例的时候不需要了解其中的细节。我们自己手动创建一个instance时候，是从底层往上层new的，这个过程中，我们需要了解整个类构造函数是怎么定义的，才能一步一步new/注入。而IoC Container在进行这个工作的时候是反过来的，它先从最上层开始往下找依赖关系，到达最底层之后再往上一步一步new。IoC Container可以直接隐藏具体的创建实例的细节，我们只需要告诉它我们需要什么实例，他就会把对应类实例初始化好，我们不用管这个实例是怎么一步一步被创建出来的。</p>
<p><strong>IOC实现原理</strong></p>
<p>工厂模式加反射机制，例如：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title function_">getInstance</span><span class="params">(String ClassName)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                    f = (Fruit) Class.forName(ClassName).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">f</span> <span class="operator">=</span> Factory.getInstance(<span class="string">&quot;io.github.dunwu.spring.Apple&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="literal">null</span>) &#123;</span><br><span class="line">            f.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="3-AOP"   >
          <a href="#3-AOP" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-AOP" class="headerlink" title="3. AOP"></a>3. AOP</h2>
      <p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>

        <h4 id="代理模式"   >
          <a href="#代理模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4>
      <p>AOP实现的关键在于代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理的代表则为Spring AOP。</p>

        <h5 id="（1）静态代理"   >
          <a href="#（1）静态代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#（1）静态代理" class="headerlink" title="（1）静态代理"></a>（1）静态代理</h5>
      <p>AspectJ是静态代理，也称为编译时增强，AOP框架会在编译阶段生成AOP代理类，并将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</p>

        <h5 id="（2）动态代理"   >
          <a href="#（2）动态代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#（2）动态代理" class="headerlink" title="（2）动态代理"></a>（2）动态代理</h5>
      <p>Spring AOP使用的是动态代理，所谓的动态代理不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p>
<ul>
<li>① JDK动态代理只提供接口的代理，不支持类的代理，要求被代理类实现接口。</li>
</ul>
<p>JDK动态代理的核心是InvocationHandler接口和Proxy类，在获取代理对象时，使用Proxy类来动态创建目标类的代理类（即最终真正的代理类，这个类继承自Proxy并实现了我们定义的接口），当代理对象调用真实对象的方法时， InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起。</p>
<ul>
<li>② 如果被代理类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。</li>
</ul>
<p>CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p>

        <h5 id="（3）动与静的区别"   >
          <a href="#（3）动与静的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#（3）动与静的区别" class="headerlink" title="（3）动与静的区别"></a>（3）动与静的区别</h5>
      <ul>
<li>生成AOP代理对象的时机不同，一个是编译时增强，一个是运行时增强。</li>
<li>Spring AOP 基于代理，而 AspectJ 基于字节码操作</li>
<li>相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。</li>
</ul>

        <h2 id="4-SpringBean生命周期"   >
          <a href="#4-SpringBean生命周期" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-SpringBean生命周期" class="headerlink" title="4.SpringBean生命周期"></a>4.SpringBean生命周期</h2>
      <p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75306b0c6a224ee78f76389324630da7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>

        <h3 id="一、实例化Bean"   >
          <a href="#一、实例化Bean" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、实例化Bean" class="headerlink" title="一、实例化Bean"></a>一、实例化Bean</h3>
      <ul>
<li>对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。</li>
<li>对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean。</li>
</ul>

        <h3 id="二、设置对象属性（依赖注入）"   >
          <a href="#二、设置对象属性（依赖注入）" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、设置对象属性（依赖注入）" class="headerlink" title="二、设置对象属性（依赖注入）"></a>二、设置对象属性（依赖注入）</h3>
      <p>实例化后的对象被封装在<code>BeanWrapper</code>对象中，紧接着，Spring根据<code>BeanDefinition</code>中的信息 以及 通过<code>BeanWrapper</code>提供的设置属性的接口完成属性设置与依赖注入。</p>

        <h3 id="三、处理Aware接口"   >
          <a href="#三、处理Aware接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、处理Aware接口" class="headerlink" title="三、处理Aware接口"></a>三、处理Aware接口</h3>
      <p>Spring会检测该对象是否实现了xxxAware接口，通过Aware类型的接口，可以让我们拿到Spring容器的一些资源：</p>
<ul>
<li>如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，传入Bean的名字；</li>
<li>如果这个Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。</li>
<li>如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。</li>
<li>如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；</li>
</ul>

        <h3 id="四、BeanPostProcessor前置处理"   >
          <a href="#四、BeanPostProcessor前置处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、BeanPostProcessor前置处理" class="headerlink" title="四、BeanPostProcessor前置处理"></a>四、BeanPostProcessor前置处理</h3>
      <p>如果想对Bean进行一些自定义的前置处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。</p>

        <h3 id="五、InitializingBean"   >
          <a href="#五、InitializingBean" class="heading-link"><i class="fas fa-link"></i></a><a href="#五、InitializingBean" class="headerlink" title="五、InitializingBean"></a>五、InitializingBean</h3>
      <p>如果Bean实现了InitializingBean接口，执行afeterPropertiesSet()方法。</p>

        <h3 id="六、init-method"   >
          <a href="#六、init-method" class="heading-link"><i class="fas fa-link"></i></a><a href="#六、init-method" class="headerlink" title="六、init-method"></a>六、init-method</h3>
      <p>如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。</p>

        <h3 id="七、BeanPostProcessor后置处理器"   >
          <a href="#七、BeanPostProcessor后置处理器" class="heading-link"><i class="fas fa-link"></i></a><a href="#七、BeanPostProcessor后置处理器" class="headerlink" title="七、BeanPostProcessor后置处理器"></a>七、BeanPostProcessor后置处理器</h3>
      <p>如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；</p>
<blockquote>
<p>以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。</p>
</blockquote>

        <h3 id="八、DisposableBean"   >
          <a href="#八、DisposableBean" class="heading-link"><i class="fas fa-link"></i></a><a href="#八、DisposableBean" class="headerlink" title="八、DisposableBean"></a>八、DisposableBean</h3>
      <p>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；</p>

        <h3 id="九、destroy-method"   >
          <a href="#九、destroy-method" class="heading-link"><i class="fas fa-link"></i></a><a href="#九、destroy-method" class="headerlink" title="九、destroy-method"></a>九、destroy-method</h3>
      <p>最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p>

        <h2 id="5-Spring中用到的设计模式"   >
          <a href="#5-Spring中用到的设计模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-Spring中用到的设计模式" class="headerlink" title="5.Spring中用到的设计模式"></a>5.Spring中用到的设计模式</h2>
      <ul>
<li>工厂设计模式 : Spring使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。</li>
<li>代理设计模式 : Spring AOP 功能的实现。</li>
<li>单例设计模式 : Spring 中的 Bean 默认都是单例的。</li>
<li>模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li>
<li>包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li>
<li>观察者模式: Spring 事件驱动模型就是观察者模式很经典的一个应用。</li>
<li>适配器模式 :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配Controller。</li>
</ul>

        <h2 id="6-Spring中bean的作用域"   >
          <a href="#6-Spring中bean的作用域" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-Spring中bean的作用域" class="headerlink" title="6.Spring中bean的作用域"></a>6.Spring中bean的作用域</h2>
      <p>（1）singleton：默认作用域，单例bean，每个容器中只有一个bean的实例。</p>
<p>（2）prototype：为每一个bean请求创建一个实例。</p>
<p>（3）request：为每一个request请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。</p>
<p>（4）session：与request范围类似，同一个session会话共享一个实例，不同会话使用不同的实例。</p>
<p>（5）global-session：全局作用域，所有会话共享一个实例。如果想要声明让所有会话共享的存储变量的话，那么这全局变量需要存储在global-session中。</p>

        <h2 id="7-Spring框架中的Bean是线程安全的么？"   >
          <a href="#7-Spring框架中的Bean是线程安全的么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-Spring框架中的Bean是线程安全的么？" class="headerlink" title="7.Spring框架中的Bean是线程安全的么？"></a>7.Spring框架中的Bean是线程安全的么？</h2>
      <p>Spring容器本身并没有提供Bean的线程安全策略，因此可以说Spring容器中的Bean本身不具备线程安全的特性，但是具体情况还是要结合Bean的作用域来讨论。</p>
<p>（1）对于prototype作用域的Bean，每次都创建一个新对象，也就是线程之间不存在Bean共享，因此不会有线程安全问题。</p>
<p>（2）对于singleton作用域的Bean，所有的线程都共享一个单例实例的Bean，因此是存在线程安全问题的。但是如果单例Bean是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Controller类、Service类和Dao等，这些Bean大多是无状态的，只关注于方法本身。</p>
<ul>
<li>有状态Bean(Stateful Bean) ：就是有实例变量的对象，可以保存数据，是非线程安全的。</li>
<li>无状态Bean(Stateless Bean)：就是没有实例变量的对象，不能保存数据，是不变类，是线程安全的。</li>
</ul>
<p>对于有状态的bean（比如Model和View），就需要自行保证线程安全，最浅显的解决办法就是将有状态的bean的作用域由“singleton”改为“prototype”。</p>
<p>也可以采用ThreadLocal解决线程安全问题，为每个线程提供一个独立的变量副本，不同线程只操作自己线程的副本变量。</p>

        <h2 id="8-Spring如何解决循环依赖问题"   >
          <a href="#8-Spring如何解决循环依赖问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#8-Spring如何解决循环依赖问题" class="headerlink" title="8. Spring如何解决循环依赖问题"></a>8. Spring如何解决循环依赖问题</h2>
      <p>循环依赖问题在Spring中主要有三种情况：</p>
<p>（1）通过构造方法进行依赖注入时产生的循环依赖问题。</p>
<p>（2）通过setter方法进行依赖注入且是在多例（原型）模式下产生的循环依赖问题。</p>
<p>（3）通过setter方法进行依赖注入且是在单例模式下产生的循环依赖问题。 在Spring中，只有第（3）种方式的循环依赖问题被解决了，其他两种方式在遇到循环依赖问题时都会产生异常。这是因为：</p>
<ul>
<li>第一种构造方法注入的情况下，在new对象的时候就会堵塞住了，其实也就是”先有鸡还是先有蛋“的历史难题。</li>
<li>第二种setter方法（多例）的情况下，每一次getBean()时，都会产生一个新的Bean，如此反复下去就会有无穷无尽的Bean产生了，最终就会导致OOM问题的出现。</li>
</ul>

        <h4 id="三级缓存"   >
          <a href="#三级缓存" class="heading-link"><i class="fas fa-link"></i></a><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h4>
      <ul>
<li>第一级缓存〈也叫单例池）singletonObjects:存放已经经历了完整生命周期的Bean对象</li>
<li>第二级缓存: earlySingletonObjects，存放早期暴露出来的Bean对象，Bean的生命周期未结束（属性还未填充完整）</li>
<li>第三级缓存: Map&lt;String, ObiectFactory&lt;?&gt;&gt; singletonFactories，存放可以生成Bean的工厂</li>
</ul>

        <h4 id="解决循环依赖的过程："   >
          <a href="#解决循环依赖的过程：" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决循环依赖的过程：" class="headerlink" title="解决循环依赖的过程："></a>解决循环依赖的过程：</h4>
      <ul>
<li>A创建过程中需要B，于是A将自己放到三级缓存里面，去实例化B</li>
<li>B实例化的时候发现需要A，于是B先查一级缓存，没有，再查二级缓存，还是没有，再查三级缓存，找到了A然后把三级缓存里面的这个A放到二级缓存里面，并删除三级缓存里面的A</li>
<li>B顺利初始化完毕，将自己放到一级缓存里面（此时B里面的A依然是创建中状态），然后回来接着创建A，此时B已经创建结束，直接从一级缓存里面拿到B，然后完成创建，并将A自己放到一级缓存里面。</li>
</ul>

        <h2 id="9-Spring事务"   >
          <a href="#9-Spring事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#9-Spring事务" class="headerlink" title="9. Spring事务"></a>9. Spring事务</h2>
      <p>Spring事务的本质其实就是数据库对事务的支持。Spring只提供统一事务管理接口，具体实现都是由各数据库自己实现，数据库事务的提交和回滚是通过binlog或者undo log实现的。Spring会在事务开始时，根据当前环境中设置的隔离级别，调整数据库隔离级别，由此保持一致。</p>

        <h4 id="（1）Spring事务的种类："   >
          <a href="#（1）Spring事务的种类：" class="heading-link"><i class="fas fa-link"></i></a><a href="#（1）Spring事务的种类：" class="headerlink" title="（1）Spring事务的种类："></a>（1）Spring事务的种类：</h4>
      <p>spring支持编程式事务管理和声明式事务管理两种方式：</p>
<ul>
<li>编程式事务管理</li>
</ul>
<p>使用TransactionTemplate，在代码中硬编码(不推荐使用)</p>
<ul>
<li>声明式事务管理</li>
</ul>
<p>是建立在AOP之上的，其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前启动一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>
<p>声明式事务最大的优点就是不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明或通过@Transactional注解的方式，便可以将事务规则应用到业务逻辑中，减少业务代码的污染。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。</p>

        <h4 id="（2）spring的事务传播机制"   >
          <a href="#（2）spring的事务传播机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#（2）spring的事务传播机制" class="headerlink" title="（2）spring的事务传播机制"></a>（2）spring的事务传播机制</h4>
      <p>Spring事务的传播机制说的是，当多个事务同时存在的时候，spring如何处理这些事务的行为。事务传播机制实际上是使用简单的ThreadLocal实现的，所以，如果调用的方法是在新线程调用的，事务传播实际上是会失效的。</p>
<ul>
<li>① PROPAGATION_REQUIRED：（默认传播行为）如果当前没有事务，就创建一个新事务；如果当前存在事务，就加入该事务。</li>
<li>② PROPAGATION_REQUIRES_NEW：无论当前存不存在事务，都创建新事务进行执行。</li>
<li>③ PROPAGATION_SUPPORTS：如果当前存在事务，就加入该事务；如果当前不存在事务，就以非事务执行。‘</li>
<li>④ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>⑤ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则按REQUIRED属性执行。</li>
<li>⑥ PROPAGATION_MANDATORY：如果当前存在事务，就加入该事务；如果当前不存在事务，就抛出异常。</li>
<li>⑦ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li>
</ul>

        <h4 id="（3）Spring中的隔离级别"   >
          <a href="#（3）Spring中的隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#（3）Spring中的隔离级别" class="headerlink" title="（3）Spring中的隔离级别"></a>（3）Spring中的隔离级别</h4>
      <ul>
<li>① ISOLATION_DEFAULT：这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。</li>
<li>② ISOLATION_READ_UNCOMMITTED：读未提交，允许事务在执行过程中，读取其他事务未提交的数据。</li>
<li>③ ISOLATION_READ_COMMITTED：读已提交，允许事务在执行过程中，读取其他事务已经提交的数据。</li>
<li>④ ISOLATION_REPEATABLE_READ：可重复读，在同一个事务内，任意时刻的查询结果都是一致的。</li>
<li>⑤ ISOLATION_SERIALIZABLE：所有事务逐个依次执行。</li>
</ul>

        <h2 id="10-Spring框架中有哪些不同类型的事件"   >
          <a href="#10-Spring框架中有哪些不同类型的事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#10-Spring框架中有哪些不同类型的事件" class="headerlink" title="10. Spring框架中有哪些不同类型的事件"></a>10. Spring框架中有哪些不同类型的事件</h2>
      <p>Spring 提供了以下5种标准的事件：</p>
<p>（1）上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。</p>
<p>（2）上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。</p>
<p>（3）上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。</p>
<p>（4）上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。</p>
<p>（5）请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。</p>
<p>如果一个bean实现了ApplicationListener接口，当一个ApplicationEvent 被发布以后，bean会自动被通知。</p>

        <h2 id="11-BeanFactory和ApplicationContext有什么区别？"   >
          <a href="#11-BeanFactory和ApplicationContext有什么区别？" class="heading-link"><i class="fas fa-link"></i></a><a href="#11-BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="11. BeanFactory和ApplicationContext有什么区别？"></a>11. BeanFactory和ApplicationContext有什么区别？</h2>
      <p>BeanFactory和ApplicationContext是Spring的两大核心接口，都是Spring的IoC容器。</p>
<p>（1）BeanFactory是Spring里面最底层的接口，是IoC的核心，定义了IoC的基本功能，包含了各种Bean的定义、加载、实例化，依赖注入和生命周期管理。ApplicationContext接口作为BeanFactory的子类，除了提供BeanFactory所具有的功能外，还提供了更完整的框架功能，如国际化（简单来说就是不同国家/地区/语言的用户，访问同一个程序，得到对应的本地化资源）和资源文件访问等。</p>
<p>（2）加载形式</p>
<ul>
<li>BeanFactroy采用的是延迟加载形式来注入Bean的，只有在使用到某个Bean时(调用<code>getBean()</code>)，才对该Bean进行加载实例化。</li>
<li>ApplicationContext在容器启动时，一次性创建了所有的Bean。</li>
<li>ApplicationContext启动后预载入所有的单实例Bean，所以在运行的时候速度比较快。</li>
<li>ApplicationContext 唯一的不足是占用内存空间，当应用程序配置Bean较多时，程序启动较慢。</li>
</ul>
<p>（3）BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</p>
<p>（4）BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。</p>

        <h2 id="12-Spring的自动装配"   >
          <a href="#12-Spring的自动装配" class="heading-link"><i class="fas fa-link"></i></a><a href="#12-Spring的自动装配" class="headerlink" title="12. Spring的自动装配"></a>12. Spring的自动装配</h2>
      <p>Spring 容器能够自动装配 bean。也就是说，可以通过检查BeanFactory的内容让Spring自动解析bean的协作者。 自动装配的不同模式：</p>
<ul>
<li>no - 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。</li>
<li>byName - 它根据 bean的名称注入对象依赖项。它匹配并装配其属性与 XML文件中由相同名称定义的 bean。</li>
<li>byType - 它根据类型注入对象依赖项。如果属性的类型与XML文件中的一个bean名称匹配，则匹配并装配属性。</li>
<li>构造函数- 它通过调用类的构造函数来注入依赖项。它有大量的参数。autodetect - 首先容器尝试通过构造函数使用 autowire 装配，如果不能，则尝试通过 byType 自动装配</li>
</ul>

        <h2 id="13-Spring-AOP里面的几个名词的概念"   >
          <a href="#13-Spring-AOP里面的几个名词的概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#13-Spring-AOP里面的几个名词的概念" class="headerlink" title="13. Spring AOP里面的几个名词的概念"></a>13. Spring AOP里面的几个名词的概念</h2>
      <p>（1）连接点（Join point）：指程序运行过程中所执行的方法。在Spring AOP中，一个连接点总代表一个方法的执行。 </p>
<p>（2）切面（Aspect）：被抽取出来的公共模块，可以用来会横切多个对象。Aspect切面可以看成 Pointcut切点 和 Advice通知 的结合，一个切面可以由多个切点和通知组成。</p>
<p>在Spring AOP中，切面可以在类上使用 @AspectJ 注解来实现。</p>
<p>（3）切点（Pointcut）：切点用于定义 要对哪些Join point进行拦截。</p>
<p>切点分为execution方式和annotation方式。execution方式可以用路径表达式指定对哪些方法拦截，比如指定拦截add<em>、search</em>。annotation方式可以指定被哪些注解修饰的代码进行拦截。</p>
<p>（4）通知（Advice）：指要在连接点（Join Point）上执行的动作，即增强的逻辑，比如权限校验和、日志记录等。通知有各种类型，包括Around、Before、After、After returning、After throwing。</p>
<p>（5）目标对象（Target）：包含连接点的对象，也称作被通知（Advice）的对象。 由于Spring AOP是通过动态代理实现的，所以这个对象永远是一个代理对象。</p>
<p>（6）织入（Weaving）：通过动态代理，在目标对象（Target）的方法（即连接点Join point）中执行增强逻辑（Advice）的过程。</p>
<p>（7）引入（Introduction）：添加额外的方法或者字段到被通知的类。Spring允许引入新的接口（以及对应的实现）到任何被代理的对象。例如，你可以使用一个引入来使bean实现 IsModified 接口，以便简化缓存机制。</p>
<p>几个概念的关系图可以参考下图：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5e3935f72dd4f67b05e0b847594f247~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>

        <h2 id="14-Spring通知（Advice）有哪些类型？"   >
          <a href="#14-Spring通知（Advice）有哪些类型？" class="heading-link"><i class="fas fa-link"></i></a><a href="#14-Spring通知（Advice）有哪些类型？" class="headerlink" title="14. Spring通知（Advice）有哪些类型？"></a>14. Spring通知（Advice）有哪些类型？</h2>
      <p>（1）前置通知（Before Advice）：在连接点（Join point）之前执行的通知。</p>
<p>（2）后置通知（After Advice）：当连接点退出的时候执行的通知（不论是正常返回还是异常退出）。 </p>
<p>（3）环绕通知（Around Advice）：包围一个连接点的通知，这是最强大的一种通知类型。 环绕通知可以在方法调用前后完成自定义的行为。它也可以选择是否继续执行连接点或直接返回它们自己的返回值或抛出异常来结束执行。</p>
<p>（4）返回后通知（AfterReturning Advice）：在连接点正常完成后执行的通知（如果连接点抛出异常，则不执行）</p>
<p>（5）抛出异常后通知（AfterThrowing advice）：在方法抛出异常退出时执行的通知</p>
<p><strong>通知顺序</strong></p>
<ul>
<li>Spring4（默认用的是JDK的动态代理）</li>
</ul>
<p>正常：环绕通知前-&gt;前置通知-&gt;方法正常运行-&gt;环绕通知后-&gt;后置通知-&gt;返回后通知</p>
<p>异常：环绕通知前-&gt;前置通知-&gt;方法运行异常-&gt;后置通知-&gt;异常通知</p>
<ul>
<li>Spring5（默认动态代理用的是cglib）</li>
</ul>
<p>正常：环绕通知前-&gt;前置通知-&gt;方法正常运行-&gt;返回后通知-&gt;后置通知-&gt;环绕通知后</p>
<p>异常：环绕通知前-&gt;前置通知-&gt;方法运行异常-&gt;异常通知-&gt;后置通知</p>

        <h2 id="15-BeanFactory与FactoryBean的区别"   >
          <a href="#15-BeanFactory与FactoryBean的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#15-BeanFactory与FactoryBean的区别" class="headerlink" title="15. BeanFactory与FactoryBean的区别"></a>15. BeanFactory与FactoryBean的区别</h2>
      <p>他们两个都是个工厂，但FactoryBean本质上还是一个Bean，也归BeanFactory管理；BeanFactory是Spring容器的顶层接口，FactoryBean更类似于用户自定义的工厂接口。</p>

        <h4 id="BeanFactory"   >
          <a href="#BeanFactory" class="heading-link"><i class="fas fa-link"></i></a><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4>
      <p>BeanFactory是一个接口，它是Spring中工厂的顶层规范，是SpringIoc容器的核心接口，它定义了getBean()、containsBean()等管理Bean的通用方法。Spring的容器都是它的具体实现如：</p>
<ul>
<li>DefaultListableBeanFactory</li>
<li>XmlBeanFactory</li>
<li>ApplicationContext</li>
</ul>
<p>这些实现类又从不同的维度分别有不同的扩展。</p>
<p>使用场景：</p>
<ul>
<li>从Ioc容器中获取Bean(byName or byType)</li>
<li>检索Ioc容器中是否包含指定的Bean</li>
<li>判断Bean是否为单例</li>
</ul>

        <h4 id="FactoryBean"   >
          <a href="#FactoryBean" class="heading-link"><i class="fas fa-link"></i></a><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4>
      <p>首先它是一个Bean，但又不仅仅是一个Bean。它是一个能生产或修饰对象生成的工厂Bean，类似于设计模式中的工厂模式和装饰器模式。它能在需要的时候生产一个对象，且不仅仅限于它自身，它能返回任何Bean的实例。</p>
<p>使用场景：</p>
<p>FactoryBean在Spring中最为典型的一个应用就是用来创建AOP的代理对象。 我们知道AOP实际上是Spring在运行时创建了一个代理对象，也就是说这个对象，是我们在运行时创建的，而不是一开始就定义好的，这很符合工厂方法模式。更形象地说，AOP代理对象通过Java的反射机制，在运行时创建了一个代理对象，在代理对象的目标方法中根据业务要求织入了相应的方法。这个对象在Spring中就是——ProxyFactoryBean。 所以，FactoryBean为我们实例化Bean提供了一个更为灵活的方式，我们可以通过FactoryBean创建出更为复杂的Bean实例。</p>

        <h2 id="16-Spring容器的启动流程"   >
          <a href="#16-Spring容器的启动流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#16-Spring容器的启动流程" class="headerlink" title="16. Spring容器的启动流程"></a>16. Spring容器的启动流程</h2>
      <p>（1）初始化Spring容器，注册内置的BeanPostProcessor的BeanDefinition到容器中</p>
<ul>
<li>实例化BeanFactory【DefaultListableBeanFactory】工厂，用于生成Bean对象</li>
<li>实例化BeanDefinitionReader注解配置读取器，用于对特定注解（如@Service、@Repository）的类进行读取转化成 BeanDefinition 对象，（BeanDefinition 是 Spring 中极其重要的一个概念，它存储了 bean 对象的所有特征信息，如是否单例，是否懒加载，factoryBeanName 等）</li>
<li>实例化ClassPathBeanDefinitionScanner路径扫描器，用于对指定的包目录进行扫描查找 bean 对象</li>
</ul>
<p>（2）将配置类的BeanDefinition注册到容器中：</p>
<p>（3）调用refresh()方法刷新容器</p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper学习笔记</title>
    <url>/2022/05/08/Zookeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[
        <h2 id="简介"   >
          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h2>
      <blockquote>
<p><code>Zookeeper</code>是一个分布式的、开源的程序协调服务，是 hadoop 项目下的一个子项目。他提供的主要功 能包括：配置管理、名字服务、分布式锁、集群管理等。从名字来看zookeeper 就是动物园管理员，他是用来管 hadoop（大象）、Hive(蜜蜂)、pig(小猪)的管理员， Apache Hbase 和 Apache Solr 的分布式集群都用到了 zookeeper。另外zookeeper是分布式的基础，学习好zookeeper是学习分布式系统的基础，比如ZAB协议等。</p>
</blockquote>
<span id="more"></span>


        <h2 id="基本概念"   >
          <a href="#基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2>
      <p>ZooKeepr 提供基于类似于文件系统的目录节点树方式的数据存储，这是一个共享的<strong>内存中的树型结构</strong>。有几个概念需要关注一下。</p>
<ol>
<li><p><strong>Session</strong>会话 客户端启动会与服务端建立一个 TCP 长连接，通过这个连接可以发送请求并接受响应，以及接受服务端的 Watcher 事件通知</p>
</li>
<li><p><strong>Znode</strong> 数据节点 ，会保存自己的数据内容和属性信息，分为持久和临时节点，节点有 SEQUENTIAL 属性，Znode有一下几种类型</p>
<ul>
<li><p>(1)<strong>PERSISTENT</strong> <strong>持久化节点</strong>: 所谓持久节点，是指在节点创建后，就一直存在，直到 有删除操作来主动清除这个节点。否则不会因为创建该节点的客户端会话失效而消失。</p>
</li>
<li><p>(2)<strong>PERSISTENT_SEQUENTIAL</strong> <strong>持久顺序节点</strong>：这类节点的基本特性和上面的节点类 型是一致的。额外的特性是，在 ZK 中，每个父节点会为他的第一级子节点维护一份时序， 会记录每个子节点创建的先后顺序。基于这个特性，在创建子节点的时候，可以设置这个属 性，那么在创建节点过程中，ZK 会自动为给定节点名加上一个数字后缀，作为新的节点名。 这个数字后缀的范围是整型的最大值。 在创建节点的时候只需要传入节点 “/test_”，这样 之后，zookeeper 自动会给”test_”后面补充数字。</p>
</li>
<li><p>(3)<strong>EPHEMERAL 临时节点</strong>：和持久节点不同的是，临时节点的生命周期和客户端会 话绑定。也就是说，如果客户端会话失效，那么这个节点就会自动被清除掉。注意，这里提 到的是会话失效，而非连接断开。另外，在临时节点下面不能创建子节点。 这里还要注意一件事，就是当你客户端会话失效后，所产生的节点也不是一下子就消失 了，也要过一段时间，大概是 10 秒以内，可以试一下，本机操作生成节点，在服务器端用 命令来查看当前的节点数目，你会发现客户端已经 stop，但是产生的节点还在。</p>
</li>
<li><p>(4) <strong>EPHEMERAL_SEQUENTIAL 临时自动编号节点</strong>：此节点是属于临时节点，不过带 有顺序，客户端会话结束节点就消失。</p>
</li>
</ul>
</li>
<li><p><strong>Watcher 事件监听器</strong> ,类似一个观察者设计模式，客户端可以监听节点或者节点对应的数据,该机制是 ZooKeeper 实现分布式协调服务的重要特性。其实zk就是znode+watch，通过4中节点和watch机制就可以玩出很多花样来。</p>
</li>
<li><p>Zookeeper 集群中的角色</p>
<ul>
<li><strong>leader</strong>领导者 负责进行投票的发起和决议</li>
<li><strong>follower</strong>跟随者 用于接收客户端请求，并相应结果，在选主过程中参与投票</li>
<li><strong>observer</strong>观察者 将写请求转发给leader （<strong>思考一下为什么会有个观察者节点，有什么作用呢？</strong>答案在最后）</li>
</ul>
</li>
<li><p><strong>ACL</strong></p>
<p>ZooKeeper 采用 ACL（AccessControlLists）策略来进行权限控制，类似于 UNIX 文件系统的权限控制。</p>
<ul>
<li>create：创建子节点的权限</li>
<li>read 获取节点数据和子节点的权限</li>
<li>write 更新节点数据的权限</li>
<li>delete 删除子节点的权限</li>
<li>admin 设置节点ACL的权限</li>
</ul>
<p>其中尤其需要注意的是，CREATE 和 DELETE 这两种权限都是针对子节点的权限控制。</p>

        <h2 id="stat结构体"   >
          <a href="#stat结构体" class="heading-link"><i class="fas fa-link"></i></a><a href="#stat结构体" class="headerlink" title="stat结构体"></a>stat结构体</h2>
      </li>
</ol>
<ul>
<li>czxid 创建节点的事务id 全局唯一有次序的时间戳，如zxid1小于zxid2，那么zxid1的事务一定发生在zxid2之前</li>
<li>ctime-znode 被创建的毫秒数</li>
<li>mzxid 节点最后更新的事务id</li>
<li>mtime-znode 最后修改的毫秒数</li>
<li>pZxid-znode 最后更新的子节点zxid</li>
<li>cversion-znode 子节点变化号，znode修改次数</li>
<li>dataversion-znode数据变化号</li>
<li>aclVersion 访问控制列表的变化号（acl访问控制，可以理解为权限）</li>
<li>ephemeralOwner  如果是临时节点 表示临时节点所属客户端的sessionId</li>
</ul>

        <h2 id="Zookeeper使用场景"   >
          <a href="#Zookeeper使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#Zookeeper使用场景" class="headerlink" title="Zookeeper使用场景"></a>Zookeeper使用场景</h2>
      <p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-c6c4659eacb4c50b.png"></p>
<blockquote>
<p>众所周知，zookeeper的架构特备简单，一个unix文件系统+一个监听器就可以实现有很多功能。</p>
</blockquote>
<ul>
<li>数据发布/订阅</li>
<li>负载均衡</li>
<li>命名服务</li>
<li>分布式协调/通知</li>
<li>集群管理</li>
<li>Master 选举</li>
<li>分布式锁</li>
<li>分布式队列</li>
</ul>

        <h4 id="数据发布订阅"   >
          <a href="#数据发布订阅" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据发布订阅" class="headerlink" title="数据发布订阅"></a>数据发布订阅</h4>
      <p>数据发布/订阅的一个常见的场景是配置中心，发布者把数据发布到 ZooKeeper 的一个或一系列的节点上，供订阅者进行数据订阅，达到<strong>动态获取数据</strong>的目的。</p>
<p>配置信息一般有几个特点:</p>
<ol>
<li>数据量小的KV</li>
<li>数据内容在运行时会发生动态变化</li>
<li>集群机器共享，配置一致</li>
</ol>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-aa9041d0c5b6a53d.png"></p>
<p>ZooKeeper 采用的是<strong>推拉结合</strong>的方式。</p>
<ol>
<li>推: 服务端会推给注册了监控节点的客户端 Wathcer 事件通知</li>
<li>拉: 客户端获得通知后，然后主动到服务端拉取最新的数据</li>
</ol>
<p>实现的思路可以如下。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mysql.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">dbJDBCUrl=jdbc:mysql://127.0.0.1/mcgrady</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></div></figure>

<ol>
<li>把配置信息写到一个 Znode 上，例如 <code>/conf</code></li>
<li>客户端启动初始化阶段读取服务端节点的数据，并且注册一个数据变更的 Watcher</li>
<li>配置变更只需要对 Znode 数据进行 set 操作，数据变更的通知会发送到客户端，客户端重新获取新数据，完成配置动态修改</li>
</ol>

        <h4 id="分布式协调"   >
          <a href="#分布式协调" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布式协调" class="headerlink" title="分布式协调"></a>分布式协调</h4>
      <p>这个其实是 zookeeper 很经典的一个用法，简单来说，就好比，你 A 系统发送个请求到 mq，然后 B 系统消息消费之后处理了。那 A 系统如何知道 B 系统的处理结果？用 zookeeper 就可以实现分布式系统之间的协调工作。A 系统发送请求之后可以在 zookeeper 上<strong>对某个节点的值注册个监听器</strong>，一旦 B 系统处理完了就修改 zookeeper 那个节点的值，A 系统立马就可以收到通知，完美解决。</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-2027c8b9e3688a62.png"></p>

        <h4 id="负载均衡"   >
          <a href="#负载均衡" class="heading-link"><i class="fas fa-link"></i></a><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4>
      <p>负载均衡是一种手段，用来把对某种资源的访问分摊给不同的设备，从而<strong>减轻单点</strong>的压力。</p>
<p>实现的思路:</p>
<ol>
<li>首先建立 Servers 节点，并建立监听器监视 Servers 子节点的状态（用于在服务器增添时及时同步当前集群中服务器列表）</li>
<li>在每个服务器启动时，在 Servers 节点下建立<strong>临时子节点</strong> Worker Server，并在对应的字节点下存入服务器的相关信息，包括服务的地址，IP，端口等等</li>
<li>可以<strong>自定义一个负载均衡算法</strong>，在每个请求过来时从 ZooKeeper 服务器中获取当前集群服务器列表，根据算法选出其中一个服务器来处理请求</li>
</ol>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-d56aff803fd2ce54.png"></p>

        <h4 id="分布式锁"   >
          <a href="#分布式锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4>
      <p>举个栗子。对某一个数据连续发出两个修改操作，两台机器同时收到了请求，但是只能一台机器先执行完另外一个机器再执行。那么此时就可以使用 zookeeper 分布式锁，一个机器接收到了请求之后先获取 zookeeper 上的一把分布式锁，就是可以去创建一个 znode，接着执行操作；然后另外一个机器也<strong>尝试去创建</strong>那个 znode，结果发现自己创建不了，因为被别人创建了，那只能等着，等第一个机器执行完了自己再执行。</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-8e5a139e56c1fdc3.png"></p>

        <h4 id="元数据-配置信息管理"   >
          <a href="#元数据-配置信息管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#元数据-配置信息管理" class="headerlink" title="元数据/配置信息管理"></a>元数据/配置信息管理</h4>
      <p>zookeeper 可以用作很多系统的配置信息的管理，比如 kafka、storm 等等很多分布式系统都会选用 zookeeper 来做一些元数据、配置信息的管理，包括 dubbo 注册中心不也支持 zookeeper 么？</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-5858a5b1b4950925.png"></p>

        <h4 id="HA高可用性"   >
          <a href="#HA高可用性" class="heading-link"><i class="fas fa-link"></i></a><a href="#HA高可用性" class="headerlink" title="HA高可用性"></a>HA高可用性</h4>
      <p>这个应该是很常见的，比如 hadoop、hdfs、yarn 等很多大数据系统，都选择基于 zookeeper 来开发 HA 高可用机制，就是一个<strong>重要进程一般会做主备</strong>两个，主进程挂了立马通过 zookeeper 感知到切换到备用进程。</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-aec97bb8e275409c.png"></p>

        <h2 id="安装zookeeper"   >
          <a href="#安装zookeeper" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h2>
      
        <h4 id="单机模式"   >
          <a href="#单机模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4>
      <ol>
<li><p>下载zookeeper 下载地址 <code>http://mirrors.hust.edu.cn/apache/zookeeper/</code></p>
</li>
<li><p>解压</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">tar</span> <span class="string">-zxvf  apache-zookeeper-3.6.0.tar.gz -C /usr/software/</span></span><br></pre></td></tr></table></div></figure></li>
<li><p>配置</p>
</li>
</ol>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">conf 进入到zookeeper的配置文件目录</span></span><br><span class="line"><span class="attr">cp</span> <span class="string">zoo_sample.cfg zoo.cfg 复制一份名为zoo.cfg的配置文件</span></span><br><span class="line"><span class="attr">需要注意的几个配置</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000 #心跳间隔</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">5 #集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">2 #集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/usr/software/zookeeper-3.6.0/data  # 数据存储路径</span></span><br><span class="line"><span class="attr">dataLogDir</span>=<span class="string">/usr/software/zookeeper-3.6.0/logs #日志路径</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181 #端口</span></span><br></pre></td></tr></table></div></figure>

<ol start="4">
<li> 常用命令</li>
</ol>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">启动命令：./bin/zkServer.sh</span> <span class="string">start</span></span><br><span class="line"></span><br><span class="line"><span class="attr">停止命令：./bin/zkServer.sh</span> <span class="string">stop　　</span></span><br><span class="line"></span><br><span class="line"><span class="attr">重启命令：./bin/zkServer.sh</span> <span class="string">restart</span></span><br><span class="line"></span><br><span class="line"><span class="attr">状态查看命令：./bin/zkServer.sh</span> <span class="string">status</span></span><br></pre></td></tr></table></div></figure>

<ol start="5">
<li>启动客户端</li>
</ol>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">./bin/zkCli.sh</span><br></pre></td></tr></table></div></figure>


        <h4 id="集群模式"   >
          <a href="#集群模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4>
      <ol>
<li>三台机器上分别部署一个zookeeper实例</li>
<li>分别在3台机器的配置文件</li>
</ol>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/usr/software/zookeeper-3.6.0/data</span></span><br><span class="line"><span class="attr">dataLogDir</span>=<span class="string">/usr/software/zookeeper-3.6.0/logs</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server.1</span>=<span class="string">127.0.0.1:2888:3888</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">127.0.0.2:2888:3888</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">127.0.0.3:2888:3888</span></span><br></pre></td></tr></table></div></figure>

<p><strong>注意：</strong>server.A=B:C:D中的A是一个数字,表示这个是第几号服务器,B是这个服务器的IP地址，C第一个端口用来集群成员的信息交换,表示这个服务器与集群中的leader服务器交换信息的端口，D是在leader挂掉时专门用来进行选举leader所用的端口。</p>
<ol start="3">
<li>创建ServerID标识</li>
</ol>
<p>除了修改zoo.cfg配置文件外,zookeeper集群模式下还要配置一个myid文件,这个文件需要放在dataDir目录下。这个文件里面有一个数据就是A的值（该A就是zoo.cfg文件中server.A=B:C:D中的A）,在zoo.cfg文件中配置的dataDir路径中创建myid文件。</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">三台机器分别执行：</span> <span class="string"></span></span><br><span class="line"><span class="attr">echo</span> <span class="string">&quot;1&quot; &gt; /usr/software/zookeeper-3.6.0/myid </span></span><br><span class="line"><span class="attr">echo</span> <span class="string">&quot;2&quot; &gt; /usr/software/zookeeper-3.6.0/myid </span></span><br><span class="line"><span class="attr">echo</span> <span class="string">&quot;3&quot; &gt; /usr/software/zookeeper-3.6.0/myid </span></span><br></pre></td></tr></table></div></figure>

<ol start="4">
<li>依次启动每个节点</li>
</ol>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">./bin/zkServer.sh</span> <span class="string">start</span></span><br></pre></td></tr></table></div></figure>

<ol start="5">
<li>查看集群状态</li>
</ol>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">分别</span> <span class="string">执行</span></span><br><span class="line"><span class="attr">./bin/zkServer.sh</span> <span class="string">status</span></span><br><span class="line"></span><br><span class="line"><span class="attr">可以看到lwader：</span></span><br><span class="line"><span class="attr">ZooKeeper</span> <span class="string">JMX enabled by default</span></span><br><span class="line"><span class="attr">Using</span> <span class="string">config: /usr/software/zookeeper-3.6.0/bin/../conf/zoo.cfg</span></span><br><span class="line"><span class="attr">Mode</span>: <span class="string">leader</span></span><br><span class="line"></span><br><span class="line"><span class="attr">follower：</span></span><br><span class="line"><span class="attr">ZooKeeper</span> <span class="string">JMX enabled by default</span></span><br><span class="line"><span class="attr">Using</span> <span class="string">config: /usr/software/zookeeper-3.6.0/bin/../conf/zoo.cfg</span></span><br><span class="line"><span class="attr">Mode</span>: <span class="string">follower</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<ol start="6">
<li>客户端常用命令</li>
</ol>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">ls</span> <span class="string">查看命令</span></span><br><span class="line"><span class="attr">get</span> <span class="string">获取节点数据和更新信息</span></span><br><span class="line"><span class="attr">create</span> <span class="string">创建节点</span></span><br><span class="line"><span class="attr">create</span> <span class="string">-e 创建临时节点</span></span><br><span class="line"><span class="attr">create</span> <span class="string">-s 创建顺序节点 自动累加</span></span><br><span class="line"><span class="attr">set</span> <span class="string">path data [version] 修改节点</span></span><br><span class="line"><span class="attr">delete</span> <span class="string">path [version] 删除节点</span></span><br><span class="line"><span class="attr">监听节点数据的变化</span></span><br><span class="line"><span class="attr">get</span> <span class="string">path [watch]</span></span><br><span class="line"><span class="attr">监听子节点增减的变化</span></span><br><span class="line"><span class="attr">ls</span> <span class="string">path [watch]</span></span><br><span class="line"><span class="attr">watch监听有不同的类型，有监听状态的stat</span> <span class="string">，内容的get，目录结构的ls。</span></span><br><span class="line"><span class="attr">另外命令使用一次，只监听一次，监听到了就打印内容，打印结束就退出了监听。</span></span><br></pre></td></tr></table></div></figure>




        <h2 id="ZAB-协议-amp-Paxos-算法"   >
          <a href="#ZAB-协议-amp-Paxos-算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#ZAB-协议-amp-Paxos-算法" class="headerlink" title="ZAB 协议 &amp; Paxos 算法"></a>ZAB 协议 &amp; Paxos 算法</h2>
      
        <h4 id="Ⅰ-ZAB-协议-amp-Paxos-算法"   >
          <a href="#Ⅰ-ZAB-协议-amp-Paxos-算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Ⅰ-ZAB-协议-amp-Paxos-算法" class="headerlink" title="Ⅰ.ZAB 协议 &amp; Paxos 算法"></a>Ⅰ.ZAB 协议 &amp; Paxos 算法</h4>
      <p>Paxos 算法可以说是 ZooKeeper 的灵魂了。但是，ZooKeeper 并没有完全采用 Paxos 算法 ，而是使用 ZAB 协议作为其保证数据一致性的核心算法。</p>
<p>另外，在 ZooKeeper 的官方文档中也指出，ZAB 协议并不像 Paxos 算法那样，是一种通用的分布式一致性算法，它是一种特别为 ZooKeeper 设计的崩溃可恢复的原子消息广播算法。</p>

        <h4 id="Ⅱ-ZAB-协议介绍"   >
          <a href="#Ⅱ-ZAB-协议介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#Ⅱ-ZAB-协议介绍" class="headerlink" title="Ⅱ.ZAB 协议介绍"></a>Ⅱ.ZAB 协议介绍</h4>
      <p>ZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。</p>
<p>在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>

        <h4 id="Ⅲ-ZAB-协议两种基本的模式"   >
          <a href="#Ⅲ-ZAB-协议两种基本的模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#Ⅲ-ZAB-协议两种基本的模式" class="headerlink" title="Ⅲ.ZAB 协议两种基本的模式"></a>Ⅲ.ZAB 协议两种基本的模式</h4>
      <p>ZAB 协议包括两种基本的模式，分别是崩溃恢复和消息广播。</p>
<p>当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。</p>
<p>当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。</p>
<p>其中，所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致。</p>
<p>当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进人消息广播模式了。</p>
<p>当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播。</p>
<p>那么新加入的服务器就会自觉地进人数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。</p>
<p>ZooKeeper 设计成只允许唯一的一个 Leader 服务器来进行事务请求的处理。</p>
<p>Leader 服务器在接收到客户端的事务请求后，会生成对应的事务提案并发起一轮广播协议。</p>
<p>而如果集群中的其他机器接收到客户端的事务请求，那么这些非 Leader 服务器会首先将这个事务请求转发给 Leader 服务器。</p>
<p>zookeeper进行ack时采用过半机制,不用等待所有的follower都ack</p>
<p>zookeeper如果写入数据时因为网络或其他原因没有提交到从节点，那么从节点在下次启动时会自动从leader同步</p>
<p>普通的从节点虽然会提高读请求的并发能力，但是对于写请求由于投票机制会变慢</p>

        <h3 id="思考"   >
          <a href="#思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#思考" class="headerlink" title="思考"></a>思考</h3>
      <p>一下是一些zk的常见面试题</p>
<ol>
<li>Zookeeper工作原理</li>
</ol>
<blockquote>
<p>Zookeeper 的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议。Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和 leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。此时系统的不可用的，所以ZooKeeper采用的是CP原则</p>
</blockquote>
<ol start="2">
<li>zookeeper中的观察者节点有什么作用？</li>
</ol>
<blockquote>
<p>首先观察者节点个floower节点最大的区别就是观察着节点不参与选举，试想下问什么会这样设计，其实也很好理解，再zk集群中，添加一个节点，就会提升对应的并发能力，但是集群在选举master的时候是不是也对应多了一个节点进行投票选举，这就导致选举投票机制变慢，所以观察者节点就是单纯的提高读请求并发能力，对于写请求基本没有影响(zk写的时候会将数据包发给观察者节点)。这一点和rabbitMQ中的内存节点磁盘节点，ElasticSearch中的data节点非data节点设计思路如出一辙。</p>
</blockquote>
<ol start="3">
<li>zookeeper是如何满足cap理论的</li>
</ol>
<blockquote>
<p>zk中使用的cap中的cp 即满足想一致性</p>
</blockquote>
<ol start="4">
<li>zookeeper集群中为什么选择奇数个数节点</li>
</ol>
<blockquote>
<p>因为zk的过半机制，比如分别有3和节点和4个节点的zk集群，他们都是最多挂掉一个就不可用了，所以。。。。</p>
</blockquote>
<ol start="5">
<li>Zookeeper 下 Server工作状态</li>
</ol>
<blockquote>
<p>每个Server在工作过程中有三种状态：</p>
<p>looking：当前Server不知道leader是谁，正在搜寻</p>
<p>leading：当前Server即为选举出来的leader</p>
<p>following：leader已经选举出来，当前Server与之同步</p>
</blockquote>
<ol start="6">
<li>zookeeper是如何保证事务的顺序一致性的？</li>
</ol>
<blockquote>
<p>两段协议，首先会向其他的server发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。</p>
</blockquote>
<ol start="7">
<li>zookeeper实现分布式锁的原理</li>
</ol>
<ul>
<li><p>首先要有一个main()线程</p>
</li>
<li><p>在main线程中创建zookeeper客户端,这时就会创建两个线程,一个负责网络连接通信(connect),一个负责监听(listener)。</p>
</li>
<li><p>通过connect线程将注册的监听事件发送给zookeeper。</p>
</li>
<li><p>在zookeeper的注册监听器列表中将注册的监听事件添加到列表中。</p>
</li>
<li><p>zookeeper监听到有数据或路径变化,就会将这个消息发送给listener线程。</p>
</li>
<li><p>listener线程内部调用了process()方法</p>
</li>
</ul>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/8387919-ca9f906cd7e22be2.png"></p>
]]></content>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>三 Spring Data JPA 使用教程</title>
    <url>/2022/05/13/%E4%B8%89-Spring-Data-JPA-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[
        <h2 id="3-Spring-Data-JPA-使用"   >
          <a href="#3-Spring-Data-JPA-使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-Spring-Data-JPA-使用" class="headerlink" title="3. Spring Data JPA 使用"></a>3. Spring Data JPA 使用</h2>
      <blockquote>
<p>怎么用</p>
</blockquote>

        <h3 id="3-0-前置知识"   >
          <a href="#3-0-前置知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-0-前置知识" class="headerlink" title="3.0 前置知识"></a>3.0 前置知识</h3>
      <span id="more"></span>


        <h4 id="EntityManager"   >
          <a href="#EntityManager" class="heading-link"><i class="fas fa-link"></i></a><a href="#EntityManager" class="headerlink" title="EntityManager "></a>EntityManager <!-- {docsify-ignore} --></h4>
      <blockquote>
<p>Spring Data JPA 基于Hibernate的封装，核心是EntityManger对数据库机型操作</p>
</blockquote>

        <h4 id="Entity"   >
          <a href="#Entity" class="heading-link"><i class="fas fa-link"></i></a><a href="#Entity" class="headerlink" title="Entity "></a>Entity <!-- {docsify-ignore} --></h4>
      <blockquote>
<p>Entity是Spring Data的核心，它定义了应用实体与存储介质的映射关系</p>
</blockquote>

        <h4 id="Repository"   >
          <a href="#Repository" class="heading-link"><i class="fas fa-link"></i></a><a href="#Repository" class="headerlink" title="Repository "></a>Repository <!-- {docsify-ignore} --></h4>
      <blockquote>
<p> Spring Data库的核心接口是<code>Repository</code>。该接口作为一个标记接口，利用Java语言本身特性来发现Repository接口。</p>
</blockquote>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220228235420438.png" alt="image-20220228235420438"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/JPARepository.png" alt="JPARepository"></p>
<p><strong><code>CrudRepository </code>接口</strong></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CrudRepository</span>&lt;T, ID <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;T, ID&gt; &#123;        </span><br><span class="line"></span><br><span class="line"> &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; S <span class="title function_">save</span><span class="params">(S entity)</span>;    (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"> T <span class="title function_">findOne</span><span class="params">(ID primaryKey)</span>;          (<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"> Iterable&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span>;             (<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"> Long <span class="title function_">count</span><span class="params">()</span>;                      (<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(T entity)</span>;             (<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(ID primaryKey)</span>;     (<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// … more functionality omitted.</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><strong><code>CrudRepository </code>接口</strong></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; &#123;</span><br><span class="line"></span><br><span class="line">	Iterable&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Sort sort)</span>;</span><br><span class="line"></span><br><span class="line">	Page&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Pageable pageable)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><code>JpaSpecificationExecutor</code><strong>接口</strong></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to allow execution of &#123;<span class="doctag">@link</span> Specification&#125;s based on the JPA criteria API.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JpaSpecificationExecutor</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns a single entity matching the given &#123;<span class="doctag">@link</span> Specification&#125; or &#123;<span class="doctag">@link</span> Optional#empty()&#125; if none found.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec can be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> never &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.dao.IncorrectResultSizeDataAccessException if more than one entity found.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Optional&lt;T&gt; <span class="title function_">findOne</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; spec)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns all entities matching the given &#123;<span class="doctag">@link</span> Specification&#125;.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec can be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> never &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	List&lt;T&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; spec)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns a &#123;<span class="doctag">@link</span> Page&#125; of entities matching the given &#123;<span class="doctag">@link</span> Specification&#125;.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec can be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> pageable must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> never &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Page&lt;T&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; spec, Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns all entities matching the given &#123;<span class="doctag">@link</span> Specification&#125; and &#123;<span class="doctag">@link</span> Sort&#125;.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec can be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sort must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> never &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	List&lt;T&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; spec, Sort sort)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns the number of instances that the given &#123;<span class="doctag">@link</span> Specification&#125; will return.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec the &#123;<span class="doctag">@link</span> Specification&#125; to count instances for. Can be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the number of instances.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">long</span> <span class="title function_">count</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; spec)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h3 id="3-1-spring-boot集成"   >
          <a href="#3-1-spring-boot集成" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-spring-boot集成" class="headerlink" title="3.1 spring-boot集成"></a>3.1 spring-boot集成</h3>
      
        <h4 id="3-1-1-创建工程"   >
          <a href="#3-1-1-创建工程" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-1-创建工程" class="headerlink" title="3.1.1 创建工程"></a>3.1.1 创建工程</h4>
      <ul>
<li><p>工程名：<code>awesome-jpa</code></p>
</li>
<li><p>构建工具：<code>maven</code></p>
</li>
<li><p>spring-boot版本：<code>2.3.2-SNAPSHOT</code></p>
</li>
<li><p>数据库： <code>Mysql5.7</code></p>
</li>
</ul>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220512093931756.png" alt="image-20220512093931756"></p>

        <h4 id="3-1-2-引入依赖"   >
          <a href="#3-1-2-引入依赖" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-2-引入依赖" class="headerlink" title="3.1.2 引入依赖"></a>3.1.2 引入依赖</h4>
      <figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="3-1-3-初始化数据库"   >
          <a href="#3-1-3-初始化数据库" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-3-初始化数据库" class="headerlink" title="3.1.3 初始化数据库"></a>3.1.3 初始化数据库</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `awesome<span class="operator">-</span>jpa` <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-1-4-服务配置"   >
          <a href="#3-1-4-服务配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-4-服务配置" class="headerlink" title="3.1.4 服务配置"></a>3.1.4 服务配置</h4>
      <figure class="highlight yaml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">awesome-jpa</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">3600000</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/awesome-jpa?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MySQL</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">generate-ddl:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="3-1-5-创建实体"   >
          <a href="#3-1-5-创建实体" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-5-创建实体" class="headerlink" title="3.1.5 创建实体"></a>3.1.5 创建实体</h4>
      <p><strong>Customer</strong></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-05-10 13:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_customer&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String postCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String channelId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String companyId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_by&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String  createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;update_by&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><strong>Postsale</strong></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-05-10 13:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_postsale&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Postsale</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;afs_sn&quot;, unique = true, nullable = false, length = 64)</span></span><br><span class="line">    <span class="keyword">private</span> String afsSn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;afsType&quot;, nullable = false, length = 64)</span></span><br><span class="line">    <span class="keyword">private</span> Integer afsType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;order_sn&quot;, length = 64)</span></span><br><span class="line">    <span class="keyword">private</span> String orderSn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;user_name&quot;, length = 128)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;user_id&quot;, length = 128)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;remark&quot;, length = 256)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;apply_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String  applyTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_by&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String  createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;update_by&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>




        <h3 id="3-2-基本用法"   >
          <a href="#3-2-基本用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-基本用法" class="headerlink" title="3.2 基本用法"></a>3.2 基本用法</h3>
      
        <h4 id="3-2-1-实体映射"   >
          <a href="#3-2-1-实体映射" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-1-实体映射" class="headerlink" title="3.2.1 实体映射"></a>3.2.1 实体映射</h4>
      
        <h5 id="1-常用JPA配置"   >
          <a href="#1-常用JPA配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-常用JPA配置" class="headerlink" title="1) 常用JPA配置"></a>1) 常用JPA配置</h5>
      <figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">none|create|create-drop|upadte|validate</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">datasource</span> <span class="string">...</span></span><br></pre></td></tr></table></div></figure>

<ul>
<li><code>create</code>：每次运行程序时，都会重新创建表，故而数据会丢失</li>
<li><code>create-drop</code>：每次运行程序时会先创建表结构，然后待程序结束时清空表</li>
<li><code>upadte</code>：每次运行程序，没有表时会创建表，如果对象发生改变会更新表结构，原有数据不会清空，只会更新</li>
<li><code>validate</code>：运行程序会校验数据与数据库的字段类型是否相同，字段不同会报错</li>
<li><code>none</code>: 禁用DDL处理</li>
</ul>

        <h5 id="2-常用注解"   >
          <a href="#2-常用注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-常用注解" class="headerlink" title="2) 常用注解"></a>2) 常用注解</h5>
      <ul>
<li>@Entity</li>
</ul>
<p>表示这是一个实体类，默认情况下，类名就是表名</p>
<ul>
<li>@Table</li>
</ul>
<p>与<code>@Entity</code>并列使用，自定义数据库表名，该注解完全可以忽略掉不用</p>
<ul>
<li>@Id </li>
</ul>
<p>表明该属性字段是一个主键，该属性必须具备，不可缺少。</p>
<ul>
<li>@GeneratedValue</li>
</ul>
<p>和 @Id 主键注解一起使用</p>
<ol>
<li>@GeneratedValue(strategy= GenerationType.IDENTITY) 该注解由数据库自动生成，主键自增型，在 mysql 数据库中使用最频繁，oracle 不支持。</li>
<li>@GeneratedValue(strategy= GenerationType.AUTO) 主键由程序控制，默认的主键生成策略，oracle 默认是序列化的方式，mysql 默认是主键自增的方式。</li>
<li>@GeneratedValue(strategy= GenerationType.SEQUENCE) 根据底层数据库的序列来生成主键，条件是数据库支持序列，Oracle支持，Mysql不支持。</li>
<li>@GeneratedValue(strategy= GenerationType.TABLE) 使用一个特定的数据库表格来保存主键，较少使用。</li>
</ol>
<ul>
<li>@Column</li>
</ul>
<p>用来描述实体属性对应数据表字段，其中<code>name、nullable、unique、length</code>属性用的较多，分别用来描述字段名、字段是否可以null、字段是否唯一、字段的长度。</p>
<ul>
<li>@Transient </li>
</ul>
<p>该注解标注的字段不会被应射到数据库当中。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-05-10 13:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;t_postsale&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Postsale</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;afs_sn&quot;, unique = true, nullable = false, length = 64)</span></span><br><span class="line">    <span class="keyword">private</span> String afsSn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;afsType&quot;, nullable = false, length = 64)</span></span><br><span class="line">    <span class="keyword">private</span> Integer afsType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;order_sn&quot;, length = 64)</span></span><br><span class="line">    <span class="keyword">private</span> String orderSn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;user_name&quot;, length = 128)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;user_id&quot;, length = 128)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;remark&quot;, length = 256)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;apply_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String  applyTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_by&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String  createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;update_by&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>




        <h4 id="3-2-2-通用增删查改"   >
          <a href="#3-2-2-通用增删查改" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-2-通用增删查改" class="headerlink" title="3.2.2 通用增删查改"></a>3.2.2 通用增删查改</h4>
      
        <h5 id="JpaRepository"   >
          <a href="#JpaRepository" class="heading-link"><i class="fas fa-link"></i></a><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JpaRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123;</span><br><span class="line">    List&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Sort var1)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; <span class="title function_">findAllById</span><span class="params">(Iterable&lt;ID&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; List&lt;S&gt; <span class="title function_">saveAll</span><span class="params">(Iterable&lt;S&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; S <span class="title function_">saveAndFlush</span><span class="params">(S var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAllInBatch</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">getOne</span><span class="params">(ID var1)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; List&lt;S&gt; <span class="title function_">findAll</span><span class="params">(Example&lt;S&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; List&lt;S&gt; <span class="title function_">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="PagingAndSortingRepository"   >
          <a href="#PagingAndSortingRepository" class="heading-link"><i class="fas fa-link"></i></a><a href="#PagingAndSortingRepository" class="headerlink" title="PagingAndSortingRepository"></a>PagingAndSortingRepository</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns all entities sorted by the given options.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sort</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> all entities sorted by the given options</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Iterable&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Sort sort)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns a &#123;<span class="doctag">@link</span> Page&#125; of entities meeting the paging restriction provided in the &#123;<span class="doctag">@code</span> Pageable&#125; object.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> a page of entities</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Page&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Pageable pageable)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="CrudRepository"   >
          <a href="#CrudRepository" class="heading-link"><i class="fas fa-link"></i></a><a href="#CrudRepository" class="headerlink" title="CrudRepository"></a>CrudRepository</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;T, ID&gt; &#123;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; S <span class="title function_">save</span><span class="params">(S var1)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; Iterable&lt;S&gt; <span class="title function_">saveAll</span><span class="params">(Iterable&lt;S&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    Optional&lt;T&gt; <span class="title function_">findById</span><span class="params">(ID var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">existsById</span><span class="params">(ID var1)</span>;</span><br><span class="line"></span><br><span class="line">    Iterable&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Iterable&lt;T&gt; <span class="title function_">findAllById</span><span class="params">(Iterable&lt;ID&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(ID var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(T var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">(Iterable&lt;? extends T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2-3-方法名查询"   >
          <a href="#3-2-3-方法名查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-3-方法名查询" class="headerlink" title="3.2.3 方法名查询"></a>3.2.3 方法名查询</h4>
      
        <h5 id="1-根据指定字段匹配"   >
          <a href="#1-根据指定字段匹配" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-根据指定字段匹配" class="headerlink" title="1) 根据指定字段匹配"></a>1) 根据指定字段匹配</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Optional&lt;Postsale&gt; <span class="title function_">findByAfsSn</span><span class="params">(String afsSn)</span>;</span><br></pre></td></tr></table></div></figure>


        <h5 id="2-根据指定字段模糊匹配"   >
          <a href="#2-根据指定字段模糊匹配" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-根据指定字段模糊匹配" class="headerlink" title="2) 根据指定字段模糊匹配"></a>2) 根据指定字段模糊匹配</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">List&lt;Postsale&gt; <span class="title function_">findByUserNameLike</span><span class="params">(String afsSn)</span>;</span><br></pre></td></tr></table></div></figure>

<p><strong>方法名称中支持的关键字</strong></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220512151340825.png" alt="image-20220512151340825"></p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220512151403346.png" alt="image-20220512151403346"></p>
<blockquote>
<p><strong>说明：</strong>  In 和 NotIn 也将 Collection 的任何子类以及数组或可变参数作为参数。</p>
</blockquote>

        <h5 id="3-关联关系"   >
          <a href="#3-关联关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-关联关系" class="headerlink" title="3) 关联关系"></a>3) 关联关系</h5>
      <blockquote>
<p>And Or </p>
</blockquote>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Streamable&lt;Postsale&gt; <span class="title function_">findAllByUserIdAndAfsType</span><span class="params">(String userId)</span>;</span><br></pre></td></tr></table></div></figure>


        <h5 id="4-limit"   >
          <a href="#4-limit" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-limit" class="headerlink" title="4) limit"></a>4) limit</h5>
      <blockquote>
<p>Top first</p>
</blockquote>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Streamable&lt;Postsale&gt; <span class="title function_">findTop5ByUserId</span><span class="params">(String userId)</span>;</span><br><span class="line">Streamable&lt;Postsale&gt; <span class="title function_">findFirstByUserId</span><span class="params">(String userId)</span>;</span><br></pre></td></tr></table></div></figure>


        <h5 id="5-分页-amp-排序"   >
          <a href="#5-分页-amp-排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-分页-amp-排序" class="headerlink" title="5) 分页&amp;排序"></a>5) 分页&amp;排序</h5>
      <p>Pageable  Sort </p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">List&lt;Postsale&gt; <span class="title function_">findPostsaleByUserIdOrderByUpdateDateDesc</span><span class="params">(String userId, Pageable pageable)</span>;</span><br></pre></td></tr></table></div></figure>




        <h4 id="3-2-4-JPQL查询"   >
          <a href="#3-2-4-JPQL查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-4-JPQL查询" class="headerlink" title="3.2.4 JPQL查询"></a>3.2.4 JPQL查询</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Query(&quot;SELECT p FROM Postsale p WHERE p.afsSn= ?1&quot;)</span></span><br><span class="line">   Stream&lt;Postsale&gt; <span class="title function_">findAllPostsales</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query(&quot;SELECT p FROM Postsale p&quot;)</span></span><br><span class="line">Stream&lt;Postsale&gt; <span class="title function_">findPostsalesPage</span><span class="params">(Pageable pageable)</span>;</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2-5-原生SQL"   >
          <a href="#3-2-5-原生SQL" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-5-原生SQL" class="headerlink" title="3.2.5 原生SQL"></a>3.2.5 原生SQL</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;SELECT id,afs_sn FROM t_postsale WHERE afs_sn = ?1&quot;, nativeQuery = true)</span></span><br><span class="line">List&lt;Postsale&gt; <span class="title function_">getByAfsSn</span><span class="params">(String sfsSn)</span>;</span><br></pre></td></tr></table></div></figure>

<blockquote>
<p><strong>注意：</strong> 分页查询时需要指定count对应的查询sql</p>
</blockquote>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;SELECT * FROM t_postsale WHERE afs_sn = ?1&quot;,</span></span><br><span class="line"><span class="meta">       countQuery = &quot;SELECT count(1) FROM t_postsale WHERE afs_sn = ?1&quot;,</span></span><br><span class="line"><span class="meta">       nativeQuery = true)</span></span><br><span class="line">Page&lt;User&gt; <span class="title function_">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span>;</span><br></pre></td></tr></table></div></figure>




        <h4 id="3-2-6-Example"   >
          <a href="#3-2-6-Example" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-6-Example" class="headerlink" title="3.2.6 Example"></a>3.2.6 Example</h4>
      <p>Example翻译过来叫做”按例查询”。是一种用户界面友好的查询技术。 它允许动态创建查询，并且不需要编写包含字段名称的查询。 而且按示例查询不需要使用特定的数据库的查询语言来编写查询语句。</p>
<p><strong>优势：</strong></p>
<ul>
<li>可以使用动态或者静态的限制去查询</li>
<li>在重构你的实体的时候，不用担心影响到已有的查询</li>
<li>可以独立地工作在数据查询API之外</li>
</ul>
<p><strong>劣势：</strong></p>
<ul>
<li>不支持组合查询，比如：firstname = ?0 or (firstname = ?1 and lastname = ?2).</li>
<li>只支持字符串的starts/contains/ends/regex匹配，对于非字符串的属性，只支持精确匹配。换句话说，并不支持大于、小于、between等匹配。</li>
</ul>
<p>简单来说，Example查询具有更好的可读性。但是笔者使用了一下，觉得功能太弱，不如Specification查询。就是<strong>使用很简单，但功能很弱</strong>。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">QueryByExampleExecutor</span>&lt;T&gt; &#123;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; Optional&lt;S&gt; <span class="title function_">findOne</span><span class="params">(Example&lt;S&gt; example)</span>;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; Iterable&lt;S&gt; <span class="title function_">findAll</span><span class="params">(Example&lt;S&gt; example)</span>;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; Iterable&lt;S&gt; <span class="title function_">findAll</span><span class="params">(Example&lt;S&gt; example, Sort sort)</span>;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; Page&lt;S&gt; <span class="title function_">findAll</span><span class="params">(Example&lt;S&gt; example, Pageable pageable)</span>;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; <span class="type">long</span> <span class="title function_">count</span><span class="params">(Example&lt;S&gt; example)</span>;</span><br><span class="line">    &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(Example&lt;S&gt; example)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>另外对于字符串还支持其他匹配（精准匹配之外）</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exampleQueryTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Postsale</span> <span class="variable">examplepOostsale</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Postsale</span>();</span><br><span class="line">        examplepOostsale.setUserName(<span class="string">&quot;SINOSUN&quot;</span>);</span><br><span class="line">        examplepOostsale.setAfsSn(<span class="string">&quot;300333&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExampleMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> ExampleMatcher.matching()</span><br><span class="line">                .withMatcher(<span class="string">&quot;userName&quot;</span>, m -&gt; m.ignoreCase())</span><br><span class="line">                .withMatcher(<span class="string">&quot;afsSn&quot;</span>, m -&gt; m.startsWith());</span><br><span class="line"></span><br><span class="line">        Optional&lt;Postsale&gt; postsaleOptional = postsaleRepository.findOne(Example.of(examplepOostsale, matcher));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2-7-Specification"   >
          <a href="#3-2-7-Specification" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-7-Specification" class="headerlink" title="3.2.7 Specification"></a>3.2.7 Specification</h4>
      <p>JPA 2 规范引进了criteria查询API。Spring Data JPA对此提供了支持。如果你想使用这个功能，只需要继承<code>JpaSpecificationExecutor</code>接口。这个接口已经实现了基本的查询方法（findOne，findAll，count等）。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Specification</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &lt;T&gt; Specification&lt;T&gt; <span class="title function_">not</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; spec)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">return</span> <span class="variable">spec</span> <span class="operator">=</span>= <span class="literal">null</span> </span><br><span class="line">				? (root, query, builder) -&gt; <span class="literal">null</span> </span><br><span class="line">				: (root, query, builder) -&gt; builder.not(spec.toPredicate(root, query, builder));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &lt;T&gt; Specification&lt;T&gt; <span class="title function_">where</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; spec)</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">spec</span> <span class="operator">=</span>= <span class="literal">null</span> ? (root, query, builder) -&gt; <span class="literal">null</span> : spec;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span> Specification&lt;T&gt; <span class="title function_">and</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; other)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> SpecificationComposition.composed(<span class="built_in">this</span>, other, CriteriaBuilder::and);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span> Specification&lt;T&gt; <span class="title function_">or</span><span class="params">(<span class="meta">@Nullable</span> Specification&lt;T&gt; other)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> SpecificationComposition.composed(<span class="built_in">this</span>, other, CriteriaBuilder::or);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	Predicate <span class="title function_">toPredicate</span><span class="params">(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>root、query、criteriaBuild三个参数的类型都是在javax.persistence.criteria包下，且都是在JPA 2.0规范添加的类和接口。这里分别介绍一下三个重要的参数。</p>
<p><strong>root</strong></p>
<p><code>Root&lt;X&gt;</code>接口，主要用于处理实体和字段、实体与实体之间的关系。除了上述例子中的取字段的操作以外，还可以做<code>join</code>操作。具体可以参考<span class="exturl"><a class="exturl__link"   href="http://docs.jboss.org/hibernate/jpamodelgen/1.0/reference/en-US/html_single/#whatisit" >Hibernate implementation’s documentation for an example</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>
<p><strong>query</strong></p>
<p><code>CriteriaQuery&lt;T&gt;</code>接口，主要用于对查询结果的处理，包括groupBy、orderBy、having、distinct等操作。</p>
<p><strong>criteriaBuilder</strong></p>
<p><code>CriteriaBuilder</code>接口，主要用于各种条件查询、模拟sql函数等。</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220510173536344.png" alt="image-20220510173536344"></p>
<p>Specification查询主要用于复杂查询。通过三个参数的组合，可以实现基本上绝大部分sql能实现的复杂查询，且基于Java代码，具有很好的可读性。</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Postsale&gt; <span class="title function_">findSpecification</span><span class="params">(Date startTime, Date endTime, String afsSn, String userId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> PageRequest.of(<span class="number">1</span>, <span class="number">10</span>,Sort.by(Sort.Direction.ASC, <span class="string">&quot;applyTime&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Specification&lt;Postsale&gt; specification = (Specification&lt;Postsale&gt;) (root, query, cb) -&gt; &#123;</span><br><span class="line">            List&lt;Predicate&gt; predicateList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(userId)) &#123;</span><br><span class="line">                predicateList.add(cb.equal(root.get(<span class="string">&quot;userId&quot;</span>).as(String.class), userId));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(afsSn)) &#123;</span><br><span class="line">                predicateList.add(cb.like(root.get(<span class="string">&quot;afsSn&quot;</span>).as(String.class), <span class="string">&quot;%&quot;</span> + userId + <span class="string">&quot;%&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            predicateList.add(cb.greaterThanOrEqualTo(root.get(<span class="string">&quot;applyTime&quot;</span>).as(Date.class), startTime));</span><br><span class="line">            predicateList.add(cb.lessThanOrEqualTo(root.get(<span class="string">&quot;applyTime&quot;</span>).as(Date.class), endTime));</span><br><span class="line"></span><br><span class="line">            Predicate[] pre = <span class="keyword">new</span> <span class="title class_">Predicate</span>[predicateList.size()];</span><br><span class="line">            pre = predicateList.toArray(pre);</span><br><span class="line">            <span class="keyword">return</span> query.where(pre).getRestriction();</span><br><span class="line">        &#125;;</span><br><span class="line">        Page&lt;Postsale&gt; page = postsaleRepository.findAll(specification, pageable);</span><br><span class="line">        <span class="keyword">return</span> page.getContent();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>




        <h3 id="3-3-进阶用法"   >
          <a href="#3-3-进阶用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-进阶用法" class="headerlink" title="3.3 进阶用法"></a>3.3 进阶用法</h3>
      
        <h4 id="3-3-1-JPA-审计"   >
          <a href="#3-3-1-JPA-审计" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-1-JPA-审计" class="headerlink" title="3.3.1 JPA 审计"></a>3.3.1 JPA 审计</h4>
      <p>在数据创建或者修改时，就能够记录下是谁、什么时间创建/修改了这个数据。Spring Data JPA就为我们提供了这个功能，叫Auditing，中文翻译是“审计、查账”的意思。你只需要一些简单的配置，就能轻松地实现这个功能。Auditing的原理是基于<strong>Aspect</strong>的“面向切面编程”。</p>

        <h5 id="1）配置"   >
          <a href="#1）配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#1）配置" class="headerlink" title="1）配置"></a>1）配置</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaAuditing</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPAConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuditorAware&lt;String&gt; <span class="title function_">getCurrentUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> User.builder().userId(<span class="string">&quot;300333&quot;</span>).userName(<span class="string">&quot;SINOSUN&quot;</span>).build();</span><br><span class="line">        <span class="keyword">return</span> () -&gt; Optional.of(currentUser).map(User::getUserId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方文档以SpringSecurity为示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringSecurityAuditorAware</span> <span class="keyword">implements</span> <span class="title class_">AuditorAware</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Optional&lt;User&gt; <span class="title function_">getCurrentAuditor</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(SecurityContextHolder.getContext())</span><br><span class="line">			  .map(SecurityContext::getAuthentication)</span><br><span class="line">			  .filter(Authentication::isAuthenticated)</span><br><span class="line">			  .map(Authentication::getPrincipal)</span><br><span class="line">			  .map(User.class::cast);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="2）使用"   >
          <a href="#2）使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#2）使用" class="headerlink" title="2）使用"></a>2）使用</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EntityListeners(AuditingEntityListener.class)</span></span><br></pre></td></tr></table></div></figure>

<ul>
<li><code>@CreatedBy</code>：谁创建的</li>
<li><code>@LastModifiedBy</code>：谁最后修改</li>
<li><code>@CreatedDate</code>：创建时间</li>
<li><code>@LastModifiedDate</code>：最后修改时间</li>
</ul>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EntityListeners(AuditingEntityListener.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6141353065320670470L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@OneToOne(cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="keyword">private</span> User createdUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@OneToOne(cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="keyword">private</span> User modifiedUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime modifiedTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>




        <h4 id="3-3-2-事务"   >
          <a href="#3-3-2-事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-2-事务" class="headerlink" title="3.3.2 事务"></a>3.3.2 事务</h4>
      <p>默认情况下，Spring Data JPA提供的CRUD方法都添加了事务，这里的事务使用的是Spring的事务管理机制。对于读操作来说，事务的<code>readOnly</code>属性是设置的<code>true</code>（默认值是false），而其他操作都是设置的一个空的<code>@Transactional</code>注解，所以使用的都是Spring事务的默认配置。</p>
<p><img src="https://hp-blog-img.oss-cn-beijing.aliyuncs.com/markdown/image-20220510173811454.png" alt="image-20220510173811454"></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Transactional &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Alias for &#123;<span class="doctag">@link</span> #transactionManager&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #transactionManager</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(&quot;transactionManager&quot;)</span></span><br><span class="line">	String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * A &lt;em&gt;qualifier&lt;/em&gt; value for the specified transaction.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;May be used to determine the target transaction manager, matching the</span></span><br><span class="line"><span class="comment">	 * qualifier value (or the bean name) of a specific</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> org.springframework.transaction.TransactionManager TransactionManager&#125;</span></span><br><span class="line"><span class="comment">	 * bean definition.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #value</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.PlatformTransactionManager</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.ReactiveTransactionManager</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">	String <span class="title function_">transactionManager</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Defines zero (0) or more transaction labels.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Labels may be used to describe a transaction, and they can be evaluated</span></span><br><span class="line"><span class="comment">	 * by individual transaction managers. Labels may serve a solely descriptive</span></span><br><span class="line"><span class="comment">	 * purpose or map to pre-defined transaction manager-specific options.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;See the documentation of the actual transaction manager implementation</span></span><br><span class="line"><span class="comment">	 * for details on how it evaluates transaction labels.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 5.3</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.DefaultTransactionAttribute#getLabels()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] label() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The transaction propagation type.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Defaults to &#123;<span class="doctag">@link</span> Propagation#REQUIRED&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.TransactionAttribute#getPropagationBehavior()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Propagation <span class="title function_">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The transaction isolation level.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Defaults to &#123;<span class="doctag">@link</span> Isolation#DEFAULT&#125;.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Exclusively designed for use with &#123;<span class="doctag">@link</span> Propagation#REQUIRED&#125; or</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> Propagation#REQUIRES_NEW&#125; since it only applies to newly started</span></span><br><span class="line"><span class="comment">	 * transactions. Consider switching the &quot;validateExistingTransactions&quot; flag to</span></span><br><span class="line"><span class="comment">	 * &quot;true&quot; on your transaction manager if you&#x27;d like isolation level declarations</span></span><br><span class="line"><span class="comment">	 * to get rejected when participating in an existing transaction with a different</span></span><br><span class="line"><span class="comment">	 * isolation level.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.TransactionAttribute#getIsolationLevel()</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Isolation <span class="title function_">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The timeout for this transaction (in seconds).</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Defaults to the default timeout of the underlying transaction system.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Exclusively designed for use with &#123;<span class="doctag">@link</span> Propagation#REQUIRED&#125; or</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> Propagation#REQUIRES_NEW&#125; since it only applies to newly started</span></span><br><span class="line"><span class="comment">	 * transactions.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the timeout in seconds</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.TransactionAttribute#getTimeout()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> TransactionDefinition.TIMEOUT_DEFAULT;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The timeout for this transaction (in seconds).</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Defaults to the default timeout of the underlying transaction system.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Exclusively designed for use with &#123;<span class="doctag">@link</span> Propagation#REQUIRED&#125; or</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> Propagation#REQUIRES_NEW&#125; since it only applies to newly started</span></span><br><span class="line"><span class="comment">	 * transactions.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the timeout in seconds as a String value, e.g. a placeholder</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 5.3</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.TransactionAttribute#getTimeout()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String <span class="title function_">timeoutString</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * A boolean flag that can be set to &#123;<span class="doctag">@code</span> true&#125; if the transaction is</span></span><br><span class="line"><span class="comment">	 * effectively read-only, allowing for corresponding optimizations at runtime.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Defaults to &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This just serves as a hint for the actual transaction subsystem;</span></span><br><span class="line"><span class="comment">	 * it will &lt;i&gt;not necessarily&lt;/i&gt; cause failure of write access attempts.</span></span><br><span class="line"><span class="comment">	 * A transaction manager which cannot interpret the read-only hint will</span></span><br><span class="line"><span class="comment">	 * &lt;i&gt;not&lt;/i&gt; throw an exception when asked for a read-only transaction</span></span><br><span class="line"><span class="comment">	 * but rather silently ignore the hint.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.TransactionAttribute#isReadOnly()</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Defines zero (0) or more exception &#123;<span class="doctag">@linkplain</span> Class classes&#125;, which must be</span></span><br><span class="line"><span class="comment">	 * subclasses of &#123;<span class="doctag">@link</span> Throwable&#125;, indicating which exception types must cause</span></span><br><span class="line"><span class="comment">	 * a transaction rollback.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;By default, a transaction will be rolled back on &#123;<span class="doctag">@link</span> RuntimeException&#125;</span></span><br><span class="line"><span class="comment">	 * and &#123;<span class="doctag">@link</span> Error&#125; but not on checked exceptions (business exceptions). See</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)&#125;</span></span><br><span class="line"><span class="comment">	 * for a detailed explanation.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This is the preferred way to construct a rollback rule (in contrast to</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> #rollbackForClassName&#125;), matching the exception type, its subclasses,</span></span><br><span class="line"><span class="comment">	 * and its nested classes. See the &#123;<span class="doctag">@linkplain</span> Transactional class-level javadocs&#125;</span></span><br><span class="line"><span class="comment">	 * for further details on rollback rule semantics and warnings regarding possible</span></span><br><span class="line"><span class="comment">	 * unintentional matches.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #rollbackForClassName</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(Class)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Defines zero (0) or more exception name patterns (for exceptions which must be a</span></span><br><span class="line"><span class="comment">	 * subclass of &#123;<span class="doctag">@link</span> Throwable&#125;), indicating which exception types must cause</span></span><br><span class="line"><span class="comment">	 * a transaction rollback.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;See the &#123;<span class="doctag">@linkplain</span> Transactional class-level javadocs&#125; for further details</span></span><br><span class="line"><span class="comment">	 * on rollback rule semantics, patterns, and warnings regarding possible</span></span><br><span class="line"><span class="comment">	 * unintentional matches.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #rollbackFor</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(String)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] rollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Defines zero (0) or more exception &#123;<span class="doctag">@link</span> Class Classes&#125;, which must be</span></span><br><span class="line"><span class="comment">	 * subclasses of &#123;<span class="doctag">@link</span> Throwable&#125;, indicating which exception types must</span></span><br><span class="line"><span class="comment">	 * &lt;b&gt;not&lt;/b&gt; cause a transaction rollback.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This is the preferred way to construct a rollback rule (in contrast to</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> #noRollbackForClassName&#125;), matching the exception type, its subclasses,</span></span><br><span class="line"><span class="comment">	 * and its nested classes. See the &#123;<span class="doctag">@linkplain</span> Transactional class-level javadocs&#125;</span></span><br><span class="line"><span class="comment">	 * for further details on rollback rule semantics and warnings regarding possible</span></span><br><span class="line"><span class="comment">	 * unintentional matches.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #noRollbackForClassName</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(Class)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Defines zero (0) or more exception name patterns (for exceptions which must be a</span></span><br><span class="line"><span class="comment">	 * subclass of &#123;<span class="doctag">@link</span> Throwable&#125;) indicating which exception types must &lt;b&gt;not&lt;/b&gt;</span></span><br><span class="line"><span class="comment">	 * cause a transaction rollback.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;See the &#123;<span class="doctag">@linkplain</span> Transactional class-level javadocs&#125; for further details</span></span><br><span class="line"><span class="comment">	 * on rollback rule semantics, patterns, and warnings regarding possible</span></span><br><span class="line"><span class="comment">	 * unintentional matches.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #noRollbackFor</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(String)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] noRollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>




        <h4 id="3-3-3-Lock"   >
          <a href="#3-3-3-Lock" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-3-Lock" class="headerlink" title="3.3.3 Lock"></a>3.3.3 Lock</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;User, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Lock(LockModeType.READ)</span></span><br><span class="line">  List&lt;User&gt; <span class="title function_">findByLastname</span><span class="params">(String lastname)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>锁的类型</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LockModeType</span></span><br><span class="line">&#123;</span><br><span class="line">    READ, <span class="comment">// 与下面的OPTIMISTIC同义</span></span><br><span class="line"></span><br><span class="line">    WRITE, <span class="comment">// 与下面的OPTIMISTIC_FORCE_INCREMENT同义</span></span><br><span class="line"></span><br><span class="line">    OPTIMISTIC, <span class="comment">//读操作时不会更新Version字段的值，只有在写操作的时候会</span></span><br><span class="line"></span><br><span class="line">    OPTIMISTIC_FORCE_INCREMENT, <span class="comment">//在读和写操作时都会更新Version字段的值</span></span><br><span class="line"></span><br><span class="line">    PESSIMISTIC_READ,</span><br><span class="line"></span><br><span class="line">    PESSIMISTIC_WRITE,</span><br><span class="line"></span><br><span class="line">    PESSIMISTIC_FORCE_INCREMENT,</span><br><span class="line"></span><br><span class="line">    NONE <span class="comment">// 无锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>推荐阅读：<span class="exturl"><a class="exturl__link"   href="https://www.byteslounge.com/tutorials/locking-in-jpa-lockmodetype" >https://www.byteslounge.com/tutorials/locking-in-jpa-lockmodetype</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="3-3-4-实体关联"   >
          <a href="#3-3-4-实体关联" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-4-实体关联" class="headerlink" title="3.3.4 实体关联"></a>3.3.4 实体关联</h4>
      <ol>
<li>一对一的关系，jpa 使用的注解是 @OneToOne</li>
<li>一对多的关系，jpa 使用的注解是 @OneToMany</li>
<li>多对一的关系，jpa 使用的注解是 @ManyToOne</li>
<li>多对多的关系，jpa 使用的注解是 @ManyToMany</li>
</ol>

        <h4 id="3-3-5-查询结果"   >
          <a href="#3-3-5-查询结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-5-查询结果" class="headerlink" title="3.3.5 查询结果"></a>3.3.5 查询结果</h4>
      
        <h5 id="1）Optional"   >
          <a href="#1）Optional" class="heading-link"><i class="fas fa-link"></i></a><a href="#1）Optional" class="headerlink" title="1）Optional"></a>1）Optional</h5>
      
        <h5 id="2）流查询结果"   >
          <a href="#2）流查询结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#2）流查询结果" class="headerlink" title="2）流查询结果"></a>2）流查询结果</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">Stream&lt;User&gt; <span class="title function_">findAllByCustomQueryAndStream</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个数据流可能包裹底层数据存储特定资源，因此在使用后必须关闭。 你也可以使用close()方法或者JAVA 7 try-with-resources区块手动关闭数据流。</span></span><br><span class="line"> <span class="keyword">try</span>(Stream&lt;<span class="type">User</span> <span class="variable">stream</span> <span class="operator">=</span> repository.findAllByCustomQueryAndStream())&#123;</span><br><span class="line"></span><br><span class="line"> stream.forEach(...);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="3）异步查询结果"   >
          <a href="#3）异步查询结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#3）异步查询结果" class="headerlink" title="3）异步查询结果"></a>3）异步查询结果</h5>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">Future&lt;User&gt; <span class="title function_">findByFirstname</span><span class="params">(String firstname)</span>;  (<span class="number">1</span>)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line">CompletableFuture&lt;User&gt; <span class="title function_">findOneByFirstname</span><span class="params">(String firstname)</span>;  (<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line">ListenableFuture&lt;User&gt; <span class="title function_">findOneByLastname</span><span class="params">(String lastname)</span>;     (<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) 使用 java.util.concurrent.Future 作为返回类型</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 使用 Java <span class="number">8</span> java.util.concurrent.CompletableFuture 作为返回类型</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) 使用 org.springframework.util.concurrent.ListenableFuture 作为返回类型</span><br></pre></td></tr></table></div></figure>
]]></content>
      <categories>
        <category>SpringDataJPA</category>
      </categories>
      <tags>
        <tag>SpringDataJPA</tag>
      </tags>
  </entry>
</search>
